; Listing generated by Microsoft (R) Optimizing Compiler Version 19.34.31937.0 

	TITLE	J:\work\SUDOKU\SUDOKU\SUDOKU\Debug\Calcul_temps.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__7723FEDF_SUDOKU@pch DB 01H
__5DCF1DCC_afxstr@h DB 01H
__B2E308CD_atlcore@h DB 01H
__7381F871_atlchecked@h DB 01H
__981866FA_afx@h DB 01H
__B625A68F_cstringt@h DB 01H
__184F7456_corecrt_memcpy_s@h DB 01H
__AA932BE8_atlexcept@h DB 01H
__A8C6672F_winerror@h DB 01H
__A7F89B2B_corecrt_wstdio@h DB 01H
__C44F8F6B_corecrt_stdio_config@h DB 01H
__D909E87F_atlalloc@h DB 01H
__63F83F46_atltrace@h DB 01H
__05D8B7B7_atlsimpstr@h DB 01H
__2B0A8887_atltime@h DB 01H
__3C941363_Calcul_temps@h DB 01H
__B901A205_Calcul_temps@cpp DB 01H
__BB6863C9_timeb@h DB 01H
__3EA9D4DA_stdafx@h DB 01H
__8906E2DA_stdafx@cpp DB 01H
msvcjmc	ENDS
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	_HRESULT_FROM_WIN32
PUBLIC	___local_stdio_printf_options
PUBLIC	__vswprintf_s_l
PUBLIC	_swprintf_s
PUBLIC	?AtlThrowImpl@ATL@@YGXJ@Z			; ATL::AtlThrowImpl
PUBLIC	??$AtlMultiply@I@ATL@@YAJPAIII@Z		; ATL::AtlMultiply<unsigned int>
PUBLIC	?Allocate@CCRTAllocator@ATL@@SAPAXI@Z		; ATL::CCRTAllocator::Allocate
PUBLIC	?Free@CCRTAllocator@ATL@@SAXPAX@Z		; ATL::CCRTAllocator::Free
PUBLIC	??0?$CTraceCategoryEx@$0CAAA@$0A@@ATL@@QAE@PB_W@Z ; ATL::CTraceCategoryEx<8192,0>::CTraceCategoryEx<8192,0>
PUBLIC	??B?$CTraceCategoryEx@$0CAAA@$0A@@ATL@@QAEIXZ	; ATL::CTraceCategoryEx<8192,0>::operator unsigned int
PUBLIC	??0?$CTraceCategoryEx@$0CAAAA@$0A@@ATL@@QAE@PB_W@Z ; ATL::CTraceCategoryEx<131072,0>::CTraceCategoryEx<131072,0>
PUBLIC	??B?$CTraceCategoryEx@$0CAAAA@$0A@@ATL@@QAEIXZ	; ATL::CTraceCategoryEx<131072,0>::operator unsigned int
PUBLIC	?GetCategoryName@CTrace@ATL@@CAPA_WI@Z		; ATL::CTrace::GetCategoryName
PUBLIC	?TraceV@CTrace@ATL@@CAXPBDHIIPB_W@Z		; ATL::CTrace::TraceV
PUBLIC	?TraceV@CTrace@ATL@@SAXPBDHIIPB_WPAD@Z		; ATL::CTrace::TraceV
PUBLIC	?RegisterCategory@CTrace@ATL@@SAXPB_WI@Z	; ATL::CTrace::RegisterCategory
PUBLIC	??0?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@IAE@XZ ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>
PUBLIC	??1?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::~CHeapPtrBase<wchar_t,ATL::CCRTAllocator>
PUBLIC	??B?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QBEPA_WXZ ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::operator wchar_t *
PUBLIC	?AllocateBytes@?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::AllocateBytes
PUBLIC	?Free@?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QAEXXZ ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::Free
PUBLIC	??0?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ ; ATL::CHeapPtr<wchar_t,ATL::CCRTAllocator>::CHeapPtr<wchar_t,ATL::CCRTAllocator>
PUBLIC	?Allocate@?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z ; ATL::CHeapPtr<wchar_t,ATL::CCRTAllocator>::Allocate
PUBLIC	??1?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ ; ATL::CHeapPtr<wchar_t,ATL::CCRTAllocator>::~CHeapPtr<wchar_t,ATL::CCRTAllocator>
PUBLIC	?__autoclassinit2@?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAEXI@Z ; ATL::CHeapPtr<wchar_t,ATL::CCRTAllocator>::__autoclassinit2
PUBLIC	??0CPreserveLastError@ATL@@QAE@XZ		; ATL::CPreserveLastError::CPreserveLastError
PUBLIC	??1CPreserveLastError@ATL@@QAE@XZ		; ATL::CPreserveLastError::~CPreserveLastError
PUBLIC	??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z	; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
PUBLIC	??RCTraceFileAndLineInfo@ATL@@QBAXHIPB_WZZ	; ATL::CTraceFileAndLineInfo::operator()
PUBLIC	?AfxCrtErrorCheck@@YAHH@Z			; AfxCrtErrorCheck
PUBLIC	?wmemcpy_s@Checked@ATL@@YAXPA_WIPB_WI@Z		; ATL::Checked::wmemcpy_s
PUBLIC	?AtlStrLen@ATL@@YAHPB_W@Z			; ATL::AtlStrLen
PUBLIC	?_AtlGetStringResourceImage@ATL@@YAPBUATLSTRINGRESOURCEIMAGE@1@PAUHINSTANCE__@@PAUHRSRC__@@I@Z ; ATL::_AtlGetStringResourceImage
PUBLIC	?AtlGetStringResourceImage@ATL@@YAPBUATLSTRINGRESOURCEIMAGE@1@PAUHINSTANCE__@@I@Z ; ATL::AtlGetStringResourceImage
PUBLIC	?data@CStringData@ATL@@QAEPAXXZ			; ATL::CStringData::data
PUBLIC	?IsLocked@CStringData@ATL@@QBE_NXZ		; ATL::CStringData::IsLocked
PUBLIC	?IsShared@CStringData@ATL@@QBE_NXZ		; ATL::CStringData::IsShared
PUBLIC	?Release@CStringData@ATL@@QAEXXZ		; ATL::CStringData::Release
PUBLIC	?GetBaseTypeLength@?$ChTraitsCRT@_W@ATL@@SAHPB_W@Z ; ATL::ChTraitsCRT<wchar_t>::GetBaseTypeLength
PUBLIC	?GetBaseTypeLength@?$ChTraitsCRT@_W@ATL@@SAHPB_WH@Z ; ATL::ChTraitsCRT<wchar_t>::GetBaseTypeLength
PUBLIC	?ConvertToBaseType@?$ChTraitsCRT@_W@ATL@@SAXPA_WHPB_WH@Z ; ATL::ChTraitsCRT<wchar_t>::ConvertToBaseType
PUBLIC	??0?$CSimpleStringT@_W$0A@@ATL@@QAE@PAUIAtlStringMgr@1@@Z ; ATL::CSimpleStringT<wchar_t,0>::CSimpleStringT<wchar_t,0>
PUBLIC	??1?$CSimpleStringT@_W$0A@@ATL@@QAE@XZ		; ATL::CSimpleStringT<wchar_t,0>::~CSimpleStringT<wchar_t,0>
PUBLIC	??4?$CSimpleStringT@_W$0A@@ATL@@QAEAAV01@PB_W@Z	; ATL::CSimpleStringT<wchar_t,0>::operator=
PUBLIC	?Empty@?$CSimpleStringT@_W$0A@@ATL@@QAEXXZ	; ATL::CSimpleStringT<wchar_t,0>::Empty
PUBLIC	?GetAllocLength@?$CSimpleStringT@_W$0A@@ATL@@QBEHXZ ; ATL::CSimpleStringT<wchar_t,0>::GetAllocLength
PUBLIC	?GetBuffer@?$CSimpleStringT@_W$0A@@ATL@@QAEPA_WH@Z ; ATL::CSimpleStringT<wchar_t,0>::GetBuffer
PUBLIC	?GetLength@?$CSimpleStringT@_W$0A@@ATL@@QBEHXZ	; ATL::CSimpleStringT<wchar_t,0>::GetLength
PUBLIC	?GetString@?$CSimpleStringT@_W$0A@@ATL@@QBEPB_WXZ ; ATL::CSimpleStringT<wchar_t,0>::GetString
PUBLIC	?ReleaseBufferSetLength@?$CSimpleStringT@_W$0A@@ATL@@QAEXH@Z ; ATL::CSimpleStringT<wchar_t,0>::ReleaseBufferSetLength
PUBLIC	?SetString@?$CSimpleStringT@_W$0A@@ATL@@QAEXPB_W@Z ; ATL::CSimpleStringT<wchar_t,0>::SetString
PUBLIC	?SetString@?$CSimpleStringT@_W$0A@@ATL@@QAEXPB_WH@Z ; ATL::CSimpleStringT<wchar_t,0>::SetString
PUBLIC	?CopyCharsOverlapped@?$CSimpleStringT@_W$0A@@ATL@@SAXPA_WIPB_WH@Z ; ATL::CSimpleStringT<wchar_t,0>::CopyCharsOverlapped
PUBLIC	?StringLength@?$CSimpleStringT@_W$0A@@ATL@@SAHPB_W@Z ; ATL::CSimpleStringT<wchar_t,0>::StringLength
PUBLIC	?ThrowMemoryException@?$CSimpleStringT@_W$0A@@ATL@@KAXXZ ; ATL::CSimpleStringT<wchar_t,0>::ThrowMemoryException
PUBLIC	?Attach@?$CSimpleStringT@_W$0A@@ATL@@AAEXPAUCStringData@2@@Z ; ATL::CSimpleStringT<wchar_t,0>::Attach
PUBLIC	?Fork@?$CSimpleStringT@_W$0A@@ATL@@AAEXH@Z	; ATL::CSimpleStringT<wchar_t,0>::Fork
PUBLIC	?GetData@?$CSimpleStringT@_W$0A@@ATL@@ABEPAUCStringData@2@XZ ; ATL::CSimpleStringT<wchar_t,0>::GetData
PUBLIC	?PrepareWrite@?$CSimpleStringT@_W$0A@@ATL@@AAEPA_WH@Z ; ATL::CSimpleStringT<wchar_t,0>::PrepareWrite
PUBLIC	?PrepareWrite2@?$CSimpleStringT@_W$0A@@ATL@@AAEXH@Z ; ATL::CSimpleStringT<wchar_t,0>::PrepareWrite2
PUBLIC	?Reallocate@?$CSimpleStringT@_W$0A@@ATL@@AAEXH@Z ; ATL::CSimpleStringT<wchar_t,0>::Reallocate
PUBLIC	?SetLength@?$CSimpleStringT@_W$0A@@ATL@@AAEXH@Z	; ATL::CSimpleStringT<wchar_t,0>::SetLength
PUBLIC	??0?$CStringT@_WV?$StrTraitMFC@_WV?$ChTraitsCRT@_W@ATL@@@@@ATL@@QAE@PB_W@Z ; ATL::CStringT<wchar_t,StrTraitMFC<wchar_t,ATL::ChTraitsCRT<wchar_t> > >::CStringT<wchar_t,StrTraitMFC<wchar_t,ATL::ChTraitsCRT<wchar_t> > >
PUBLIC	??1?$CStringT@_WV?$StrTraitMFC@_WV?$ChTraitsCRT@_W@ATL@@@@@ATL@@QAE@XZ ; ATL::CStringT<wchar_t,StrTraitMFC<wchar_t,ATL::ChTraitsCRT<wchar_t> > >::~CStringT<wchar_t,StrTraitMFC<wchar_t,ATL::ChTraitsCRT<wchar_t> > >
PUBLIC	??4?$CStringT@_WV?$StrTraitMFC@_WV?$ChTraitsCRT@_W@ATL@@@@@ATL@@QAEAAV01@PB_W@Z ; ATL::CStringT<wchar_t,StrTraitMFC<wchar_t,ATL::ChTraitsCRT<wchar_t> > >::operator=
PUBLIC	?LoadStringW@?$CStringT@_WV?$StrTraitMFC@_WV?$ChTraitsCRT@_W@ATL@@@@@ATL@@QAEHI@Z ; ATL::CStringT<wchar_t,StrTraitMFC<wchar_t,ATL::ChTraitsCRT<wchar_t> > >::LoadStringW
PUBLIC	?LoadStringW@?$CStringT@_WV?$StrTraitMFC@_WV?$ChTraitsCRT@_W@ATL@@@@@ATL@@QAEHPAUHINSTANCE__@@I@Z ; ATL::CStringT<wchar_t,StrTraitMFC<wchar_t,ATL::ChTraitsCRT<wchar_t> > >::LoadStringW
PUBLIC	?CheckImplicitLoad@?$CStringT@_WV?$StrTraitMFC@_WV?$ChTraitsCRT@_W@ATL@@@@@ATL@@AAE_NPBX@Z ; ATL::CStringT<wchar_t,StrTraitMFC<wchar_t,ATL::ChTraitsCRT<wchar_t> > >::CheckImplicitLoad
PUBLIC	?__autoclassinit2@?$CStringT@_WV?$StrTraitMFC@_WV?$ChTraitsCRT@_W@ATL@@@@@ATL@@QAEXI@Z ; ATL::CStringT<wchar_t,StrTraitMFC<wchar_t,ATL::ChTraitsCRT<wchar_t> > >::__autoclassinit2
PUBLIC	?FindStringResourceInstance@?$StrTraitMFC@_WV?$ChTraitsCRT@_W@ATL@@@@SAPAUHINSTANCE__@@I@Z ; StrTraitMFC<wchar_t,ATL::ChTraitsCRT<wchar_t> >::FindStringResourceInstance
PUBLIC	?GetDefaultManager@?$StrTraitMFC@_WV?$ChTraitsCRT@_W@ATL@@@@SAPAUIAtlStringMgr@ATL@@XZ ; StrTraitMFC<wchar_t,ATL::ChTraitsCRT<wchar_t> >::GetDefaultManager
PUBLIC	??0Calcul_temps@@QAE@XZ				; Calcul_temps::Calcul_temps
PUBLIC	??1Calcul_temps@@QAE@XZ				; Calcul_temps::~Calcul_temps
PUBLIC	?Start_time@Calcul_temps@@QAEXXZ		; Calcul_temps::Start_time
PUBLIC	?Stop_time@Calcul_temps@@QAEXXZ			; Calcul_temps::Stop_time
PUBLIC	?Read_time@Calcul_temps@@QAE_KXZ		; Calcul_temps::Read_time
PUBLIC	?Build@Calcul_temps@@AAE_KXZ			; Calcul_temps::Build
PUBLIC	__JustMyCode_Default
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@		; `string'
PUBLIC	??_C@_1NK@JCBLKNMO@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	?atlTraceException@ATL@@3V?$CTraceCategoryEx@$0CAAA@$0A@@1@A ; ATL::atlTraceException
PUBLIC	??_C@_1CE@IMMADNAP@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAE?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi@ ; `string'
PUBLIC	?atlTraceString@ATL@@3V?$CTraceCategoryEx@$0CAAAA@$0A@@1@A ; ATL::atlTraceString
PUBLIC	??_C@_1BO@GMLILNDJ@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg@ ; `string'
PUBLIC	?m_nLevel@CTrace@ATL@@1IA			; ATL::CTrace::m_nLevel
PUBLIC	?m_nCategory@CTrace@ATL@@1IA			; ATL::CTrace::m_nCategory
PUBLIC	?m_nLastCategory@CTrace@ATL@@1IA		; ATL::CTrace::m_nLastCategory
PUBLIC	?m_nMap@CTrace@ATL@@1PAUCategoryMap@12@A	; ATL::CTrace::m_nMap
PUBLIC	??_C@_1O@LFNDFEBP@?$AA?$CF?$AAl?$AAs?$AA?5?$AA?9?$AA?5@ ; `string'
PUBLIC	??_C@_1M@PGKOAACE@?$AA?$CF?$AAu?$AA?5?$AA?9?$AA?5@ ; `string'
PUBLIC	??_C@_1O@OAIPCDPO@?$AA?$CF?$AAl?$AAs?$AA?$CF?$AAl?$AAs@ ; `string'
PUBLIC	??_C@_17LGGGMOOB@?$AA?$CF?$AAh?$AAs@		; `string'
PUBLIC	??_C@_1EO@EBPPKGOM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAT?$AAo?$AAo?$AA?5?$AAm@ ; `string'
PUBLIC	??_C@_1NK@OBLAMPEN@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	?__LINE__Var@?0??AtlThrowImpl@ATL@@YGXJ@Z@4JA	; `ATL::AtlThrowImpl'::`1'::__LINE__Var
PUBLIC	??_C@_0GO@OMMACHMC@C?3?2Program?5Files?2Microsoft?5Visu@ ; `string'
PUBLIC	??_C@_1CK@DFMKPFAK@?$AAA?$AAt?$AAl?$AAT?$AAh?$AAr?$AAo?$AAw?$AA?3?$AA?5?$AAh?$AAr?$AA?5?$AA?$DN?$AA?5@ ; `string'
PUBLIC	??_C@_1BM@GBBOFEAE@?$AA_?$AA_?$AAa?$AAt?$AAl?$AA_?$AAc?$AAo?$AAn?$AAd?$AAV?$AAa?$AAl@ ; `string'
PUBLIC	??_C@_1NO@CMNIKGIF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1BG@GPELCNED@?$AAn?$AAR?$AAe?$AAf?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0@ ; `string'
PUBLIC	??_C@_0GN@HEPHHEDO@C?3?2Program?5Files?2Microsoft?5Visu@ ; `string'
PUBLIC	??_C@_1FC@BMOLDHIO@?$AAW?$AAa?$AAr?$AAn?$AAi?$AAn?$AAg?$AA?3?$AA?5?$AAi?$AAm?$AAp?$AAl?$AAi?$AAc@ ; `string'
PUBLIC	??_C@_1BK@OGOKLNEF@?$AAn?$AAL?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0@ ; `string'
PUBLIC	??_C@_1EG@PELIOAAG@?$AAn?$AAL?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAG?$AAe?$AAt?$AAD@ ; `string'
PUBLIC	??_C@_1BK@NHECDDNK@?$AAm?$AA_?$AAp?$AAD?$AAa?$AAt?$AAa?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0@ ; `string'
PUBLIC	??_C@_1CA@FILBIMGF@?$AAn?$AAN?$AAe?$AAw?$AAL?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0@ ; `string'
PUBLIC	??_C@_1EC@BCBEFJPM@?$AAp?$AAO?$AAl?$AAd?$AAD?$AAa?$AAt?$AAa?$AA?9?$AA?$DO?$AAn?$AAA?$AAl?$AAl?$AAo@ ; `string'
PUBLIC	??_C@_1EI@GDOFIOFO@?$AAC?$AAo?$AAm?$AAp?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAo?$AAn?$AA?5?$AAD?$AAe?$AAc@ ; `string'
PUBLIC	??_C@_1GI@IPEJAOBG@?$AAF?$AAi?$AAl?$AAe?$AA?3?$AA?5?$AAJ?$AA?3?$AA?2?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAS@ ; `string'
EXTRN	__invalid_parameter_noinfo:PROC
EXTRN	__errno:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	_memset:PROC
EXTRN	_wcscpy_s:PROC
EXTRN	_wcslen:PROC
EXTRN	__imp__GetLastError@0:PROC
EXTRN	__imp__SetLastError@4:PROC
EXTRN	__imp__LoadResource@8:PROC
EXTRN	__imp__LockResource@4:PROC
EXTRN	__imp__SizeofResource@8:PROC
EXTRN	__imp__FindResourceW@12:PROC
EXTRN	___stdio_common_vswprintf:PROC
EXTRN	___stdio_common_vswprintf_s:PROC
EXTRN	___stdio_common_vsnwprintf_s:PROC
EXTRN	_wmemcpy_s:PROC
EXTRN	_free:PROC
EXTRN	_malloc:PROC
EXTRN	__CrtDbgReportW:PROC
EXTRN	?AfxThrowMemoryException@@YGXXZ:PROC		; AfxThrowMemoryException
EXTRN	?AfxThrowInvalidArgException@@YGXXZ:PROC	; AfxThrowInvalidArgException
EXTRN	?AfxThrowOleException@@YGXJ@Z:PROC		; AfxThrowOleException
EXTRN	?AfxFindStringResourceHandle@@YGPAUHINSTANCE__@@I@Z:PROC ; AfxFindStringResourceHandle
EXTRN	?AfxGetStringManager@@YGPAUIAtlStringMgr@ATL@@XZ:PROC ; AfxGetStringManager
EXTRN	__ftime64_s:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__allmul:PROC
EXTRN	_memset:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT ?atlTraceException@ATL@@3V?$CTraceCategoryEx@$0CAAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceException@ATL@@3V?$CTraceCategoryEx@$0CAAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceException
_BSS	ENDS
;	COMDAT ?atlTraceString@ATL@@3V?$CTraceCategoryEx@$0CAAAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceString@ATL@@3V?$CTraceCategoryEx@$0CAAAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceString
_BSS	ENDS
;	COMDAT ?m_nLevel@CTrace@ATL@@1IA
_BSS	SEGMENT
?m_nLevel@CTrace@ATL@@1IA DD 01H DUP (?)		; ATL::CTrace::m_nLevel
_BSS	ENDS
;	COMDAT ?m_nLastCategory@CTrace@ATL@@1IA
_BSS	SEGMENT
?m_nLastCategory@CTrace@ATL@@1IA DD 01H DUP (?)		; ATL::CTrace::m_nLastCategory
_BSS	ENDS
;	COMDAT ?m_nMap@CTrace@ATL@@1PAUCategoryMap@12@A
_BSS	SEGMENT
?m_nMap@CTrace@ATL@@1PAUCategoryMap@12@A DB 02080H DUP (?) ; ATL::CTrace::m_nMap
_BSS	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?atlTraceException$initializer$@ATL@@3P6AXXZA DD FLAT:??__EatlTraceException@ATL@@YAXXZ ; ATL::atlTraceException$initializer$
CRT$XCU	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_1GI@IPEJAOBG@?$AAF?$AAi?$AAl?$AAe?$AA?3?$AA?5?$AAJ?$AA?3?$AA?2?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAS@
CONST	SEGMENT
??_C@_1GI@IPEJAOBG@?$AAF?$AAi?$AAl?$AAe?$AA?3?$AA?5?$AAJ?$AA?3?$AA?2?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAS@ DB 'F'
	DB	00H, 'i', 00H, 'l', 00H, 'e', 00H, ':', 00H, ' ', 00H, 'J', 00H
	DB	':', 00H, '\', 00H, 'w', 00H, 'o', 00H, 'r', 00H, 'k', 00H, '\'
	DB	00H, 'S', 00H, 'U', 00H, 'D', 00H, 'O', 00H, 'K', 00H, 'U', 00H
	DB	'\', 00H, 'S', 00H, 'U', 00H, 'D', 00H, 'O', 00H, 'K', 00H, 'U'
	DB	00H, '\', 00H, 'S', 00H, 'U', 00H, 'D', 00H, 'O', 00H, 'K', 00H
	DB	'U', 00H, '\', 00H, 'C', 00H, 'a', 00H, 'l', 00H, 'c', 00H, 'u'
	DB	00H, 'l', 00H, '_', 00H, 't', 00H, 'e', 00H, 'm', 00H, 'p', 00H
	DB	's', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EI@GDOFIOFO@?$AAC?$AAo?$AAm?$AAp?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAo?$AAn?$AA?5?$AAD?$AAe?$AAc@
CONST	SEGMENT
??_C@_1EI@GDOFIOFO@?$AAC?$AAo?$AAm?$AAp?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAo?$AAn?$AA?5?$AAD?$AAe?$AAc@ DB 'C'
	DB	00H, 'o', 00H, 'm', 00H, 'p', 00H, 'i', 00H, 'l', 00H, 'e', 00H
	DB	'd', 00H, ' ', 00H, 'o', 00H, 'n', 00H, ' ', 00H, 'D', 00H, 'e'
	DB	00H, 'c', 00H, ' ', 00H, '2', 00H, '8', 00H, ' ', 00H, '2', 00H
	DB	'0', 00H, '2', 00H, '2', 00H, ' ', 00H, 'a', 00H, 't', 00H, ' '
	DB	00H, '1', 00H, '3', 00H, ':', 00H, '2', 00H, '7', 00H, ':', 00H
	DB	'4', 00H, '7', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1EC@BCBEFJPM@?$AAp?$AAO?$AAl?$AAd?$AAD?$AAa?$AAt?$AAa?$AA?9?$AA?$DO?$AAn?$AAA?$AAl?$AAl?$AAo@
CONST	SEGMENT
??_C@_1EC@BCBEFJPM@?$AAp?$AAO?$AAl?$AAd?$AAD?$AAa?$AAt?$AAa?$AA?9?$AA?$DO?$AAn?$AAA?$AAl?$AAl?$AAo@ DB 'p'
	DB	00H, 'O', 00H, 'l', 00H, 'd', 00H, 'D', 00H, 'a', 00H, 't', 00H
	DB	'a', 00H, '-', 00H, '>', 00H, 'n', 00H, 'A', 00H, 'l', 00H, 'l'
	DB	00H, 'o', 00H, 'c', 00H, 'L', 00H, 'e', 00H, 'n', 00H, 'g', 00H
	DB	't', 00H, 'h', 00H, ' ', 00H, '<', 00H, ' ', 00H, 'n', 00H, 'L'
	DB	00H, 'e', 00H, 'n', 00H, 'g', 00H, 't', 00H, 'h', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CA@FILBIMGF@?$AAn?$AAN?$AAe?$AAw?$AAL?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0@
CONST	SEGMENT
??_C@_1CA@FILBIMGF@?$AAn?$AAN?$AAe?$AAw?$AAL?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0@ DB 'n'
	DB	00H, 'N', 00H, 'e', 00H, 'w', 00H, 'L', 00H, 'e', 00H, 'n', 00H
	DB	'g', 00H, 't', 00H, 'h', 00H, ' ', 00H, '>', 00H, '=', 00H, ' '
	DB	00H, '0', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1BK@NHECDDNK@?$AAm?$AA_?$AAp?$AAD?$AAa?$AAt?$AAa?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0@
CONST	SEGMENT
??_C@_1BK@NHECDDNK@?$AAm?$AA_?$AAp?$AAD?$AAa?$AAt?$AAa?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0@ DB 'm'
	DB	00H, '_', 00H, 'p', 00H, 'D', 00H, 'a', 00H, 't', 00H, 'a', 00H
	DB	' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '0', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EG@PELIOAAG@?$AAn?$AAL?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAG?$AAe?$AAt?$AAD@
CONST	SEGMENT
??_C@_1EG@PELIOAAG@?$AAn?$AAL?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAG?$AAe?$AAt?$AAD@ DB 'n'
	DB	00H, 'L', 00H, 'e', 00H, 'n', 00H, 'g', 00H, 't', 00H, 'h', 00H
	DB	' ', 00H, '<', 00H, '=', 00H, ' ', 00H, 'G', 00H, 'e', 00H, 't'
	DB	00H, 'D', 00H, 'a', 00H, 't', 00H, 'a', 00H, '(', 00H, ')', 00H
	DB	'-', 00H, '>', 00H, 'n', 00H, 'A', 00H, 'l', 00H, 'l', 00H, 'o'
	DB	00H, 'c', 00H, 'L', 00H, 'e', 00H, 'n', 00H, 'g', 00H, 't', 00H
	DB	'h', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1BK@OGOKLNEF@?$AAn?$AAL?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0@
CONST	SEGMENT
??_C@_1BK@OGOKLNEF@?$AAn?$AAL?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0@ DB 'n'
	DB	00H, 'L', 00H, 'e', 00H, 'n', 00H, 'g', 00H, 't', 00H, 'h', 00H
	DB	' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '0', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1FC@BMOLDHIO@?$AAW?$AAa?$AAr?$AAn?$AAi?$AAn?$AAg?$AA?3?$AA?5?$AAi?$AAm?$AAp?$AAl?$AAi?$AAc@
CONST	SEGMENT
??_C@_1FC@BMOLDHIO@?$AAW?$AAa?$AAr?$AAn?$AAi?$AAn?$AAg?$AA?3?$AA?5?$AAi?$AAm?$AAp?$AAl?$AAi?$AAc@ DB 'W'
	DB	00H, 'a', 00H, 'r', 00H, 'n', 00H, 'i', 00H, 'n', 00H, 'g', 00H
	DB	':', 00H, ' ', 00H, 'i', 00H, 'm', 00H, 'p', 00H, 'l', 00H, 'i'
	DB	00H, 'c', 00H, 'i', 00H, 't', 00H, ' ', 00H, 'L', 00H, 'o', 00H
	DB	'a', 00H, 'd', 00H, 'S', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'n'
	DB	00H, 'g', 00H, '(', 00H, '%', 00H, 'u', 00H, ')', 00H, ' ', 00H
	DB	'f', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H, 0aH
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0GN@HEPHHEDO@C?3?2Program?5Files?2Microsoft?5Visu@
CONST	SEGMENT
??_C@_0GN@HEPHHEDO@C?3?2Program?5Files?2Microsoft?5Visu@ DB 'C:\Program F'
	DB	'iles\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14'
	DB	'.34.31933\atlmfc\include\cstringt.h', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1BG@GPELCNED@?$AAn?$AAR?$AAe?$AAf?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0@
CONST	SEGMENT
??_C@_1BG@GPELCNED@?$AAn?$AAR?$AAe?$AAf?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0@ DB 'n'
	DB	00H, 'R', 00H, 'e', 00H, 'f', 00H, 's', 00H, ' ', 00H, '!', 00H
	DB	'=', 00H, ' ', 00H, '0', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1NO@CMNIKGIF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1NO@CMNIKGIF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H
	DB	'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' '
	DB	00H, 'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H
	DB	' ', 00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o'
	DB	00H, '\', 00H, '2', 00H, '0', 00H, '2', 00H, '2', 00H, '\', 00H
	DB	'E', 00H, 'n', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'p', 00H, 'r'
	DB	00H, 'i', 00H, 's', 00H, 'e', 00H, '\', 00H, 'V', 00H, 'C', 00H
	DB	'\', 00H, 'T', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\'
	DB	00H, 'M', 00H, 'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H
	DB	'4', 00H, '.', 00H, '3', 00H, '4', 00H, '.', 00H, '3', 00H, '1'
	DB	00H, '9', 00H, '3', 00H, '3', 00H, '\', 00H, 'a', 00H, 't', 00H
	DB	'l', 00H, 'm', 00H, 'f', 00H, 'c', 00H, '\', 00H, 'i', 00H, 'n'
	DB	00H, 'c', 00H, 'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H
	DB	'a', 00H, 't', 00H, 'l', 00H, 's', 00H, 'i', 00H, 'm', 00H, 'p'
	DB	00H, 's', 00H, 't', 00H, 'r', 00H, '.', 00H, 'h', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BM@GBBOFEAE@?$AA_?$AA_?$AAa?$AAt?$AAl?$AA_?$AAc?$AAo?$AAn?$AAd?$AAV?$AAa?$AAl@
CONST	SEGMENT
??_C@_1BM@GBBOFEAE@?$AA_?$AA_?$AAa?$AAt?$AAl?$AA_?$AAc?$AAo?$AAn?$AAd?$AAV?$AAa?$AAl@ DB '_'
	DB	00H, '_', 00H, 'a', 00H, 't', 00H, 'l', 00H, '_', 00H, 'c', 00H
	DB	'o', 00H, 'n', 00H, 'd', 00H, 'V', 00H, 'a', 00H, 'l', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@DFMKPFAK@?$AAA?$AAt?$AAl?$AAT?$AAh?$AAr?$AAo?$AAw?$AA?3?$AA?5?$AAh?$AAr?$AA?5?$AA?$DN?$AA?5@
CONST	SEGMENT
??_C@_1CK@DFMKPFAK@?$AAA?$AAt?$AAl?$AAT?$AAh?$AAr?$AAo?$AAw?$AA?3?$AA?5?$AAh?$AAr?$AA?5?$AA?$DN?$AA?5@ DB 'A'
	DB	00H, 't', 00H, 'l', 00H, 'T', 00H, 'h', 00H, 'r', 00H, 'o', 00H
	DB	'w', 00H, ':', 00H, ' ', 00H, 'h', 00H, 'r', 00H, ' ', 00H, '='
	DB	00H, ' ', 00H, '0', 00H, 'x', 00H, '%', 00H, 'x', 00H, 0aH, 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0GO@OMMACHMC@C?3?2Program?5Files?2Microsoft?5Visu@
CONST	SEGMENT
??_C@_0GO@OMMACHMC@C?3?2Program?5Files?2Microsoft?5Visu@ DB 'C:\Program F'
	DB	'iles\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14'
	DB	'.34.31933\atlmfc\include\atlexcept.h', 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??AtlThrowImpl@ATL@@YGXJ@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??AtlThrowImpl@ATL@@YGXJ@Z@4JA DD 041H	; `ATL::AtlThrowImpl'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1NK@OBLAMPEN@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1NK@OBLAMPEN@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H
	DB	'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' '
	DB	00H, 'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H
	DB	' ', 00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o'
	DB	00H, '\', 00H, '2', 00H, '0', 00H, '2', 00H, '2', 00H, '\', 00H
	DB	'E', 00H, 'n', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'p', 00H, 'r'
	DB	00H, 'i', 00H, 's', 00H, 'e', 00H, '\', 00H, 'V', 00H, 'C', 00H
	DB	'\', 00H, 'T', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\'
	DB	00H, 'M', 00H, 'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H
	DB	'4', 00H, '.', 00H, '3', 00H, '4', 00H, '.', 00H, '3', 00H, '1'
	DB	00H, '9', 00H, '3', 00H, '3', 00H, '\', 00H, 'a', 00H, 't', 00H
	DB	'l', 00H, 'm', 00H, 'f', 00H, 'c', 00H, '\', 00H, 'i', 00H, 'n'
	DB	00H, 'c', 00H, 'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H
	DB	'a', 00H, 't', 00H, 'l', 00H, 't', 00H, 'r', 00H, 'a', 00H, 'c'
	DB	00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1EO@EBPPKGOM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAT?$AAo?$AAo?$AA?5?$AAm@
CONST	SEGMENT
??_C@_1EO@EBPPKGOM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAT?$AAo?$AAo?$AA?5?$AAm@ DB 'f'
	DB	00H, 'a', 00H, 'l', 00H, 's', 00H, 'e', 00H, ' ', 00H, '&', 00H
	DB	'&', 00H, ' ', 00H, '"', 00H, 'T', 00H, 'o', 00H, 'o', 00H, ' '
	DB	00H, 'm', 00H, 'a', 00H, 'n', 00H, 'y', 00H, ' ', 00H, 'c', 00H
	DB	'a', 00H, 't', 00H, 'e', 00H, 'g', 00H, 'o', 00H, 'r', 00H, 'i'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, 'd', 00H, 'e', 00H, 'f', 00H
	DB	'i', 00H, 'n', 00H, 'e', 00H, 'd', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_17LGGGMOOB@?$AA?$CF?$AAh?$AAs@
CONST	SEGMENT
??_C@_17LGGGMOOB@?$AA?$CF?$AAh?$AAs@ DB '%', 00H, 'h', 00H, 's', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1O@OAIPCDPO@?$AA?$CF?$AAl?$AAs?$AA?$CF?$AAl?$AAs@
CONST	SEGMENT
??_C@_1O@OAIPCDPO@?$AA?$CF?$AAl?$AAs?$AA?$CF?$AAl?$AAs@ DB '%', 00H, 'l', 00H
	DB	's', 00H, '%', 00H, 'l', 00H, 's', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1M@PGKOAACE@?$AA?$CF?$AAu?$AA?5?$AA?9?$AA?5@
CONST	SEGMENT
??_C@_1M@PGKOAACE@?$AA?$CF?$AAu?$AA?5?$AA?9?$AA?5@ DB '%', 00H, 'u', 00H, ' '
	DB	00H, '-', 00H, ' ', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1O@LFNDFEBP@?$AA?$CF?$AAl?$AAs?$AA?5?$AA?9?$AA?5@
CONST	SEGMENT
??_C@_1O@LFNDFEBP@?$AA?$CF?$AAl?$AAs?$AA?5?$AA?9?$AA?5@ DB '%', 00H, 'l', 00H
	DB	's', 00H, ' ', 00H, '-', 00H, ' ', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?m_nCategory@CTrace@ATL@@1IA
_DATA	SEGMENT
?m_nCategory@CTrace@ATL@@1IA DD 0ffffffffH		; ATL::CTrace::m_nCategory
_DATA	ENDS
;	COMDAT ??_C@_1BO@GMLILNDJ@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg@
CONST	SEGMENT
??_C@_1BO@GMLILNDJ@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg@ DB 'a'
	DB	00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H, 'c', 00H
	DB	'e', 00H, 'S', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1CE@IMMADNAP@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAE?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi@
CONST	SEGMENT
??_C@_1CE@IMMADNAP@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAE?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi@ DB 'a'
	DB	00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H, 'c', 00H
	DB	'e', 00H, 'E', 00H, 'x', 00H, 'c', 00H, 'e', 00H, 'p', 00H, 't'
	DB	00H, 'i', 00H, 'o', 00H, 'n', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1NK@JCBLKNMO@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1NK@JCBLKNMO@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H
	DB	'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' '
	DB	00H, 'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H
	DB	' ', 00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o'
	DB	00H, '\', 00H, '2', 00H, '0', 00H, '2', 00H, '2', 00H, '\', 00H
	DB	'E', 00H, 'n', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'p', 00H, 'r'
	DB	00H, 'i', 00H, 's', 00H, 'e', 00H, '\', 00H, 'V', 00H, 'C', 00H
	DB	'\', 00H, 'T', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\'
	DB	00H, 'M', 00H, 'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H
	DB	'4', 00H, '.', 00H, '3', 00H, '4', 00H, '.', 00H, '3', 00H, '1'
	DB	00H, '9', 00H, '3', 00H, '3', 00H, '\', 00H, 'a', 00H, 't', 00H
	DB	'l', 00H, 'm', 00H, 'f', 00H, 'c', 00H, '\', 00H, 'i', 00H, 'n'
	DB	00H, 'c', 00H, 'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H
	DB	'a', 00H, 't', 00H, 'l', 00H, 'a', 00H, 'l', 00H, 'l', 00H, 'o'
	DB	00H, 'c', 00H, '.', 00H, 'h', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@
CONST	SEGMENT
??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@ DB '%', 00H, 'l', 00H, 's', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	022H
	DB	07aH
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	016H
	DB	023H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	030H
	DB	0cbH
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0Calcul_temps@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Calcul_temps@@QAE@XZ$0
__ehfuncinfo$??0Calcul_temps@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0Calcul_temps@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	016H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$CStringT@_WV?$StrTraitMFC@_WV?$ChTraitsCRT@_W@ATL@@@@@ATL@@QAE@PB_W@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$CStringT@_WV?$StrTraitMFC@_WV?$ChTraitsCRT@_W@ATL@@@@@ATL@@QAE@PB_W@Z$0
__ehfuncinfo$??0?$CStringT@_WV?$StrTraitMFC@_WV?$ChTraitsCRT@_W@ATL@@@@@ATL@@QAE@PB_W@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$CStringT@_WV?$StrTraitMFC@_WV?$ChTraitsCRT@_W@ATL@@@@@ATL@@QAE@PB_W@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	016H
	DB	023H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	02eH
	DB	0a5H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??RCTraceFileAndLineInfo@ATL@@QBAXHIPB_WZZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??RCTraceFileAndLineInfo@ATL@@QBAXHIPB_WZZ$0
__ehfuncinfo$??RCTraceFileAndLineInfo@ATL@@QBAXHIPB_WZZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??RCTraceFileAndLineInfo@ATL@@QBAXHIPB_WZZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	022H
	DB	06eH
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	016H
	DB	023H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	02eH
	DW	0157H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?TraceV@CTrace@ATL@@SAXPBDHIIPB_WPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?TraceV@CTrace@ATL@@SAXPBDHIIPB_WPAD@Z$0
__ehfuncinfo$?TraceV@CTrace@ATL@@SAXPBDHIIPB_WPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?TraceV@CTrace@ATL@@SAXPBDHIIPB_WPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	025H
	DW	0223H
voltbl	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?atlTraceString$initializer$@ATL@@3P6AXXZA DD FLAT:??__EatlTraceString@ATL@@YAXXZ ; ATL::atlTraceString$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
; File J:\work\SUDOKU\SUDOKU\SUDOKU\Calcul_temps.cpp
;	COMDAT ?Build@Calcul_temps@@AAE_KXZ
_TEXT	SEGMENT
_erreur$ = -48						; size = 4
_timebuffer$ = -36					; size = 16
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
?Build@Calcul_temps@@AAE_KXZ PROC			; Calcul_temps::Build, COMDAT
; _this$ = ecx

; 36   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec f4 00 00
	00		 sub	 esp, 244		; 000000f4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d cc	 lea	 edi, DWORD PTR [ebp-52]
  00010	6a 0d		 push	 13			; 0000000dH
  00012	59		 pop	 ecx
  00013	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00018	f3 ab		 rep stosd
  0001a	59		 pop	 ecx
  0001b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00020	33 c5		 xor	 eax, ebp
  00022	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00025	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET __B901A205_Calcul_temps@cpp
  0002d	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 37   : 
; 38   : 	struct _timeb timebuffer;
; 39   : 	errno_t erreur = 0;

  00032	83 65 d0 00	 and	 DWORD PTR _erreur$[ebp], 0

; 40   : 	 
; 41   : 	erreur = _ftime_s(&timebuffer);

  00036	8d 45 dc	 lea	 eax, DWORD PTR _timebuffer$[ebp]
  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 __ftime64_s
  0003f	59		 pop	 ecx
  00040	89 45 d0	 mov	 DWORD PTR _erreur$[ebp], eax

; 42   : 	return (uint64_t)(((timebuffer.time * 1000) + timebuffer.millitm));

  00043	6a 00		 push	 0
  00045	68 e8 03 00 00	 push	 1000			; 000003e8H
  0004a	ff 75 e0	 push	 DWORD PTR _timebuffer$[ebp+4]
  0004d	ff 75 dc	 push	 DWORD PTR _timebuffer$[ebp]
  00050	e8 00 00 00 00	 call	 __allmul
  00055	8b c8		 mov	 ecx, eax
  00057	8b f2		 mov	 esi, edx
  00059	0f b7 45 e4	 movzx	 eax, WORD PTR _timebuffer$[ebp+8]
  0005d	99		 cdq
  0005e	03 c8		 add	 ecx, eax
  00060	13 f2		 adc	 esi, edx
  00062	8b c1		 mov	 eax, ecx
  00064	8b d6		 mov	 edx, esi

; 43   : 
; 44   : }

  00066	52		 push	 edx
  00067	8b cd		 mov	 ecx, ebp
  00069	50		 push	 eax
  0006a	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@Build
  00070	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00075	58		 pop	 eax
  00076	5a		 pop	 edx
  00077	5f		 pop	 edi
  00078	5e		 pop	 esi
  00079	5b		 pop	 ebx
  0007a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0007d	33 cd		 xor	 ecx, ebp
  0007f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00084	81 c4 f4 00 00
	00		 add	 esp, 244		; 000000f4H
  0008a	3b ec		 cmp	 ebp, esp
  0008c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00091	c9		 leave
  00092	c3		 ret	 0
  00093	90		 npad	 1
$LN5@Build:
  00094	01 00 00 00	 DD	 1
  00098	00 00 00 00	 DD	 $LN4@Build
$LN4@Build:
  0009c	dc ff ff ff	 DD	 -36			; ffffffdcH
  000a0	10 00 00 00	 DD	 16			; 00000010H
  000a4	00 00 00 00	 DD	 $LN3@Build
$LN3@Build:
  000a8	74		 DB	 116			; 00000074H
  000a9	69		 DB	 105			; 00000069H
  000aa	6d		 DB	 109			; 0000006dH
  000ab	65		 DB	 101			; 00000065H
  000ac	62		 DB	 98			; 00000062H
  000ad	75		 DB	 117			; 00000075H
  000ae	66		 DB	 102			; 00000066H
  000af	66		 DB	 102			; 00000066H
  000b0	65		 DB	 101			; 00000065H
  000b1	72		 DB	 114			; 00000072H
  000b2	00		 DB	 0
?Build@Calcul_temps@@AAE_KXZ ENDP			; Calcul_temps::Build
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
; File J:\work\SUDOKU\SUDOKU\SUDOKU\Calcul_temps.cpp
;	COMDAT ?Read_time@Calcul_temps@@QAE_KXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?Read_time@Calcul_temps@@QAE_KXZ PROC			; Calcul_temps::Read_time, COMDAT
; _this$ = ecx

; 31   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	6a 03		 push	 3
  00012	59		 pop	 ecx
  00013	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00018	f3 ab		 rep stosd
  0001a	59		 pop	 ecx
  0001b	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __B901A205_Calcul_temps@cpp
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 32   : 	return (Stop - Start);

  00028	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00031	2b 11		 sub	 edx, DWORD PTR [ecx]
  00033	8b 70 0c	 mov	 esi, DWORD PTR [eax+12]
  00036	1b 71 04	 sbb	 esi, DWORD PTR [ecx+4]
  00039	8b c2		 mov	 eax, edx
  0003b	8b d6		 mov	 edx, esi

; 33   : }

  0003d	5f		 pop	 edi
  0003e	5e		 pop	 esi
  0003f	5b		 pop	 ebx
  00040	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00046	3b ec		 cmp	 ebp, esp
  00048	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004d	c9		 leave
  0004e	c3		 ret	 0
?Read_time@Calcul_temps@@QAE_KXZ ENDP			; Calcul_temps::Read_time
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
; File J:\work\SUDOKU\SUDOKU\SUDOKU\Calcul_temps.cpp
;	COMDAT ?Stop_time@Calcul_temps@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?Stop_time@Calcul_temps@@QAEXXZ PROC			; Calcul_temps::Stop_time, COMDAT
; _this$ = ecx

; 26   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	6a 03		 push	 3
  00012	59		 pop	 ecx
  00013	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00018	f3 ab		 rep stosd
  0001a	59		 pop	 ecx
  0001b	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __B901A205_Calcul_temps@cpp
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 27   : 	Stop =  Build();

  00028	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002b	e8 00 00 00 00	 call	 ?Build@Calcul_temps@@AAE_KXZ ; Calcul_temps::Build
  00030	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00033	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  00036	89 51 0c	 mov	 DWORD PTR [ecx+12], edx

; 28   : }

  00039	5f		 pop	 edi
  0003a	5e		 pop	 esi
  0003b	5b		 pop	 ebx
  0003c	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00042	3b ec		 cmp	 ebp, esp
  00044	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00049	c9		 leave
  0004a	c3		 ret	 0
?Stop_time@Calcul_temps@@QAEXXZ ENDP			; Calcul_temps::Stop_time
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
; File J:\work\SUDOKU\SUDOKU\SUDOKU\Calcul_temps.cpp
;	COMDAT ?Start_time@Calcul_temps@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?Start_time@Calcul_temps@@QAEXXZ PROC			; Calcul_temps::Start_time, COMDAT
; _this$ = ecx

; 21   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	6a 03		 push	 3
  00012	59		 pop	 ecx
  00013	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00018	f3 ab		 rep stosd
  0001a	59		 pop	 ecx
  0001b	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __B901A205_Calcul_temps@cpp
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 22   : 	Start = Build();

  00028	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002b	e8 00 00 00 00	 call	 ?Build@Calcul_temps@@AAE_KXZ ; Calcul_temps::Build
  00030	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00033	89 01		 mov	 DWORD PTR [ecx], eax
  00035	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 23   : }

  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	c9		 leave
  00049	c3		 ret	 0
?Start_time@Calcul_temps@@QAEXXZ ENDP			; Calcul_temps::Start_time
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
; File J:\work\SUDOKU\SUDOKU\SUDOKU\Calcul_temps.cpp
;	COMDAT ??1Calcul_temps@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1Calcul_temps@@QAE@XZ PROC				; Calcul_temps::~Calcul_temps, COMDAT
; _this$ = ecx

; 47   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	6a 03		 push	 3
  00012	59		 pop	 ecx
  00013	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00018	f3 ab		 rep stosd
  0001a	59		 pop	 ecx
  0001b	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __B901A205_Calcul_temps@cpp
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 48   : 
; 49   : }

  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
  0002a	5b		 pop	 ebx
  0002b	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00031	3b ec		 cmp	 ebp, esp
  00033	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00038	c9		 leave
  00039	c3		 ret	 0
??1Calcul_temps@@QAE@XZ ENDP				; Calcul_temps::~Calcul_temps
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
; File J:\work\SUDOKU\SUDOKU\SUDOKU\Calcul_temps.cpp
;	COMDAT ??0Calcul_temps@@QAE@XZ
_TEXT	SEGMENT
_File_Source$ = -48					; size = 4
_Ref$ = -36						; size = 4
_this$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
??0Calcul_temps@@QAE@XZ PROC				; Calcul_temps::Calcul_temps, COMDAT
; _this$ = ecx

; 13   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0Calcul_temps@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec e8 00 00
	00		 sub	 esp, 232		; 000000e8H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d 7d cc	 lea	 edi, DWORD PTR [ebp-52]
  0001e	6a 0a		 push	 10			; 0000000aH
  00020	59		 pop	 ecx
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	59		 pop	 ecx
  00029	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002e	33 c5		 xor	 eax, ebp
  00030	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00033	50		 push	 eax
  00034	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00037	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003d	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx
  00040	b9 00 00 00 00	 mov	 ecx, OFFSET __B901A205_Calcul_temps@cpp
  00045	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 14   : 
; 15   : 	Start = Stop = 0;

  0004a	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  0004d	33 c9		 xor	 ecx, ecx
  0004f	33 d2		 xor	 edx, edx
  00051	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00054	89 50 0c	 mov	 DWORD PTR [eax+12], edx
  00057	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  0005a	33 c9		 xor	 ecx, ecx
  0005c	33 d2		 xor	 edx, edx
  0005e	89 08		 mov	 DWORD PTR [eax], ecx
  00060	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 16   : 	CString Ref = _T("Compiled on ") __DATE__ " at " __TIME__;

  00063	6a 04		 push	 4
  00065	8d 4d dc	 lea	 ecx, DWORD PTR _Ref$[ebp]
  00068	e8 00 00 00 00	 call	 ?__autoclassinit2@?$CStringT@_WV?$StrTraitMFC@_WV?$ChTraitsCRT@_W@ATL@@@@@ATL@@QAEXI@Z
  0006d	68 00 00 00 00	 push	 OFFSET ??_C@_1EI@GDOFIOFO@?$AAC?$AAo?$AAm?$AAp?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAo?$AAn?$AA?5?$AAD?$AAe?$AAc@
  00072	8d 4d dc	 lea	 ecx, DWORD PTR _Ref$[ebp]
  00075	e8 00 00 00 00	 call	 ??0?$CStringT@_WV?$StrTraitMFC@_WV?$ChTraitsCRT@_W@ATL@@@@@ATL@@QAE@PB_W@Z ; ATL::CStringT<wchar_t,StrTraitMFC<wchar_t,ATL::ChTraitsCRT<wchar_t> > >::CStringT<wchar_t,StrTraitMFC<wchar_t,ATL::ChTraitsCRT<wchar_t> > >
  0007a	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 17   : 	CString File_Source = _T("File: ") __FILE__;

  0007e	6a 04		 push	 4
  00080	8d 4d d0	 lea	 ecx, DWORD PTR _File_Source$[ebp]
  00083	e8 00 00 00 00	 call	 ?__autoclassinit2@?$CStringT@_WV?$StrTraitMFC@_WV?$ChTraitsCRT@_W@ATL@@@@@ATL@@QAEXI@Z
  00088	68 00 00 00 00	 push	 OFFSET ??_C@_1GI@IPEJAOBG@?$AAF?$AAi?$AAl?$AAe?$AA?3?$AA?5?$AAJ?$AA?3?$AA?2?$AAw?$AAo?$AAr?$AAk?$AA?2?$AAS@
  0008d	8d 4d d0	 lea	 ecx, DWORD PTR _File_Source$[ebp]
  00090	e8 00 00 00 00	 call	 ??0?$CStringT@_WV?$StrTraitMFC@_WV?$ChTraitsCRT@_W@ATL@@@@@ATL@@QAE@PB_W@Z ; ATL::CStringT<wchar_t,StrTraitMFC<wchar_t,ATL::ChTraitsCRT<wchar_t> > >::CStringT<wchar_t,StrTraitMFC<wchar_t,ATL::ChTraitsCRT<wchar_t> > >

; 18   : }

  00095	8d 4d d0	 lea	 ecx, DWORD PTR _File_Source$[ebp]
  00098	e8 00 00 00 00	 call	 ??1?$CStringT@_WV?$StrTraitMFC@_WV?$ChTraitsCRT@_W@ATL@@@@@ATL@@QAE@XZ ; ATL::CStringT<wchar_t,StrTraitMFC<wchar_t,ATL::ChTraitsCRT<wchar_t> > >::~CStringT<wchar_t,StrTraitMFC<wchar_t,ATL::ChTraitsCRT<wchar_t> > >
  0009d	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  000a1	8d 4d dc	 lea	 ecx, DWORD PTR _Ref$[ebp]
  000a4	e8 00 00 00 00	 call	 ??1?$CStringT@_WV?$StrTraitMFC@_WV?$ChTraitsCRT@_W@ATL@@@@@ATL@@QAE@XZ ; ATL::CStringT<wchar_t,StrTraitMFC<wchar_t,ATL::ChTraitsCRT<wchar_t> > >::~CStringT<wchar_t,StrTraitMFC<wchar_t,ATL::ChTraitsCRT<wchar_t> > >
  000a9	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  000ac	52		 push	 edx
  000ad	8b cd		 mov	 ecx, ebp
  000af	50		 push	 eax
  000b0	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN9@Calcul_tem
  000b6	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000bb	58		 pop	 eax
  000bc	5a		 pop	 edx
  000bd	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c0	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000c7	59		 pop	 ecx
  000c8	5f		 pop	 edi
  000c9	5e		 pop	 esi
  000ca	5b		 pop	 ebx
  000cb	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ce	33 cd		 xor	 ecx, ebp
  000d0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d5	81 c4 f4 00 00
	00		 add	 esp, 244		; 000000f4H
  000db	3b ec		 cmp	 ebp, esp
  000dd	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000e2	c9		 leave
  000e3	c3		 ret	 0
$LN9@Calcul_tem:
  000e4	02 00 00 00	 DD	 2
  000e8	00 00 00 00	 DD	 $LN8@Calcul_tem
$LN8@Calcul_tem:
  000ec	dc ff ff ff	 DD	 -36			; ffffffdcH
  000f0	04 00 00 00	 DD	 4
  000f4	00 00 00 00	 DD	 $LN5@Calcul_tem
  000f8	d0 ff ff ff	 DD	 -48			; ffffffd0H
  000fc	04 00 00 00	 DD	 4
  00100	00 00 00 00	 DD	 $LN6@Calcul_tem
$LN6@Calcul_tem:
  00104	46		 DB	 70			; 00000046H
  00105	69		 DB	 105			; 00000069H
  00106	6c		 DB	 108			; 0000006cH
  00107	65		 DB	 101			; 00000065H
  00108	5f		 DB	 95			; 0000005fH
  00109	53		 DB	 83			; 00000053H
  0010a	6f		 DB	 111			; 0000006fH
  0010b	75		 DB	 117			; 00000075H
  0010c	72		 DB	 114			; 00000072H
  0010d	63		 DB	 99			; 00000063H
  0010e	65		 DB	 101			; 00000065H
  0010f	00		 DB	 0
$LN5@Calcul_tem:
  00110	52		 DB	 82			; 00000052H
  00111	65		 DB	 101			; 00000065H
  00112	66		 DB	 102			; 00000066H
  00113	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0Calcul_temps@@QAE@XZ$0:
  00000	8d 4d dc	 lea	 ecx, DWORD PTR _Ref$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$CStringT@_WV?$StrTraitMFC@_WV?$ChTraitsCRT@_W@ATL@@@@@ATL@@QAE@XZ ; ATL::CStringT<wchar_t,StrTraitMFC<wchar_t,ATL::ChTraitsCRT<wchar_t> > >::~CStringT<wchar_t,StrTraitMFC<wchar_t,ATL::ChTraitsCRT<wchar_t> > >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??0Calcul_temps@@QAE@XZ:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 8a 08 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-248]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00026	33 c8		 xor	 ecx, eax
  00028	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0Calcul_temps@@QAE@XZ
  00032	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0Calcul_temps@@QAE@XZ ENDP				; Calcul_temps::Calcul_temps
; Function compile flags: /Odsp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.34.31933\atlmfc\include\afxstr.h
;	COMDAT ?GetDefaultManager@?$StrTraitMFC@_WV?$ChTraitsCRT@_W@ATL@@@@SAPAUIAtlStringMgr@ATL@@XZ
_TEXT	SEGMENT
?GetDefaultManager@?$StrTraitMFC@_WV?$ChTraitsCRT@_W@ATL@@@@SAPAUIAtlStringMgr@ATL@@XZ PROC ; StrTraitMFC<wchar_t,ATL::ChTraitsCRT<wchar_t> >::GetDefaultManager, COMDAT

; 51   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __5DCF1DCC_afxstr@h
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 52   : 		return( AfxGetStringManager() );

  00021	e8 00 00 00 00	 call	 ?AfxGetStringManager@@YGPAUIAtlStringMgr@ATL@@XZ ; AfxGetStringManager

; 53   : 	}

  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	5b		 pop	 ebx
  00029	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0002f	3b ec		 cmp	 ebp, esp
  00031	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00036	c9		 leave
  00037	c3		 ret	 0
?GetDefaultManager@?$StrTraitMFC@_WV?$ChTraitsCRT@_W@ATL@@@@SAPAUIAtlStringMgr@ATL@@XZ ENDP ; StrTraitMFC<wchar_t,ATL::ChTraitsCRT<wchar_t> >::GetDefaultManager
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.34.31933\atlmfc\include\afxstr.h
;	COMDAT ?FindStringResourceInstance@?$StrTraitMFC@_WV?$ChTraitsCRT@_W@ATL@@@@SAPAUHINSTANCE__@@I@Z
_TEXT	SEGMENT
_nID$ = 8						; size = 4
?FindStringResourceInstance@?$StrTraitMFC@_WV?$ChTraitsCRT@_W@ATL@@@@SAPAUHINSTANCE__@@I@Z PROC ; StrTraitMFC<wchar_t,ATL::ChTraitsCRT<wchar_t> >::FindStringResourceInstance, COMDAT

; 46   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __5DCF1DCC_afxstr@h
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 47   : 		return( AfxFindStringResourceHandle( nID ) );

  00021	ff 75 08	 push	 DWORD PTR _nID$[ebp]
  00024	e8 00 00 00 00	 call	 ?AfxFindStringResourceHandle@@YGPAUHINSTANCE__@@I@Z ; AfxFindStringResourceHandle

; 48   : 	}

  00029	5f		 pop	 edi
  0002a	5e		 pop	 esi
  0002b	5b		 pop	 ebx
  0002c	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	c9		 leave
  0003a	c3		 ret	 0
?FindStringResourceInstance@?$StrTraitMFC@_WV?$ChTraitsCRT@_W@ATL@@@@SAPAUHINSTANCE__@@I@Z ENDP ; StrTraitMFC<wchar_t,ATL::ChTraitsCRT<wchar_t> >::FindStringResourceInstance
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
;	COMDAT ?__autoclassinit2@?$CStringT@_WV?$StrTraitMFC@_WV?$ChTraitsCRT@_W@ATL@@@@@ATL@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_classSize$ = 8						; size = 4
?__autoclassinit2@?$CStringT@_WV?$StrTraitMFC@_WV?$ChTraitsCRT@_W@ATL@@@@@ATL@@QAEXI@Z PROC ; ATL::CStringT<wchar_t,StrTraitMFC<wchar_t,ATL::ChTraitsCRT<wchar_t> > >::__autoclassinit2, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	6a 03		 push	 3
  00012	59		 pop	 ecx
  00013	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00018	f3 ab		 rep stosd
  0001a	59		 pop	 ecx
  0001b	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  0001e	ff 75 08	 push	 DWORD PTR _classSize$[ebp]
  00021	6a 00		 push	 0
  00023	ff 75 f8	 push	 DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 _memset
  0002b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	5b		 pop	 ebx
  00031	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00037	3b ec		 cmp	 ebp, esp
  00039	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003e	c9		 leave
  0003f	c2 04 00	 ret	 4
?__autoclassinit2@?$CStringT@_WV?$StrTraitMFC@_WV?$ChTraitsCRT@_W@ATL@@@@@ATL@@QAEXI@Z ENDP ; ATL::CStringT<wchar_t,StrTraitMFC<wchar_t,ATL::ChTraitsCRT<wchar_t> > >::__autoclassinit2
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.34.31933\atlmfc\include\cstringt.h
;	COMDAT ?CheckImplicitLoad@?$CStringT@_WV?$StrTraitMFC@_WV?$ChTraitsCRT@_W@ATL@@@@@ATL@@AAE_NPBX@Z
_TEXT	SEGMENT
$T1 = -240						; size = 8
_nID$2 = -32						; size = 4
_bRet$ = -17						; size = 1
_this$ = -8						; size = 4
_pv$ = 8						; size = 4
?CheckImplicitLoad@?$CStringT@_WV?$StrTraitMFC@_WV?$ChTraitsCRT@_W@ATL@@@@@ATL@@AAE_NPBX@Z PROC ; ATL::CStringT<wchar_t,StrTraitMFC<wchar_t,ATL::ChTraitsCRT<wchar_t> > >::CheckImplicitLoad, COMDAT
; _this$ = ecx

; 2705 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec f4 00 00
	00		 sub	 esp, 244		; 000000f4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d cc	 lea	 edi, DWORD PTR [ebp-52]
  00010	6a 0d		 push	 13			; 0000000dH
  00012	59		 pop	 ecx
  00013	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00018	f3 ab		 rep stosd
  0001a	59		 pop	 ecx
  0001b	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __B625A68F_cstringt@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 2706 : 		bool bRet = false;

  00028	c6 45 ef 00	 mov	 BYTE PTR _bRet$[ebp], 0

; 2707 : 
; 2708 : 		if( (pv != NULL) && IS_INTRESOURCE( pv ) )

  0002c	83 7d 08 00	 cmp	 DWORD PTR _pv$[ebp], 0
  00030	74 5e		 je	 SHORT $LN2@CheckImpli
  00032	8b 45 08	 mov	 eax, DWORD PTR _pv$[ebp]
  00035	c1 e8 10	 shr	 eax, 16			; 00000010H
  00038	85 c0		 test	 eax, eax
  0003a	75 54		 jne	 SHORT $LN2@CheckImpli

; 2709 : 		{
; 2710 : 			UINT nID = LOWORD( reinterpret_cast< DWORD_PTR >( pv ) );

  0003c	8b 45 08	 mov	 eax, DWORD PTR _pv$[ebp]
  0003f	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00044	0f b7 c0	 movzx	 eax, ax
  00047	89 45 e0	 mov	 DWORD PTR _nID$2[ebp], eax

; 2711 : 			(nID);
; 2712 : #ifdef _ATL_USE_WINAPI_FAMILY_DESKTOP_APP
; 2713 : 			if( !LoadString( nID ) )

  0004a	ff 75 e0	 push	 DWORD PTR _nID$2[ebp]
  0004d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00050	e8 00 00 00 00	 call	 ?LoadStringW@?$CStringT@_WV?$StrTraitMFC@_WV?$ChTraitsCRT@_W@ATL@@@@@ATL@@QAEHI@Z ; ATL::CStringT<wchar_t,StrTraitMFC<wchar_t,ATL::ChTraitsCRT<wchar_t> > >::LoadStringW
  00055	85 c0		 test	 eax, eax
  00057	75 33		 jne	 SHORT $LN3@CheckImpli

; 2714 : 			{
; 2715 : 				ATLTRACE( atlTraceString, 2, _T( "Warning: implicit LoadString(%u) failed\n" ), nID );

  00059	ff 75 e0	 push	 DWORD PTR _nID$2[ebp]
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_1FC@BMOLDHIO@?$AAW?$AAa?$AAr?$AAn?$AAi?$AAn?$AAg?$AA?3?$AA?5?$AAi?$AAm?$AAp?$AAl?$AAi?$AAc@
  00061	6a 02		 push	 2
  00063	b9 00 00 00 00	 mov	 ecx, OFFSET ?atlTraceString@ATL@@3V?$CTraceCategoryEx@$0CAAAA@$0A@@1@A ; ATL::atlTraceString
  00068	e8 00 00 00 00	 call	 ??B?$CTraceCategoryEx@$0CAAAA@$0A@@ATL@@QAEIXZ ; ATL::CTraceCategoryEx<131072,0>::operator unsigned int
  0006d	50		 push	 eax
  0006e	68 9b 0a 00 00	 push	 2715			; 00000a9bH
  00073	68 00 00 00 00	 push	 OFFSET ??_C@_0GN@HEPHHEDO@C?3?2Program?5Files?2Microsoft?5Visu@
  00078	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR $T1[ebp]
  0007e	e8 00 00 00 00	 call	 ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
  00083	50		 push	 eax
  00084	e8 00 00 00 00	 call	 ??RCTraceFileAndLineInfo@ATL@@QBAXHIPB_WZZ ; ATL::CTraceFileAndLineInfo::operator()
  00089	83 c4 14	 add	 esp, 20			; 00000014H
$LN3@CheckImpli:

; 2716 : 			}
; 2717 : 			bRet = true;

  0008c	c6 45 ef 01	 mov	 BYTE PTR _bRet$[ebp], 1
$LN2@CheckImpli:

; 2718 : #else
; 2719 : 			ATLTRACE( atlTraceString, 2, _T( "Warning: LoadString(%u) not supported under the current WINAPI_FAMILY.\n" ), nID );
; 2720 : #endif
; 2721 : 		}
; 2722 : 
; 2723 : 		return( bRet );

  00090	8a 45 ef	 mov	 al, BYTE PTR _bRet$[ebp]

; 2724 : 	}

  00093	5f		 pop	 edi
  00094	5e		 pop	 esi
  00095	5b		 pop	 ebx
  00096	81 c4 f4 00 00
	00		 add	 esp, 244		; 000000f4H
  0009c	3b ec		 cmp	 ebp, esp
  0009e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a3	c9		 leave
  000a4	c2 04 00	 ret	 4
?CheckImplicitLoad@?$CStringT@_WV?$StrTraitMFC@_WV?$ChTraitsCRT@_W@ATL@@@@@ATL@@AAE_NPBX@Z ENDP ; ATL::CStringT<wchar_t,StrTraitMFC<wchar_t,ATL::ChTraitsCRT<wchar_t> > >::CheckImplicitLoad
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.34.31933\atlmfc\include\cstringt.h
;	COMDAT ?LoadStringW@?$CStringT@_WV?$StrTraitMFC@_WV?$ChTraitsCRT@_W@ATL@@@@@ATL@@QAEHPAUHINSTANCE__@@I@Z
_TEXT	SEGMENT
_pszBuffer$ = -44					; size = 4
_nLength$ = -32						; size = 4
_pImage$ = -20						; size = 4
_this$ = -8						; size = 4
_hInstance$ = 8						; size = 4
_nID$ = 12						; size = 4
?LoadStringW@?$CStringT@_WV?$StrTraitMFC@_WV?$ChTraitsCRT@_W@ATL@@@@@ATL@@QAEHPAUHINSTANCE__@@I@Z PROC ; ATL::CStringT<wchar_t,StrTraitMFC<wchar_t,ATL::ChTraitsCRT<wchar_t> > >::LoadStringW, COMDAT
; _this$ = ecx

; 2350 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec f0 00 00
	00		 sub	 esp, 240		; 000000f0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d d0	 lea	 edi, DWORD PTR [ebp-48]
  00010	6a 0c		 push	 12			; 0000000cH
  00012	59		 pop	 ecx
  00013	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00018	f3 ab		 rep stosd
  0001a	59		 pop	 ecx
  0001b	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __B625A68F_cstringt@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 2351 : 		const ATLSTRINGRESOURCEIMAGE* pImage = AtlGetStringResourceImage( hInstance, nID );

  00028	ff 75 0c	 push	 DWORD PTR _nID$[ebp]
  0002b	ff 75 08	 push	 DWORD PTR _hInstance$[ebp]
  0002e	e8 00 00 00 00	 call	 ?AtlGetStringResourceImage@ATL@@YAPBUATLSTRINGRESOURCEIMAGE@1@PAUHINSTANCE__@@I@Z ; ATL::AtlGetStringResourceImage
  00033	59		 pop	 ecx
  00034	59		 pop	 ecx
  00035	89 45 ec	 mov	 DWORD PTR _pImage$[ebp], eax

; 2352 : 		if( pImage == NULL )

  00038	83 7d ec 00	 cmp	 DWORD PTR _pImage$[ebp], 0
  0003c	75 04		 jne	 SHORT $LN2@LoadString

; 2353 : 		{
; 2354 : 			return( FALSE );

  0003e	33 c0		 xor	 eax, eax
  00040	eb 4e		 jmp	 SHORT $LN1@LoadString
$LN2@LoadString:

; 2355 : 		}
; 2356 : 
; 2357 : 		int nLength = StringTraits::GetBaseTypeLength( pImage->achString, pImage->nLength );

  00042	8b 45 ec	 mov	 eax, DWORD PTR _pImage$[ebp]
  00045	0f b7 00	 movzx	 eax, WORD PTR [eax]
  00048	50		 push	 eax
  00049	8b 45 ec	 mov	 eax, DWORD PTR _pImage$[ebp]
  0004c	40		 inc	 eax
  0004d	40		 inc	 eax
  0004e	50		 push	 eax
  0004f	e8 00 00 00 00	 call	 ?GetBaseTypeLength@?$ChTraitsCRT@_W@ATL@@SAHPB_WH@Z ; ATL::ChTraitsCRT<wchar_t>::GetBaseTypeLength
  00054	59		 pop	 ecx
  00055	59		 pop	 ecx
  00056	89 45 e0	 mov	 DWORD PTR _nLength$[ebp], eax

; 2358 : 		PXSTR pszBuffer = this->GetBuffer( nLength );

  00059	ff 75 e0	 push	 DWORD PTR _nLength$[ebp]
  0005c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0005f	e8 00 00 00 00	 call	 ?GetBuffer@?$CSimpleStringT@_W$0A@@ATL@@QAEPA_WH@Z ; ATL::CSimpleStringT<wchar_t,0>::GetBuffer
  00064	89 45 d4	 mov	 DWORD PTR _pszBuffer$[ebp], eax

; 2359 : 		StringTraits::ConvertToBaseType( pszBuffer, nLength, pImage->achString, pImage->nLength );

  00067	8b 45 ec	 mov	 eax, DWORD PTR _pImage$[ebp]
  0006a	0f b7 00	 movzx	 eax, WORD PTR [eax]
  0006d	50		 push	 eax
  0006e	8b 45 ec	 mov	 eax, DWORD PTR _pImage$[ebp]
  00071	40		 inc	 eax
  00072	40		 inc	 eax
  00073	50		 push	 eax
  00074	ff 75 e0	 push	 DWORD PTR _nLength$[ebp]
  00077	ff 75 d4	 push	 DWORD PTR _pszBuffer$[ebp]
  0007a	e8 00 00 00 00	 call	 ?ConvertToBaseType@?$ChTraitsCRT@_W@ATL@@SAXPA_WHPB_WH@Z ; ATL::ChTraitsCRT<wchar_t>::ConvertToBaseType
  0007f	83 c4 10	 add	 esp, 16			; 00000010H

; 2360 : 		this->ReleaseBufferSetLength( nLength );

  00082	ff 75 e0	 push	 DWORD PTR _nLength$[ebp]
  00085	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00088	e8 00 00 00 00	 call	 ?ReleaseBufferSetLength@?$CSimpleStringT@_W$0A@@ATL@@QAEXH@Z ; ATL::CSimpleStringT<wchar_t,0>::ReleaseBufferSetLength

; 2361 : 
; 2362 : 		return( TRUE );

  0008d	33 c0		 xor	 eax, eax
  0008f	40		 inc	 eax
$LN1@LoadString:

; 2363 : 	}

  00090	5f		 pop	 edi
  00091	5e		 pop	 esi
  00092	5b		 pop	 ebx
  00093	81 c4 f0 00 00
	00		 add	 esp, 240		; 000000f0H
  00099	3b ec		 cmp	 ebp, esp
  0009b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a0	c9		 leave
  000a1	c2 08 00	 ret	 8
?LoadStringW@?$CStringT@_WV?$StrTraitMFC@_WV?$ChTraitsCRT@_W@ATL@@@@@ATL@@QAEHPAUHINSTANCE__@@I@Z ENDP ; ATL::CStringT<wchar_t,StrTraitMFC<wchar_t,ATL::ChTraitsCRT<wchar_t> > >::LoadStringW
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.34.31933\atlmfc\include\cstringt.h
;	COMDAT ?LoadStringW@?$CStringT@_WV?$StrTraitMFC@_WV?$ChTraitsCRT@_W@ATL@@@@@ATL@@QAEHI@Z
_TEXT	SEGMENT
_hInstance$ = -20					; size = 4
_this$ = -8						; size = 4
_nID$ = 8						; size = 4
?LoadStringW@?$CStringT@_WV?$StrTraitMFC@_WV?$ChTraitsCRT@_W@ATL@@@@@ATL@@QAEHI@Z PROC ; ATL::CStringT<wchar_t,StrTraitMFC<wchar_t,ATL::ChTraitsCRT<wchar_t> > >::LoadStringW, COMDAT
; _this$ = ecx

; 2336 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d e8	 lea	 edi, DWORD PTR [ebp-24]
  00010	6a 06		 push	 6
  00012	59		 pop	 ecx
  00013	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00018	f3 ab		 rep stosd
  0001a	59		 pop	 ecx
  0001b	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __B625A68F_cstringt@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 2337 : 		HINSTANCE hInstance = StringTraits::FindStringResourceInstance( nID );

  00028	ff 75 08	 push	 DWORD PTR _nID$[ebp]
  0002b	e8 00 00 00 00	 call	 ?FindStringResourceInstance@?$StrTraitMFC@_WV?$ChTraitsCRT@_W@ATL@@@@SAPAUHINSTANCE__@@I@Z ; StrTraitMFC<wchar_t,ATL::ChTraitsCRT<wchar_t> >::FindStringResourceInstance
  00030	59		 pop	 ecx
  00031	89 45 ec	 mov	 DWORD PTR _hInstance$[ebp], eax

; 2338 : 		if( hInstance == NULL )

  00034	83 7d ec 00	 cmp	 DWORD PTR _hInstance$[ebp], 0
  00038	75 04		 jne	 SHORT $LN2@LoadString

; 2339 : 		{
; 2340 : 			return( FALSE );

  0003a	33 c0		 xor	 eax, eax
  0003c	eb 0e		 jmp	 SHORT $LN1@LoadString
$LN2@LoadString:

; 2341 : 		}
; 2342 : 
; 2343 : 		return( LoadString( hInstance, nID ) );

  0003e	ff 75 08	 push	 DWORD PTR _nID$[ebp]
  00041	ff 75 ec	 push	 DWORD PTR _hInstance$[ebp]
  00044	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00047	e8 00 00 00 00	 call	 ?LoadStringW@?$CStringT@_WV?$StrTraitMFC@_WV?$ChTraitsCRT@_W@ATL@@@@@ATL@@QAEHPAUHINSTANCE__@@I@Z ; ATL::CStringT<wchar_t,StrTraitMFC<wchar_t,ATL::ChTraitsCRT<wchar_t> > >::LoadStringW
$LN1@LoadString:

; 2344 : 	}

  0004c	5f		 pop	 edi
  0004d	5e		 pop	 esi
  0004e	5b		 pop	 ebx
  0004f	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00055	3b ec		 cmp	 ebp, esp
  00057	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005c	c9		 leave
  0005d	c2 04 00	 ret	 4
?LoadStringW@?$CStringT@_WV?$StrTraitMFC@_WV?$ChTraitsCRT@_W@ATL@@@@@ATL@@QAEHI@Z ENDP ; ATL::CStringT<wchar_t,StrTraitMFC<wchar_t,ATL::ChTraitsCRT<wchar_t> > >::LoadStringW
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.34.31933\atlmfc\include\cstringt.h
;	COMDAT ??4?$CStringT@_WV?$StrTraitMFC@_WV?$ChTraitsCRT@_W@ATL@@@@@ATL@@QAEAAV01@PB_W@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pszSrc$ = 8						; size = 4
??4?$CStringT@_WV?$StrTraitMFC@_WV?$ChTraitsCRT@_W@ATL@@@@@ATL@@QAEAAV01@PB_W@Z PROC ; ATL::CStringT<wchar_t,StrTraitMFC<wchar_t,ATL::ChTraitsCRT<wchar_t> > >::operator=, COMDAT
; _this$ = ecx

; 1318 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	6a 03		 push	 3
  00012	59		 pop	 ecx
  00013	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00018	f3 ab		 rep stosd
  0001a	59		 pop	 ecx
  0001b	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __B625A68F_cstringt@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1319 : 		CThisSimpleString::operator=( pszSrc );

  00028	ff 75 08	 push	 DWORD PTR _pszSrc$[ebp]
  0002b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	e8 00 00 00 00	 call	 ??4?$CSimpleStringT@_W$0A@@ATL@@QAEAAV01@PB_W@Z ; ATL::CSimpleStringT<wchar_t,0>::operator=

; 1320 : 
; 1321 : 		return( *this );

  00033	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]

; 1322 : 	}

  00036	5f		 pop	 edi
  00037	5e		 pop	 esi
  00038	5b		 pop	 ebx
  00039	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003f	3b ec		 cmp	 ebp, esp
  00041	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00046	c9		 leave
  00047	c2 04 00	 ret	 4
??4?$CStringT@_WV?$StrTraitMFC@_WV?$ChTraitsCRT@_W@ATL@@@@@ATL@@QAEAAV01@PB_W@Z ENDP ; ATL::CStringT<wchar_t,StrTraitMFC<wchar_t,ATL::ChTraitsCRT<wchar_t> > >::operator=
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.34.31933\atlmfc\include\cstringt.h
;	COMDAT ??1?$CStringT@_WV?$StrTraitMFC@_WV?$ChTraitsCRT@_W@ATL@@@@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$CStringT@_WV?$StrTraitMFC@_WV?$ChTraitsCRT@_W@ATL@@@@@ATL@@QAE@XZ PROC ; ATL::CStringT<wchar_t,StrTraitMFC<wchar_t,ATL::ChTraitsCRT<wchar_t> > >::~CStringT<wchar_t,StrTraitMFC<wchar_t,ATL::ChTraitsCRT<wchar_t> > >, COMDAT
; _this$ = ecx

; 1298 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	6a 03		 push	 3
  00012	59		 pop	 ecx
  00013	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00018	f3 ab		 rep stosd
  0001a	59		 pop	 ecx
  0001b	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __B625A68F_cstringt@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1299 : 	}

  00028	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002b	e8 00 00 00 00	 call	 ??1?$CSimpleStringT@_W$0A@@ATL@@QAE@XZ ; ATL::CSimpleStringT<wchar_t,0>::~CSimpleStringT<wchar_t,0>
  00030	5f		 pop	 edi
  00031	5e		 pop	 esi
  00032	5b		 pop	 ebx
  00033	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00039	3b ec		 cmp	 ebp, esp
  0003b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00040	c9		 leave
  00041	c3		 ret	 0
??1?$CStringT@_WV?$StrTraitMFC@_WV?$ChTraitsCRT@_W@ATL@@@@@ATL@@QAE@XZ ENDP ; ATL::CStringT<wchar_t,StrTraitMFC<wchar_t,ATL::ChTraitsCRT<wchar_t> > >::~CStringT<wchar_t,StrTraitMFC<wchar_t,ATL::ChTraitsCRT<wchar_t> > >
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.34.31933\atlmfc\include\cstringt.h
;	COMDAT ??0?$CStringT@_WV?$StrTraitMFC@_WV?$ChTraitsCRT@_W@ATL@@@@@ATL@@QAE@PB_W@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_pszSrc$ = 8						; size = 4
??0?$CStringT@_WV?$StrTraitMFC@_WV?$ChTraitsCRT@_W@ATL@@@@@ATL@@QAE@PB_W@Z PROC ; ATL::CStringT<wchar_t,StrTraitMFC<wchar_t,ATL::ChTraitsCRT<wchar_t> > >::CStringT<wchar_t,StrTraitMFC<wchar_t,ATL::ChTraitsCRT<wchar_t> > >, COMDAT
; _this$ = ecx

; 1049 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$CStringT@_WV?$StrTraitMFC@_WV?$ChTraitsCRT@_W@ATL@@@@@ATL@@QAE@PB_W@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d 7d e8	 lea	 edi, DWORD PTR [ebp-24]
  0001e	6a 03		 push	 3
  00020	59		 pop	 ecx
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	59		 pop	 ecx
  00029	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002e	33 c5		 xor	 eax, ebp
  00030	50		 push	 eax
  00031	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00034	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003a	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  0003d	b9 00 00 00 00	 mov	 ecx, OFFSET __B625A68F_cstringt@h
  00042	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1048 : 		CThisSimpleString( StringTraits::GetDefaultManager() )

  00047	e8 00 00 00 00	 call	 ?GetDefaultManager@?$StrTraitMFC@_WV?$ChTraitsCRT@_W@ATL@@@@SAPAUIAtlStringMgr@ATL@@XZ ; StrTraitMFC<wchar_t,ATL::ChTraitsCRT<wchar_t> >::GetDefaultManager
  0004c	50		 push	 eax
  0004d	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00050	e8 00 00 00 00	 call	 ??0?$CSimpleStringT@_W$0A@@ATL@@QAE@PAUIAtlStringMgr@1@@Z ; ATL::CSimpleStringT<wchar_t,0>::CSimpleStringT<wchar_t,0>
  00055	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 1050 : 		if( !CheckImplicitLoad( pszSrc ) )

  00059	ff 75 08	 push	 DWORD PTR _pszSrc$[ebp]
  0005c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0005f	e8 00 00 00 00	 call	 ?CheckImplicitLoad@?$CStringT@_WV?$StrTraitMFC@_WV?$ChTraitsCRT@_W@ATL@@@@@ATL@@AAE_NPBX@Z ; ATL::CStringT<wchar_t,StrTraitMFC<wchar_t,ATL::ChTraitsCRT<wchar_t> > >::CheckImplicitLoad
  00064	0f b6 c0	 movzx	 eax, al
  00067	85 c0		 test	 eax, eax
  00069	75 0b		 jne	 SHORT $LN1@CStringT

; 1051 : 		{
; 1052 : 			*this = pszSrc;

  0006b	ff 75 08	 push	 DWORD PTR _pszSrc$[ebp]
  0006e	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00071	e8 00 00 00 00	 call	 ??4?$CStringT@_WV?$StrTraitMFC@_WV?$ChTraitsCRT@_W@ATL@@@@@ATL@@QAEAAV01@PB_W@Z ; ATL::CStringT<wchar_t,StrTraitMFC<wchar_t,ATL::ChTraitsCRT<wchar_t> > >::operator=
$LN1@CStringT:

; 1053 : 		}
; 1054 : 	}

  00076	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0007a	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0007d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00080	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00087	59		 pop	 ecx
  00088	5f		 pop	 edi
  00089	5e		 pop	 esi
  0008a	5b		 pop	 ebx
  0008b	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00091	3b ec		 cmp	 ebp, esp
  00093	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00098	c9		 leave
  00099	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$CStringT@_WV?$StrTraitMFC@_WV?$ChTraitsCRT@_W@ATL@@@@@ATL@@QAE@PB_W@Z$0:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$CSimpleStringT@_W$0A@@ATL@@QAE@XZ ; ATL::CSimpleStringT<wchar_t,0>::~CSimpleStringT<wchar_t,0>
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??0?$CStringT@_WV?$StrTraitMFC@_WV?$ChTraitsCRT@_W@ATL@@@@@ATL@@QAE@PB_W@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 8a 24 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-220]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$CStringT@_WV?$StrTraitMFC@_WV?$ChTraitsCRT@_W@ATL@@@@@ATL@@QAE@PB_W@Z
  00028	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$CStringT@_WV?$StrTraitMFC@_WV?$ChTraitsCRT@_W@ATL@@@@@ATL@@QAE@PB_W@Z ENDP ; ATL::CStringT<wchar_t,StrTraitMFC<wchar_t,ATL::ChTraitsCRT<wchar_t> > >::CStringT<wchar_t,StrTraitMFC<wchar_t,ATL::ChTraitsCRT<wchar_t> > >
; Function compile flags: /Odsp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.34.31933\atlmfc\include\atlsimpstr.h
;	COMDAT ?SetLength@?$CSimpleStringT@_W$0A@@ATL@@AAEXH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_nLength$ = 8						; size = 4
?SetLength@?$CSimpleStringT@_W$0A@@ATL@@AAEXH@Z PROC	; ATL::CSimpleStringT<wchar_t,0>::SetLength, COMDAT
; _this$ = ecx

; 867  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	6a 03		 push	 3
  00012	59		 pop	 ecx
  00013	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00018	f3 ab		 rep stosd
  0001a	59		 pop	 ecx
  0001b	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __05D8B7B7_atlsimpstr@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 868  : 		ATLASSERT( nLength >= 0 );

  00028	83 7d 08 00	 cmp	 DWORD PTR _nLength$[ebp], 0
  0002c	7d 26		 jge	 SHORT $LN5@SetLength
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_1BK@OGOKLNEF@?$AAn?$AAL?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0@
  00033	68 00 00 00 00	 push	 OFFSET ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@
  00038	6a 00		 push	 0
  0003a	68 64 03 00 00	 push	 868			; 00000364H
  0003f	68 00 00 00 00	 push	 OFFSET ??_C@_1NO@CMNIKGIF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  00044	6a 02		 push	 2
  00046	e8 00 00 00 00	 call	 __CrtDbgReportW
  0004b	83 c4 18	 add	 esp, 24			; 00000018H
  0004e	83 f8 01	 cmp	 eax, 1
  00051	75 01		 jne	 SHORT $LN5@SetLength
  00053	cc		 int	 3
$LN5@SetLength:

; 869  : 		ATLASSERT( nLength <= GetData()->nAllocLength );

  00054	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00057	e8 00 00 00 00	 call	 ?GetData@?$CSimpleStringT@_W$0A@@ATL@@ABEPAUCStringData@2@XZ ; ATL::CSimpleStringT<wchar_t,0>::GetData
  0005c	8b 4d 08	 mov	 ecx, DWORD PTR _nLength$[ebp]
  0005f	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  00062	7e 26		 jle	 SHORT $LN6@SetLength
  00064	68 00 00 00 00	 push	 OFFSET ??_C@_1EG@PELIOAAG@?$AAn?$AAL?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAG?$AAe?$AAt?$AAD@
  00069	68 00 00 00 00	 push	 OFFSET ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@
  0006e	6a 00		 push	 0
  00070	68 65 03 00 00	 push	 869			; 00000365H
  00075	68 00 00 00 00	 push	 OFFSET ??_C@_1NO@CMNIKGIF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  0007a	6a 02		 push	 2
  0007c	e8 00 00 00 00	 call	 __CrtDbgReportW
  00081	83 c4 18	 add	 esp, 24			; 00000018H
  00084	83 f8 01	 cmp	 eax, 1
  00087	75 01		 jne	 SHORT $LN6@SetLength
  00089	cc		 int	 3
$LN6@SetLength:

; 870  : 
; 871  : 		if( nLength < 0 || nLength > GetData()->nAllocLength)

  0008a	83 7d 08 00	 cmp	 DWORD PTR _nLength$[ebp], 0
  0008e	7c 10		 jl	 SHORT $LN3@SetLength
  00090	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00093	e8 00 00 00 00	 call	 ?GetData@?$CSimpleStringT@_W$0A@@ATL@@ABEPAUCStringData@2@XZ ; ATL::CSimpleStringT<wchar_t,0>::GetData
  00098	8b 4d 08	 mov	 ecx, DWORD PTR _nLength$[ebp]
  0009b	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  0009e	7e 0a		 jle	 SHORT $LN2@SetLength
$LN3@SetLength:

; 872  : 			AtlThrow(E_INVALIDARG);

  000a0	68 57 00 07 80	 push	 -2147024809		; 80070057H
  000a5	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN2@SetLength:

; 873  : 
; 874  : 		GetData()->nDataLength = nLength;

  000aa	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000ad	e8 00 00 00 00	 call	 ?GetData@?$CSimpleStringT@_W$0A@@ATL@@ABEPAUCStringData@2@XZ ; ATL::CSimpleStringT<wchar_t,0>::GetData
  000b2	8b 4d 08	 mov	 ecx, DWORD PTR _nLength$[ebp]
  000b5	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 875  : 		m_pszData[nLength] = 0;

  000b8	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000bb	8b 00		 mov	 eax, DWORD PTR [eax]
  000bd	33 c9		 xor	 ecx, ecx
  000bf	8b 55 08	 mov	 edx, DWORD PTR _nLength$[ebp]
  000c2	66 89 0c 50	 mov	 WORD PTR [eax+edx*2], cx
$LN4@SetLength:

; 876  : 	}

  000c6	5f		 pop	 edi
  000c7	5e		 pop	 esi
  000c8	5b		 pop	 ebx
  000c9	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  000cf	3b ec		 cmp	 ebp, esp
  000d1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d6	c9		 leave
  000d7	c2 04 00	 ret	 4
?SetLength@?$CSimpleStringT@_W$0A@@ATL@@AAEXH@Z ENDP	; ATL::CSimpleStringT<wchar_t,0>::SetLength
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.34.31933\atlmfc\include\atlsimpstr.h
;	COMDAT ?Reallocate@?$CSimpleStringT@_W$0A@@ATL@@AAEXH@Z
_TEXT	SEGMENT
_pNewData$ = -44					; size = 4
_pStringMgr$ = -32					; size = 4
_pOldData$ = -20					; size = 4
_this$ = -8						; size = 4
_nLength$ = 8						; size = 4
?Reallocate@?$CSimpleStringT@_W$0A@@ATL@@AAEXH@Z PROC	; ATL::CSimpleStringT<wchar_t,0>::Reallocate, COMDAT
; _this$ = ecx

; 849  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec f0 00 00
	00		 sub	 esp, 240		; 000000f0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d d0	 lea	 edi, DWORD PTR [ebp-48]
  00010	6a 0c		 push	 12			; 0000000cH
  00012	59		 pop	 ecx
  00013	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00018	f3 ab		 rep stosd
  0001a	59		 pop	 ecx
  0001b	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __05D8B7B7_atlsimpstr@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 850  : 		CStringData* pOldData = GetData();

  00028	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002b	e8 00 00 00 00	 call	 ?GetData@?$CSimpleStringT@_W$0A@@ATL@@ABEPAUCStringData@2@XZ ; ATL::CSimpleStringT<wchar_t,0>::GetData
  00030	89 45 ec	 mov	 DWORD PTR _pOldData$[ebp], eax

; 851  : 		ATLASSERT( pOldData->nAllocLength < nLength );

  00033	8b 45 ec	 mov	 eax, DWORD PTR _pOldData$[ebp]
  00036	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00039	3b 45 08	 cmp	 eax, DWORD PTR _nLength$[ebp]
  0003c	7c 26		 jl	 SHORT $LN6@Reallocate
  0003e	68 00 00 00 00	 push	 OFFSET ??_C@_1EC@BCBEFJPM@?$AAp?$AAO?$AAl?$AAd?$AAD?$AAa?$AAt?$AAa?$AA?9?$AA?$DO?$AAn?$AAA?$AAl?$AAl?$AAo@
  00043	68 00 00 00 00	 push	 OFFSET ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@
  00048	6a 00		 push	 0
  0004a	68 53 03 00 00	 push	 851			; 00000353H
  0004f	68 00 00 00 00	 push	 OFFSET ??_C@_1NO@CMNIKGIF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  00054	6a 02		 push	 2
  00056	e8 00 00 00 00	 call	 __CrtDbgReportW
  0005b	83 c4 18	 add	 esp, 24			; 00000018H
  0005e	83 f8 01	 cmp	 eax, 1
  00061	75 01		 jne	 SHORT $LN6@Reallocate
  00063	cc		 int	 3
$LN6@Reallocate:

; 852  : 		IAtlStringMgr* pStringMgr = pOldData->pStringMgr;

  00064	8b 45 ec	 mov	 eax, DWORD PTR _pOldData$[ebp]
  00067	8b 00		 mov	 eax, DWORD PTR [eax]
  00069	89 45 e0	 mov	 DWORD PTR _pStringMgr$[ebp], eax

; 853  : 		if ( pOldData->nAllocLength >= nLength || nLength <= 0)

  0006c	8b 45 ec	 mov	 eax, DWORD PTR _pOldData$[ebp]
  0006f	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00072	3b 45 08	 cmp	 eax, DWORD PTR _nLength$[ebp]
  00075	7d 06		 jge	 SHORT $LN3@Reallocate
  00077	83 7d 08 00	 cmp	 DWORD PTR _nLength$[ebp], 0
  0007b	7f 07		 jg	 SHORT $LN2@Reallocate
$LN3@Reallocate:

; 854  : 		{
; 855  : 			ThrowMemoryException();

  0007d	e8 00 00 00 00	 call	 ?ThrowMemoryException@?$CSimpleStringT@_W$0A@@ATL@@KAXXZ ; ATL::CSimpleStringT<wchar_t,0>::ThrowMemoryException

; 856  : 			return;

  00082	eb 35		 jmp	 SHORT $LN5@Reallocate
$LN2@Reallocate:

; 857  : 		}
; 858  : 		CStringData* pNewData = pStringMgr->Reallocate( pOldData, nLength, sizeof( XCHAR ) );

  00084	8b f4		 mov	 esi, esp
  00086	6a 02		 push	 2
  00088	ff 75 08	 push	 DWORD PTR _nLength$[ebp]
  0008b	ff 75 ec	 push	 DWORD PTR _pOldData$[ebp]
  0008e	8b 45 e0	 mov	 eax, DWORD PTR _pStringMgr$[ebp]
  00091	8b 00		 mov	 eax, DWORD PTR [eax]
  00093	8b 4d e0	 mov	 ecx, DWORD PTR _pStringMgr$[ebp]
  00096	ff 50 08	 call	 DWORD PTR [eax+8]
  00099	3b f4		 cmp	 esi, esp
  0009b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a0	89 45 d4	 mov	 DWORD PTR _pNewData$[ebp], eax

; 859  : 		if( pNewData == NULL )

  000a3	83 7d d4 00	 cmp	 DWORD PTR _pNewData$[ebp], 0
  000a7	75 05		 jne	 SHORT $LN4@Reallocate

; 860  : 		{
; 861  : 			ThrowMemoryException();

  000a9	e8 00 00 00 00	 call	 ?ThrowMemoryException@?$CSimpleStringT@_W$0A@@ATL@@KAXXZ ; ATL::CSimpleStringT<wchar_t,0>::ThrowMemoryException
$LN4@Reallocate:

; 862  : 		}
; 863  : 		Attach( pNewData );

  000ae	ff 75 d4	 push	 DWORD PTR _pNewData$[ebp]
  000b1	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000b4	e8 00 00 00 00	 call	 ?Attach@?$CSimpleStringT@_W$0A@@ATL@@AAEXPAUCStringData@2@@Z ; ATL::CSimpleStringT<wchar_t,0>::Attach
$LN5@Reallocate:

; 864  : 	}

  000b9	5f		 pop	 edi
  000ba	5e		 pop	 esi
  000bb	5b		 pop	 ebx
  000bc	81 c4 f0 00 00
	00		 add	 esp, 240		; 000000f0H
  000c2	3b ec		 cmp	 ebp, esp
  000c4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c9	c9		 leave
  000ca	c2 04 00	 ret	 4
?Reallocate@?$CSimpleStringT@_W$0A@@ATL@@AAEXH@Z ENDP	; ATL::CSimpleStringT<wchar_t,0>::Reallocate
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.34.31933\atlmfc\include\atlsimpstr.h
;	COMDAT ?PrepareWrite2@?$CSimpleStringT@_W$0A@@ATL@@AAEXH@Z
_TEXT	SEGMENT
_nNewLength$1 = -32					; size = 4
_pOldData$ = -20					; size = 4
_this$ = -8						; size = 4
_nLength$ = 8						; size = 4
?PrepareWrite2@?$CSimpleStringT@_W$0A@@ATL@@AAEXH@Z PROC ; ATL::CSimpleStringT<wchar_t,0>::PrepareWrite2, COMDAT
; _this$ = ecx

; 818  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e4 00 00
	00		 sub	 esp, 228		; 000000e4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d dc	 lea	 edi, DWORD PTR [ebp-36]
  00010	6a 09		 push	 9
  00012	59		 pop	 ecx
  00013	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00018	f3 ab		 rep stosd
  0001a	59		 pop	 ecx
  0001b	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __05D8B7B7_atlsimpstr@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 819  : 		CStringData* pOldData = GetData();

  00028	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002b	e8 00 00 00 00	 call	 ?GetData@?$CSimpleStringT@_W$0A@@ATL@@ABEPAUCStringData@2@XZ ; ATL::CSimpleStringT<wchar_t,0>::GetData
  00030	89 45 ec	 mov	 DWORD PTR _pOldData$[ebp], eax

; 820  : 		if( pOldData->nDataLength > nLength )

  00033	8b 45 ec	 mov	 eax, DWORD PTR _pOldData$[ebp]
  00036	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00039	3b 45 08	 cmp	 eax, DWORD PTR _nLength$[ebp]
  0003c	7e 09		 jle	 SHORT $LN2@PrepareWri

; 821  : 		{
; 822  : 			nLength = pOldData->nDataLength;

  0003e	8b 45 ec	 mov	 eax, DWORD PTR _pOldData$[ebp]
  00041	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00044	89 45 08	 mov	 DWORD PTR _nLength$[ebp], eax
$LN2@PrepareWri:

; 823  : 		}
; 824  : 		if( pOldData->IsShared() )

  00047	8b 4d ec	 mov	 ecx, DWORD PTR _pOldData$[ebp]
  0004a	e8 00 00 00 00	 call	 ?IsShared@CStringData@ATL@@QBE_NXZ ; ATL::CStringData::IsShared
  0004f	0f b6 c0	 movzx	 eax, al
  00052	85 c0		 test	 eax, eax
  00054	74 0d		 je	 SHORT $LN3@PrepareWri

; 825  : 		{
; 826  : 			Fork( nLength );

  00056	ff 75 08	 push	 DWORD PTR _nLength$[ebp]
  00059	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0005c	e8 00 00 00 00	 call	 ?Fork@?$CSimpleStringT@_W$0A@@ATL@@AAEXH@Z ; ATL::CSimpleStringT<wchar_t,0>::Fork

; 827  : 		}

  00061	eb 51		 jmp	 SHORT $LN1@PrepareWri
$LN3@PrepareWri:

; 828  : 		else if( pOldData->nAllocLength < nLength )

  00063	8b 45 ec	 mov	 eax, DWORD PTR _pOldData$[ebp]
  00066	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00069	3b 45 08	 cmp	 eax, DWORD PTR _nLength$[ebp]
  0006c	7d 46		 jge	 SHORT $LN1@PrepareWri

; 829  : 		{
; 830  : 			// Grow exponentially, until we hit 1G, then by 1M thereafter.
; 831  : 			int nNewLength = pOldData->nAllocLength;

  0006e	8b 45 ec	 mov	 eax, DWORD PTR _pOldData$[ebp]
  00071	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00074	89 45 e0	 mov	 DWORD PTR _nNewLength$1[ebp], eax

; 832  : 			if( nNewLength > 1024 * 1024 * 1024 )

  00077	81 7d e0 00 00
	00 40		 cmp	 DWORD PTR _nNewLength$1[ebp], 1073741824 ; 40000000H
  0007e	7e 0d		 jle	 SHORT $LN6@PrepareWri

; 833  : 			{
; 834  : 				nNewLength += 1024 * 1024;

  00080	8b 45 e0	 mov	 eax, DWORD PTR _nNewLength$1[ebp]
  00083	05 00 00 10 00	 add	 eax, 1048576		; 00100000H
  00088	89 45 e0	 mov	 DWORD PTR _nNewLength$1[ebp], eax

; 835  : 			}

  0008b	eb 0e		 jmp	 SHORT $LN7@PrepareWri
$LN6@PrepareWri:

; 836  : 			else
; 837  : 			{
; 838  : 				// Exponential growth factor is 1.5.
; 839  : 				nNewLength = nNewLength + nNewLength / 2;

  0008d	8b 45 e0	 mov	 eax, DWORD PTR _nNewLength$1[ebp]
  00090	99		 cdq
  00091	2b c2		 sub	 eax, edx
  00093	d1 f8		 sar	 eax, 1
  00095	03 45 e0	 add	 eax, DWORD PTR _nNewLength$1[ebp]
  00098	89 45 e0	 mov	 DWORD PTR _nNewLength$1[ebp], eax
$LN7@PrepareWri:

; 840  : 			}
; 841  : 			if( nNewLength < nLength )

  0009b	8b 45 e0	 mov	 eax, DWORD PTR _nNewLength$1[ebp]
  0009e	3b 45 08	 cmp	 eax, DWORD PTR _nLength$[ebp]
  000a1	7d 06		 jge	 SHORT $LN8@PrepareWri

; 842  : 			{
; 843  : 				nNewLength = nLength;

  000a3	8b 45 08	 mov	 eax, DWORD PTR _nLength$[ebp]
  000a6	89 45 e0	 mov	 DWORD PTR _nNewLength$1[ebp], eax
$LN8@PrepareWri:

; 844  : 			}
; 845  : 			Reallocate( nNewLength );

  000a9	ff 75 e0	 push	 DWORD PTR _nNewLength$1[ebp]
  000ac	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000af	e8 00 00 00 00	 call	 ?Reallocate@?$CSimpleStringT@_W$0A@@ATL@@AAEXH@Z ; ATL::CSimpleStringT<wchar_t,0>::Reallocate
$LN1@PrepareWri:

; 846  : 		}
; 847  : 	}

  000b4	5f		 pop	 edi
  000b5	5e		 pop	 esi
  000b6	5b		 pop	 ebx
  000b7	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  000bd	3b ec		 cmp	 ebp, esp
  000bf	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c4	c9		 leave
  000c5	c2 04 00	 ret	 4
?PrepareWrite2@?$CSimpleStringT@_W$0A@@ATL@@AAEXH@Z ENDP ; ATL::CSimpleStringT<wchar_t,0>::PrepareWrite2
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.34.31933\atlmfc\include\atlsimpstr.h
;	COMDAT ?PrepareWrite@?$CSimpleStringT@_W$0A@@ATL@@AAEPA_WH@Z
_TEXT	SEGMENT
_nTooShort$ = -44					; size = 4
_nShared$ = -32						; size = 4
_pOldData$ = -20					; size = 4
_this$ = -8						; size = 4
_nLength$ = 8						; size = 4
?PrepareWrite@?$CSimpleStringT@_W$0A@@ATL@@AAEPA_WH@Z PROC ; ATL::CSimpleStringT<wchar_t,0>::PrepareWrite, COMDAT
; _this$ = ecx

; 803  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec f0 00 00
	00		 sub	 esp, 240		; 000000f0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d d0	 lea	 edi, DWORD PTR [ebp-48]
  00010	6a 0c		 push	 12			; 0000000cH
  00012	59		 pop	 ecx
  00013	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00018	f3 ab		 rep stosd
  0001a	59		 pop	 ecx
  0001b	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __05D8B7B7_atlsimpstr@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 804  : 		if (nLength < 0)

  00028	83 7d 08 00	 cmp	 DWORD PTR _nLength$[ebp], 0
  0002c	7d 0a		 jge	 SHORT $LN2@PrepareWri

; 805  : 			AtlThrow(E_INVALIDARG);

  0002e	68 57 00 07 80	 push	 -2147024809		; 80070057H
  00033	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN2@PrepareWri:

; 806  : 
; 807  : 		CStringData* pOldData = GetData();

  00038	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0003b	e8 00 00 00 00	 call	 ?GetData@?$CSimpleStringT@_W$0A@@ATL@@ABEPAUCStringData@2@XZ ; ATL::CSimpleStringT<wchar_t,0>::GetData
  00040	89 45 ec	 mov	 DWORD PTR _pOldData$[ebp], eax

; 808  : 		int nShared = 1-pOldData->nRefs;  // nShared < 0 means true, >= 0 means false

  00043	8b 45 ec	 mov	 eax, DWORD PTR _pOldData$[ebp]
  00046	33 c9		 xor	 ecx, ecx
  00048	41		 inc	 ecx
  00049	2b 48 0c	 sub	 ecx, DWORD PTR [eax+12]
  0004c	89 4d e0	 mov	 DWORD PTR _nShared$[ebp], ecx

; 809  : 		int nTooShort = pOldData->nAllocLength-nLength;  // nTooShort < 0 means true, >= 0 means false

  0004f	8b 45 ec	 mov	 eax, DWORD PTR _pOldData$[ebp]
  00052	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00055	2b 45 08	 sub	 eax, DWORD PTR _nLength$[ebp]
  00058	89 45 d4	 mov	 DWORD PTR _nTooShort$[ebp], eax

; 810  : 		if( (nShared|nTooShort) < 0 )  // If either sign bit is set (i.e. either is less than zero), we need to copy data

  0005b	8b 45 e0	 mov	 eax, DWORD PTR _nShared$[ebp]
  0005e	0b 45 d4	 or	 eax, DWORD PTR _nTooShort$[ebp]
  00061	7d 0b		 jge	 SHORT $LN3@PrepareWri

; 811  : 		{
; 812  : 			PrepareWrite2( nLength );

  00063	ff 75 08	 push	 DWORD PTR _nLength$[ebp]
  00066	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00069	e8 00 00 00 00	 call	 ?PrepareWrite2@?$CSimpleStringT@_W$0A@@ATL@@AAEXH@Z ; ATL::CSimpleStringT<wchar_t,0>::PrepareWrite2
$LN3@PrepareWri:

; 813  : 		}
; 814  : 
; 815  : 		return( m_pszData );

  0006e	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00071	8b 00		 mov	 eax, DWORD PTR [eax]
$LN4@PrepareWri:

; 816  : 	}

  00073	5f		 pop	 edi
  00074	5e		 pop	 esi
  00075	5b		 pop	 ebx
  00076	81 c4 f0 00 00
	00		 add	 esp, 240		; 000000f0H
  0007c	3b ec		 cmp	 ebp, esp
  0007e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00083	c9		 leave
  00084	c2 04 00	 ret	 4
?PrepareWrite@?$CSimpleStringT@_W$0A@@ATL@@AAEPA_WH@Z ENDP ; ATL::CSimpleStringT<wchar_t,0>::PrepareWrite
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.34.31933\atlmfc\include\atlsimpstr.h
;	COMDAT ?GetData@?$CSimpleStringT@_W$0A@@ATL@@ABEPAUCStringData@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetData@?$CSimpleStringT@_W$0A@@ATL@@ABEPAUCStringData@2@XZ PROC ; ATL::CSimpleStringT<wchar_t,0>::GetData, COMDAT
; _this$ = ecx

; 799  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	6a 03		 push	 3
  00012	59		 pop	 ecx
  00013	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00018	f3 ab		 rep stosd
  0001a	59		 pop	 ecx
  0001b	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __05D8B7B7_atlsimpstr@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 800  : 		return( reinterpret_cast< CStringData* >( m_pszData )-1 );

  00028	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	8b 00		 mov	 eax, DWORD PTR [eax]
  0002d	83 e8 10	 sub	 eax, 16			; 00000010H

; 801  : 	}

  00030	5f		 pop	 edi
  00031	5e		 pop	 esi
  00032	5b		 pop	 ebx
  00033	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00039	3b ec		 cmp	 ebp, esp
  0003b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00040	c9		 leave
  00041	c3		 ret	 0
?GetData@?$CSimpleStringT@_W$0A@@ATL@@ABEPAUCStringData@2@XZ ENDP ; ATL::CSimpleStringT<wchar_t,0>::GetData
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.34.31933\atlmfc\include\atlsimpstr.h
;	COMDAT ?Fork@?$CSimpleStringT@_W$0A@@ATL@@AAEXH@Z
_TEXT	SEGMENT
tv84 = -256						; size = 4
tv76 = -256						; size = 4
_nCharsToCopy$ = -56					; size = 4
_pNewData$ = -44					; size = 4
_nOldLength$ = -32					; size = 4
_pOldData$ = -20					; size = 4
_this$ = -8						; size = 4
_nLength$ = 8						; size = 4
?Fork@?$CSimpleStringT@_W$0A@@ATL@@AAEXH@Z PROC		; ATL::CSimpleStringT<wchar_t,0>::Fork, COMDAT
; _this$ = ecx

; 783  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 00 01 00
	00		 sub	 esp, 256		; 00000100H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d c0	 lea	 edi, DWORD PTR [ebp-64]
  00010	6a 10		 push	 16			; 00000010H
  00012	59		 pop	 ecx
  00013	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00018	f3 ab		 rep stosd
  0001a	59		 pop	 ecx
  0001b	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __05D8B7B7_atlsimpstr@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 784  : 		CStringData* pOldData = GetData();

  00028	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002b	e8 00 00 00 00	 call	 ?GetData@?$CSimpleStringT@_W$0A@@ATL@@ABEPAUCStringData@2@XZ ; ATL::CSimpleStringT<wchar_t,0>::GetData
  00030	89 45 ec	 mov	 DWORD PTR _pOldData$[ebp], eax

; 785  : 		int nOldLength = pOldData->nDataLength;

  00033	8b 45 ec	 mov	 eax, DWORD PTR _pOldData$[ebp]
  00036	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00039	89 45 e0	 mov	 DWORD PTR _nOldLength$[ebp], eax

; 786  : 		CStringData* pNewData = pOldData->pStringMgr->Clone()->Allocate( nLength, sizeof( XCHAR ) );

  0003c	8b 45 ec	 mov	 eax, DWORD PTR _pOldData$[ebp]
  0003f	8b 00		 mov	 eax, DWORD PTR [eax]
  00041	8b 4d ec	 mov	 ecx, DWORD PTR _pOldData$[ebp]
  00044	8b 00		 mov	 eax, DWORD PTR [eax]
  00046	8b f4		 mov	 esi, esp
  00048	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0004a	ff 50 10	 call	 DWORD PTR [eax+16]
  0004d	3b f4		 cmp	 esi, esp
  0004f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00054	89 85 00 ff ff
	ff		 mov	 DWORD PTR tv76[ebp], eax
  0005a	8b f4		 mov	 esi, esp
  0005c	6a 02		 push	 2
  0005e	ff 75 08	 push	 DWORD PTR _nLength$[ebp]
  00061	8b 85 00 ff ff
	ff		 mov	 eax, DWORD PTR tv76[ebp]
  00067	8b 00		 mov	 eax, DWORD PTR [eax]
  00069	8b 8d 00 ff ff
	ff		 mov	 ecx, DWORD PTR tv76[ebp]
  0006f	ff 10		 call	 DWORD PTR [eax]
  00071	3b f4		 cmp	 esi, esp
  00073	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00078	89 45 d4	 mov	 DWORD PTR _pNewData$[ebp], eax

; 787  : 		if( pNewData == NULL )

  0007b	83 7d d4 00	 cmp	 DWORD PTR _pNewData$[ebp], 0
  0007f	75 05		 jne	 SHORT $LN2@Fork

; 788  : 		{
; 789  : 			ThrowMemoryException();

  00081	e8 00 00 00 00	 call	 ?ThrowMemoryException@?$CSimpleStringT@_W$0A@@ATL@@KAXXZ ; ATL::CSimpleStringT<wchar_t,0>::ThrowMemoryException
$LN2@Fork:

; 790  : 		}
; 791  : 		int nCharsToCopy = ((nOldLength < nLength) ? nOldLength : nLength)+1;  // Copy '\0'

  00086	8b 45 e0	 mov	 eax, DWORD PTR _nOldLength$[ebp]
  00089	3b 45 08	 cmp	 eax, DWORD PTR _nLength$[ebp]
  0008c	7d 0b		 jge	 SHORT $LN4@Fork
  0008e	8b 45 e0	 mov	 eax, DWORD PTR _nOldLength$[ebp]
  00091	89 85 00 ff ff
	ff		 mov	 DWORD PTR tv84[ebp], eax
  00097	eb 09		 jmp	 SHORT $LN5@Fork
$LN4@Fork:
  00099	8b 45 08	 mov	 eax, DWORD PTR _nLength$[ebp]
  0009c	89 85 00 ff ff
	ff		 mov	 DWORD PTR tv84[ebp], eax
$LN5@Fork:
  000a2	8b 85 00 ff ff
	ff		 mov	 eax, DWORD PTR tv84[ebp]
  000a8	40		 inc	 eax
  000a9	89 45 c8	 mov	 DWORD PTR _nCharsToCopy$[ebp], eax

; 792  : 		memcpy_s( PXSTR( pNewData->data() ), nCharsToCopy * sizeof( XCHAR ),

  000ac	8b 45 c8	 mov	 eax, DWORD PTR _nCharsToCopy$[ebp]
  000af	d1 e0		 shl	 eax, 1
  000b1	50		 push	 eax
  000b2	8b 4d ec	 mov	 ecx, DWORD PTR _pOldData$[ebp]
  000b5	e8 00 00 00 00	 call	 ?data@CStringData@ATL@@QAEPAXXZ ; ATL::CStringData::data
  000ba	50		 push	 eax
  000bb	8b 45 c8	 mov	 eax, DWORD PTR _nCharsToCopy$[ebp]
  000be	d1 e0		 shl	 eax, 1
  000c0	50		 push	 eax
  000c1	8b 4d d4	 mov	 ecx, DWORD PTR _pNewData$[ebp]
  000c4	e8 00 00 00 00	 call	 ?data@CStringData@ATL@@QAEPAXXZ ; ATL::CStringData::data
  000c9	50		 push	 eax
  000ca	e8 00 00 00 00	 call	 _memcpy_s
  000cf	83 c4 10	 add	 esp, 16			; 00000010H

; 793  : 			PCXSTR( pOldData->data() ), nCharsToCopy * sizeof( XCHAR ));
; 794  : 		pNewData->nDataLength = nOldLength;

  000d2	8b 45 d4	 mov	 eax, DWORD PTR _pNewData$[ebp]
  000d5	8b 4d e0	 mov	 ecx, DWORD PTR _nOldLength$[ebp]
  000d8	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 795  : 		pOldData->Release();

  000db	8b 4d ec	 mov	 ecx, DWORD PTR _pOldData$[ebp]
  000de	e8 00 00 00 00	 call	 ?Release@CStringData@ATL@@QAEXXZ ; ATL::CStringData::Release

; 796  : 		Attach( pNewData );

  000e3	ff 75 d4	 push	 DWORD PTR _pNewData$[ebp]
  000e6	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000e9	e8 00 00 00 00	 call	 ?Attach@?$CSimpleStringT@_W$0A@@ATL@@AAEXPAUCStringData@2@@Z ; ATL::CSimpleStringT<wchar_t,0>::Attach
$LN3@Fork:

; 797  : 	}

  000ee	5f		 pop	 edi
  000ef	5e		 pop	 esi
  000f0	5b		 pop	 ebx
  000f1	81 c4 00 01 00
	00		 add	 esp, 256		; 00000100H
  000f7	3b ec		 cmp	 ebp, esp
  000f9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000fe	c9		 leave
  000ff	c2 04 00	 ret	 4
?Fork@?$CSimpleStringT@_W$0A@@ATL@@AAEXH@Z ENDP		; ATL::CSimpleStringT<wchar_t,0>::Fork
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.34.31933\atlmfc\include\atlsimpstr.h
;	COMDAT ?Attach@?$CSimpleStringT@_W$0A@@ATL@@AAEXPAUCStringData@2@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pData$ = 8						; size = 4
?Attach@?$CSimpleStringT@_W$0A@@ATL@@AAEXPAUCStringData@2@@Z PROC ; ATL::CSimpleStringT<wchar_t,0>::Attach, COMDAT
; _this$ = ecx

; 779  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	6a 03		 push	 3
  00012	59		 pop	 ecx
  00013	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00018	f3 ab		 rep stosd
  0001a	59		 pop	 ecx
  0001b	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __05D8B7B7_atlsimpstr@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 780  : 		m_pszData = static_cast< PXSTR >( pData->data() );

  00028	8b 4d 08	 mov	 ecx, DWORD PTR _pData$[ebp]
  0002b	e8 00 00 00 00	 call	 ?data@CStringData@ATL@@QAEPAXXZ ; ATL::CStringData::data
  00030	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00033	89 01		 mov	 DWORD PTR [ecx], eax

; 781  : 	}

  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003e	3b ec		 cmp	 ebp, esp
  00040	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00045	c9		 leave
  00046	c2 04 00	 ret	 4
?Attach@?$CSimpleStringT@_W$0A@@ATL@@AAEXPAUCStringData@2@@Z ENDP ; ATL::CSimpleStringT<wchar_t,0>::Attach
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.34.31933\atlmfc\include\atlsimpstr.h
;	COMDAT ?ThrowMemoryException@?$CSimpleStringT@_W$0A@@ATL@@KAXXZ
_TEXT	SEGMENT
?ThrowMemoryException@?$CSimpleStringT@_W$0A@@ATL@@KAXXZ PROC ; ATL::CSimpleStringT<wchar_t,0>::ThrowMemoryException, COMDAT

; 772  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __05D8B7B7_atlsimpstr@h
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 773  : 		AtlThrow( E_OUTOFMEMORY );

  00021	68 0e 00 07 80	 push	 -2147024882		; 8007000eH
  00026	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN2@ThrowMemor:

; 774  : 	}

  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	c9		 leave
  0003c	c3		 ret	 0
?ThrowMemoryException@?$CSimpleStringT@_W$0A@@ATL@@KAXXZ ENDP ; ATL::CSimpleStringT<wchar_t,0>::ThrowMemoryException
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.34.31933\atlmfc\include\atlsimpstr.h
;	COMDAT ?StringLength@?$CSimpleStringT@_W$0A@@ATL@@SAHPB_W@Z
_TEXT	SEGMENT
_psz$ = 8						; size = 4
?StringLength@?$CSimpleStringT@_W$0A@@ATL@@SAHPB_W@Z PROC ; ATL::CSimpleStringT<wchar_t,0>::StringLength, COMDAT

; 729  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __05D8B7B7_atlsimpstr@h
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 730  : 		if( psz == NULL )

  00021	83 7d 08 00	 cmp	 DWORD PTR _psz$[ebp], 0
  00025	75 04		 jne	 SHORT $LN2@StringLeng

; 731  : 		{
; 732  : 			return( 0 );

  00027	33 c0		 xor	 eax, eax
  00029	eb 09		 jmp	 SHORT $LN1@StringLeng
$LN2@StringLeng:

; 733  : 		}
; 734  : 		return( int( wcslen( psz ) ) );

  0002b	ff 75 08	 push	 DWORD PTR _psz$[ebp]
  0002e	e8 00 00 00 00	 call	 _wcslen
  00033	59		 pop	 ecx
$LN1@StringLeng:

; 735  : 	}

  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx
  00037	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0003d	3b ec		 cmp	 ebp, esp
  0003f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00044	c9		 leave
  00045	c3		 ret	 0
?StringLength@?$CSimpleStringT@_W$0A@@ATL@@SAHPB_W@Z ENDP ; ATL::CSimpleStringT<wchar_t,0>::StringLength
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.34.31933\atlmfc\include\atlsimpstr.h
;	COMDAT ?CopyCharsOverlapped@?$CSimpleStringT@_W$0A@@ATL@@SAXPA_WIPB_WH@Z
_TEXT	SEGMENT
_pchDest$ = 8						; size = 4
_nDestLen$ = 12						; size = 4
_pchSrc$ = 16						; size = 4
_nChars$ = 20						; size = 4
?CopyCharsOverlapped@?$CSimpleStringT@_W$0A@@ATL@@SAXPA_WIPB_WH@Z PROC ; ATL::CSimpleStringT<wchar_t,0>::CopyCharsOverlapped, COMDAT

; 716  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __05D8B7B7_atlsimpstr@h
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 717  : 		memmove_s( pchDest, nDestLen*sizeof( XCHAR ),

  00021	8b 45 14	 mov	 eax, DWORD PTR _nChars$[ebp]
  00024	d1 e0		 shl	 eax, 1
  00026	50		 push	 eax
  00027	ff 75 10	 push	 DWORD PTR _pchSrc$[ebp]
  0002a	8b 45 0c	 mov	 eax, DWORD PTR _nDestLen$[ebp]
  0002d	d1 e0		 shl	 eax, 1
  0002f	50		 push	 eax
  00030	ff 75 08	 push	 DWORD PTR _pchDest$[ebp]
  00033	e8 00 00 00 00	 call	 _memmove_s
  00038	83 c4 10	 add	 esp, 16			; 00000010H

; 718  : 			pchSrc, nChars*sizeof( XCHAR ) );
; 719  : 	}

  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
  0003d	5b		 pop	 ebx
  0003e	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00044	3b ec		 cmp	 ebp, esp
  00046	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004b	c9		 leave
  0004c	c3		 ret	 0
?CopyCharsOverlapped@?$CSimpleStringT@_W$0A@@ATL@@SAXPA_WIPB_WH@Z ENDP ; ATL::CSimpleStringT<wchar_t,0>::CopyCharsOverlapped
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.34.31933\atlmfc\include\atlsimpstr.h
;	COMDAT ?SetString@?$CSimpleStringT@_W$0A@@ATL@@QAEXPB_WH@Z
_TEXT	SEGMENT
_pszBuffer$1 = -44					; size = 4
_nOffset$2 = -32					; size = 4
_nOldLength$3 = -20					; size = 4
_this$ = -8						; size = 4
_pszSrc$ = 8						; size = 4
_nLength$ = 12						; size = 4
?SetString@?$CSimpleStringT@_W$0A@@ATL@@QAEXPB_WH@Z PROC ; ATL::CSimpleStringT<wchar_t,0>::SetString, COMDAT
; _this$ = ecx

; 607  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec f0 00 00
	00		 sub	 esp, 240		; 000000f0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d d0	 lea	 edi, DWORD PTR [ebp-48]
  00010	6a 0c		 push	 12			; 0000000cH
  00012	59		 pop	 ecx
  00013	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00018	f3 ab		 rep stosd
  0001a	59		 pop	 ecx
  0001b	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __05D8B7B7_atlsimpstr@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 608  : 		if( nLength == 0 )

  00028	83 7d 0c 00	 cmp	 DWORD PTR _nLength$[ebp], 0
  0002c	75 0d		 jne	 SHORT $LN2@SetString

; 609  : 		{
; 610  : 			Empty();

  0002e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00031	e8 00 00 00 00	 call	 ?Empty@?$CSimpleStringT@_W$0A@@ATL@@QAEXXZ ; ATL::CSimpleStringT<wchar_t,0>::Empty

; 611  : 		}

  00036	e9 90 00 00 00	 jmp	 $LN7@SetString
$LN2@SetString:

; 612  : 		else
; 613  : 		{
; 614  : 			// It is possible that pszSrc points to a location inside of our
; 615  : 			// buffer.  GetBuffer() might change m_pszData if (1) the buffer
; 616  : 			// is shared or (2) the buffer is too small to hold the new
; 617  : 			// string.  We detect this aliasing, and modify pszSrc to point
; 618  : 			// into the newly allocated buffer instead.
; 619  : 
; 620  : 			if(pszSrc == NULL)

  0003b	83 7d 08 00	 cmp	 DWORD PTR _pszSrc$[ebp], 0
  0003f	75 0a		 jne	 SHORT $LN4@SetString

; 621  : 				AtlThrow(E_INVALIDARG);

  00041	68 57 00 07 80	 push	 -2147024809		; 80070057H
  00046	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN4@SetString:

; 622  : 
; 623  : 			UINT nOldLength = GetLength();

  0004b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0004e	e8 00 00 00 00	 call	 ?GetLength@?$CSimpleStringT@_W$0A@@ATL@@QBEHXZ ; ATL::CSimpleStringT<wchar_t,0>::GetLength
  00053	89 45 ec	 mov	 DWORD PTR _nOldLength$3[ebp], eax

; 624  : 			UINT_PTR nOffset = pszSrc-GetString();

  00056	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00059	e8 00 00 00 00	 call	 ?GetString@?$CSimpleStringT@_W$0A@@ATL@@QBEPB_WXZ ; ATL::CSimpleStringT<wchar_t,0>::GetString
  0005e	8b 4d 08	 mov	 ecx, DWORD PTR _pszSrc$[ebp]
  00061	2b c8		 sub	 ecx, eax
  00063	d1 f9		 sar	 ecx, 1
  00065	89 4d e0	 mov	 DWORD PTR _nOffset$2[ebp], ecx

; 625  : 			// If 0 <= nOffset <= nOldLength, then pszSrc points into our
; 626  : 			// buffer
; 627  : 
; 628  : 			PXSTR pszBuffer = GetBuffer( nLength );

  00068	ff 75 0c	 push	 DWORD PTR _nLength$[ebp]
  0006b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0006e	e8 00 00 00 00	 call	 ?GetBuffer@?$CSimpleStringT@_W$0A@@ATL@@QAEPA_WH@Z ; ATL::CSimpleStringT<wchar_t,0>::GetBuffer
  00073	89 45 d4	 mov	 DWORD PTR _pszBuffer$1[ebp], eax

; 629  : 			if( nOffset <= nOldLength )

  00076	8b 45 e0	 mov	 eax, DWORD PTR _nOffset$2[ebp]
  00079	3b 45 ec	 cmp	 eax, DWORD PTR _nOldLength$3[ebp]
  0007c	77 23		 ja	 SHORT $LN5@SetString

; 630  : 			{
; 631  : 				CopyCharsOverlapped( pszBuffer, GetAllocLength(),

  0007e	ff 75 0c	 push	 DWORD PTR _nLength$[ebp]
  00081	8b 45 e0	 mov	 eax, DWORD PTR _nOffset$2[ebp]
  00084	8b 4d d4	 mov	 ecx, DWORD PTR _pszBuffer$1[ebp]
  00087	8d 04 41	 lea	 eax, DWORD PTR [ecx+eax*2]
  0008a	50		 push	 eax
  0008b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0008e	e8 00 00 00 00	 call	 ?GetAllocLength@?$CSimpleStringT@_W$0A@@ATL@@QBEHXZ ; ATL::CSimpleStringT<wchar_t,0>::GetAllocLength
  00093	50		 push	 eax
  00094	ff 75 d4	 push	 DWORD PTR _pszBuffer$1[ebp]
  00097	e8 00 00 00 00	 call	 ?CopyCharsOverlapped@?$CSimpleStringT@_W$0A@@ATL@@SAXPA_WIPB_WH@Z ; ATL::CSimpleStringT<wchar_t,0>::CopyCharsOverlapped
  0009c	83 c4 10	 add	 esp, 16			; 00000010H

; 632  : 					pszBuffer+nOffset, nLength );
; 633  : 			}

  0009f	eb 1f		 jmp	 SHORT $LN6@SetString
$LN5@SetString:

; 634  : 			else
; 635  : 			{
; 636  : 				memcpy_s( pszBuffer, GetAllocLength() * sizeof( XCHAR ), pszSrc, nLength * sizeof( XCHAR ));

  000a1	8b 45 0c	 mov	 eax, DWORD PTR _nLength$[ebp]
  000a4	d1 e0		 shl	 eax, 1
  000a6	50		 push	 eax
  000a7	ff 75 08	 push	 DWORD PTR _pszSrc$[ebp]
  000aa	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000ad	e8 00 00 00 00	 call	 ?GetAllocLength@?$CSimpleStringT@_W$0A@@ATL@@QBEHXZ ; ATL::CSimpleStringT<wchar_t,0>::GetAllocLength
  000b2	d1 e0		 shl	 eax, 1
  000b4	50		 push	 eax
  000b5	ff 75 d4	 push	 DWORD PTR _pszBuffer$1[ebp]
  000b8	e8 00 00 00 00	 call	 _memcpy_s
  000bd	83 c4 10	 add	 esp, 16			; 00000010H
$LN6@SetString:

; 637  : 			}
; 638  : 			ReleaseBufferSetLength( nLength );

  000c0	ff 75 0c	 push	 DWORD PTR _nLength$[ebp]
  000c3	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000c6	e8 00 00 00 00	 call	 ?ReleaseBufferSetLength@?$CSimpleStringT@_W$0A@@ATL@@QAEXH@Z ; ATL::CSimpleStringT<wchar_t,0>::ReleaseBufferSetLength
$LN7@SetString:

; 639  : 		}
; 640  : 	}

  000cb	5f		 pop	 edi
  000cc	5e		 pop	 esi
  000cd	5b		 pop	 ebx
  000ce	81 c4 f0 00 00
	00		 add	 esp, 240		; 000000f0H
  000d4	3b ec		 cmp	 ebp, esp
  000d6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000db	c9		 leave
  000dc	c2 08 00	 ret	 8
?SetString@?$CSimpleStringT@_W$0A@@ATL@@QAEXPB_WH@Z ENDP ; ATL::CSimpleStringT<wchar_t,0>::SetString
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.34.31933\atlmfc\include\atlsimpstr.h
;	COMDAT ?SetString@?$CSimpleStringT@_W$0A@@ATL@@QAEXPB_W@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pszSrc$ = 8						; size = 4
?SetString@?$CSimpleStringT@_W$0A@@ATL@@QAEXPB_W@Z PROC	; ATL::CSimpleStringT<wchar_t,0>::SetString, COMDAT
; _this$ = ecx

; 601  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	6a 03		 push	 3
  00012	59		 pop	 ecx
  00013	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00018	f3 ab		 rep stosd
  0001a	59		 pop	 ecx
  0001b	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __05D8B7B7_atlsimpstr@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 602  : 		SetString( pszSrc, StringLength( pszSrc ) );

  00028	ff 75 08	 push	 DWORD PTR _pszSrc$[ebp]
  0002b	e8 00 00 00 00	 call	 ?StringLength@?$CSimpleStringT@_W$0A@@ATL@@SAHPB_W@Z ; ATL::CSimpleStringT<wchar_t,0>::StringLength
  00030	59		 pop	 ecx
  00031	50		 push	 eax
  00032	ff 75 08	 push	 DWORD PTR _pszSrc$[ebp]
  00035	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	e8 00 00 00 00	 call	 ?SetString@?$CSimpleStringT@_W$0A@@ATL@@QAEXPB_WH@Z ; ATL::CSimpleStringT<wchar_t,0>::SetString

; 603  : 	}

  0003d	5f		 pop	 edi
  0003e	5e		 pop	 esi
  0003f	5b		 pop	 ebx
  00040	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00046	3b ec		 cmp	 ebp, esp
  00048	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004d	c9		 leave
  0004e	c2 04 00	 ret	 4
?SetString@?$CSimpleStringT@_W$0A@@ATL@@QAEXPB_W@Z ENDP	; ATL::CSimpleStringT<wchar_t,0>::SetString
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.34.31933\atlmfc\include\atlsimpstr.h
;	COMDAT ?ReleaseBufferSetLength@?$CSimpleStringT@_W$0A@@ATL@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_nNewLength$ = 8					; size = 4
?ReleaseBufferSetLength@?$CSimpleStringT@_W$0A@@ATL@@QAEXH@Z PROC ; ATL::CSimpleStringT<wchar_t,0>::ReleaseBufferSetLength, COMDAT
; _this$ = ecx

; 566  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	6a 03		 push	 3
  00012	59		 pop	 ecx
  00013	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00018	f3 ab		 rep stosd
  0001a	59		 pop	 ecx
  0001b	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __05D8B7B7_atlsimpstr@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 567  : 		ATLASSERT( nNewLength >= 0 );

  00028	83 7d 08 00	 cmp	 DWORD PTR _nNewLength$[ebp], 0
  0002c	7d 26		 jge	 SHORT $LN3@ReleaseBuf
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_1CA@FILBIMGF@?$AAn?$AAN?$AAe?$AAw?$AAL?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0@
  00033	68 00 00 00 00	 push	 OFFSET ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@
  00038	6a 00		 push	 0
  0003a	68 37 02 00 00	 push	 567			; 00000237H
  0003f	68 00 00 00 00	 push	 OFFSET ??_C@_1NO@CMNIKGIF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  00044	6a 02		 push	 2
  00046	e8 00 00 00 00	 call	 __CrtDbgReportW
  0004b	83 c4 18	 add	 esp, 24			; 00000018H
  0004e	83 f8 01	 cmp	 eax, 1
  00051	75 01		 jne	 SHORT $LN3@ReleaseBuf
  00053	cc		 int	 3
$LN3@ReleaseBuf:

; 568  : 		SetLength( nNewLength );

  00054	ff 75 08	 push	 DWORD PTR _nNewLength$[ebp]
  00057	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0005a	e8 00 00 00 00	 call	 ?SetLength@?$CSimpleStringT@_W$0A@@ATL@@AAEXH@Z ; ATL::CSimpleStringT<wchar_t,0>::SetLength

; 569  : 	}

  0005f	5f		 pop	 edi
  00060	5e		 pop	 esi
  00061	5b		 pop	 ebx
  00062	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00068	3b ec		 cmp	 ebp, esp
  0006a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006f	c9		 leave
  00070	c2 04 00	 ret	 4
?ReleaseBufferSetLength@?$CSimpleStringT@_W$0A@@ATL@@QAEXH@Z ENDP ; ATL::CSimpleStringT<wchar_t,0>::ReleaseBufferSetLength
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.34.31933\atlmfc\include\atlsimpstr.h
;	COMDAT ?GetString@?$CSimpleStringT@_W$0A@@ATL@@QBEPB_WXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetString@?$CSimpleStringT@_W$0A@@ATL@@QBEPB_WXZ PROC	; ATL::CSimpleStringT<wchar_t,0>::GetString, COMDAT
; _this$ = ecx

; 528  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	6a 03		 push	 3
  00012	59		 pop	 ecx
  00013	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00018	f3 ab		 rep stosd
  0001a	59		 pop	 ecx
  0001b	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __05D8B7B7_atlsimpstr@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 529  : 		return( m_pszData );

  00028	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	8b 00		 mov	 eax, DWORD PTR [eax]

; 530  : 	}

  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00036	3b ec		 cmp	 ebp, esp
  00038	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003d	c9		 leave
  0003e	c3		 ret	 0
?GetString@?$CSimpleStringT@_W$0A@@ATL@@QBEPB_WXZ ENDP	; ATL::CSimpleStringT<wchar_t,0>::GetString
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.34.31933\atlmfc\include\atlsimpstr.h
;	COMDAT ?GetLength@?$CSimpleStringT@_W$0A@@ATL@@QBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetLength@?$CSimpleStringT@_W$0A@@ATL@@QBEHXZ PROC	; ATL::CSimpleStringT<wchar_t,0>::GetLength, COMDAT
; _this$ = ecx

; 518  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	6a 03		 push	 3
  00012	59		 pop	 ecx
  00013	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00018	f3 ab		 rep stosd
  0001a	59		 pop	 ecx
  0001b	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __05D8B7B7_atlsimpstr@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 519  : 		return( GetData()->nDataLength );

  00028	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002b	e8 00 00 00 00	 call	 ?GetData@?$CSimpleStringT@_W$0A@@ATL@@ABEPAUCStringData@2@XZ ; ATL::CSimpleStringT<wchar_t,0>::GetData
  00030	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 520  : 	}

  00033	5f		 pop	 edi
  00034	5e		 pop	 esi
  00035	5b		 pop	 ebx
  00036	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003c	3b ec		 cmp	 ebp, esp
  0003e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00043	c9		 leave
  00044	c3		 ret	 0
?GetLength@?$CSimpleStringT@_W$0A@@ATL@@QBEHXZ ENDP	; ATL::CSimpleStringT<wchar_t,0>::GetLength
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.34.31933\atlmfc\include\atlsimpstr.h
;	COMDAT ?GetBuffer@?$CSimpleStringT@_W$0A@@ATL@@QAEPA_WH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_nMinBufferLength$ = 8					; size = 4
?GetBuffer@?$CSimpleStringT@_W$0A@@ATL@@QAEPA_WH@Z PROC	; ATL::CSimpleStringT<wchar_t,0>::GetBuffer, COMDAT
; _this$ = ecx

; 507  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	6a 03		 push	 3
  00012	59		 pop	 ecx
  00013	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00018	f3 ab		 rep stosd
  0001a	59		 pop	 ecx
  0001b	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __05D8B7B7_atlsimpstr@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 508  : 		return( PrepareWrite( nMinBufferLength ) );

  00028	ff 75 08	 push	 DWORD PTR _nMinBufferLength$[ebp]
  0002b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	e8 00 00 00 00	 call	 ?PrepareWrite@?$CSimpleStringT@_W$0A@@ATL@@AAEPA_WH@Z ; ATL::CSimpleStringT<wchar_t,0>::PrepareWrite

; 509  : 	}

  00033	5f		 pop	 edi
  00034	5e		 pop	 esi
  00035	5b		 pop	 ebx
  00036	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003c	3b ec		 cmp	 ebp, esp
  0003e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00043	c9		 leave
  00044	c2 04 00	 ret	 4
?GetBuffer@?$CSimpleStringT@_W$0A@@ATL@@QAEPA_WH@Z ENDP	; ATL::CSimpleStringT<wchar_t,0>::GetBuffer
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.34.31933\atlmfc\include\atlsimpstr.h
;	COMDAT ?GetAllocLength@?$CSimpleStringT@_W$0A@@ATL@@QBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetAllocLength@?$CSimpleStringT@_W$0A@@ATL@@QBEHXZ PROC ; ATL::CSimpleStringT<wchar_t,0>::GetAllocLength, COMDAT
; _this$ = ecx

; 485  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	6a 03		 push	 3
  00012	59		 pop	 ecx
  00013	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00018	f3 ab		 rep stosd
  0001a	59		 pop	 ecx
  0001b	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __05D8B7B7_atlsimpstr@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 486  : 		return( GetData()->nAllocLength );

  00028	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002b	e8 00 00 00 00	 call	 ?GetData@?$CSimpleStringT@_W$0A@@ATL@@ABEPAUCStringData@2@XZ ; ATL::CSimpleStringT<wchar_t,0>::GetData
  00030	8b 40 08	 mov	 eax, DWORD PTR [eax+8]

; 487  : 	}

  00033	5f		 pop	 edi
  00034	5e		 pop	 esi
  00035	5b		 pop	 ebx
  00036	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003c	3b ec		 cmp	 ebp, esp
  0003e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00043	c9		 leave
  00044	c3		 ret	 0
?GetAllocLength@?$CSimpleStringT@_W$0A@@ATL@@QBEHXZ ENDP ; ATL::CSimpleStringT<wchar_t,0>::GetAllocLength
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.34.31933\atlmfc\include\atlsimpstr.h
;	COMDAT ?Empty@?$CSimpleStringT@_W$0A@@ATL@@QAEXXZ
_TEXT	SEGMENT
_pNewData$1 = -44					; size = 4
_pStringMgr$ = -32					; size = 4
_pOldData$ = -20					; size = 4
_this$ = -8						; size = 4
?Empty@?$CSimpleStringT@_W$0A@@ATL@@QAEXXZ PROC		; ATL::CSimpleStringT<wchar_t,0>::Empty, COMDAT
; _this$ = ecx

; 436  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec f0 00 00
	00		 sub	 esp, 240		; 000000f0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d d0	 lea	 edi, DWORD PTR [ebp-48]
  00010	6a 0c		 push	 12			; 0000000cH
  00012	59		 pop	 ecx
  00013	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00018	f3 ab		 rep stosd
  0001a	59		 pop	 ecx
  0001b	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __05D8B7B7_atlsimpstr@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 437  : 		CStringData* pOldData = GetData();

  00028	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002b	e8 00 00 00 00	 call	 ?GetData@?$CSimpleStringT@_W$0A@@ATL@@ABEPAUCStringData@2@XZ ; ATL::CSimpleStringT<wchar_t,0>::GetData
  00030	89 45 ec	 mov	 DWORD PTR _pOldData$[ebp], eax

; 438  : 		IAtlStringMgr* pStringMgr = pOldData->pStringMgr;

  00033	8b 45 ec	 mov	 eax, DWORD PTR _pOldData$[ebp]
  00036	8b 00		 mov	 eax, DWORD PTR [eax]
  00038	89 45 e0	 mov	 DWORD PTR _pStringMgr$[ebp], eax

; 439  : 		if( pOldData->nDataLength == 0 )

  0003b	8b 45 ec	 mov	 eax, DWORD PTR _pOldData$[ebp]
  0003e	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00042	75 02		 jne	 SHORT $LN2@Empty

; 440  : 		{
; 441  : 			return;

  00044	eb 45		 jmp	 SHORT $LN1@Empty
$LN2@Empty:

; 442  : 		}
; 443  : 
; 444  : 		if( pOldData->IsLocked() )

  00046	8b 4d ec	 mov	 ecx, DWORD PTR _pOldData$[ebp]
  00049	e8 00 00 00 00	 call	 ?IsLocked@CStringData@ATL@@QBE_NXZ ; ATL::CStringData::IsLocked
  0004e	0f b6 c0	 movzx	 eax, al
  00051	85 c0		 test	 eax, eax
  00053	74 0c		 je	 SHORT $LN3@Empty

; 445  : 		{
; 446  : 			// Don't reallocate a locked buffer that's shrinking
; 447  : 			SetLength( 0 );

  00055	6a 00		 push	 0
  00057	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0005a	e8 00 00 00 00	 call	 ?SetLength@?$CSimpleStringT@_W$0A@@ATL@@AAEXH@Z ; ATL::CSimpleStringT<wchar_t,0>::SetLength

; 448  : 		}

  0005f	eb 2a		 jmp	 SHORT $LN1@Empty
$LN3@Empty:

; 449  : 		else
; 450  : 		{
; 451  : 			pOldData->Release();

  00061	8b 4d ec	 mov	 ecx, DWORD PTR _pOldData$[ebp]
  00064	e8 00 00 00 00	 call	 ?Release@CStringData@ATL@@QAEXXZ ; ATL::CStringData::Release

; 452  : 			CStringData* pNewData = pStringMgr->GetNilString();

  00069	8b 45 e0	 mov	 eax, DWORD PTR _pStringMgr$[ebp]
  0006c	8b 00		 mov	 eax, DWORD PTR [eax]
  0006e	8b f4		 mov	 esi, esp
  00070	8b 4d e0	 mov	 ecx, DWORD PTR _pStringMgr$[ebp]
  00073	ff 50 0c	 call	 DWORD PTR [eax+12]
  00076	3b f4		 cmp	 esi, esp
  00078	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007d	89 45 d4	 mov	 DWORD PTR _pNewData$1[ebp], eax

; 453  : 			Attach( pNewData );

  00080	ff 75 d4	 push	 DWORD PTR _pNewData$1[ebp]
  00083	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00086	e8 00 00 00 00	 call	 ?Attach@?$CSimpleStringT@_W$0A@@ATL@@AAEXPAUCStringData@2@@Z ; ATL::CSimpleStringT<wchar_t,0>::Attach
$LN1@Empty:

; 454  : 		}
; 455  : 	}

  0008b	5f		 pop	 edi
  0008c	5e		 pop	 esi
  0008d	5b		 pop	 ebx
  0008e	81 c4 f0 00 00
	00		 add	 esp, 240		; 000000f0H
  00094	3b ec		 cmp	 ebp, esp
  00096	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0009b	c9		 leave
  0009c	c3		 ret	 0
?Empty@?$CSimpleStringT@_W$0A@@ATL@@QAEXXZ ENDP		; ATL::CSimpleStringT<wchar_t,0>::Empty
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.34.31933\atlmfc\include\atlsimpstr.h
;	COMDAT ??4?$CSimpleStringT@_W$0A@@ATL@@QAEAAV01@PB_W@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pszSrc$ = 8						; size = 4
??4?$CSimpleStringT@_W$0A@@ATL@@QAEAAV01@PB_W@Z PROC	; ATL::CSimpleStringT<wchar_t,0>::operator=, COMDAT
; _this$ = ecx

; 313  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	6a 03		 push	 3
  00012	59		 pop	 ecx
  00013	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00018	f3 ab		 rep stosd
  0001a	59		 pop	 ecx
  0001b	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __05D8B7B7_atlsimpstr@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 314  : 		SetString( pszSrc );

  00028	ff 75 08	 push	 DWORD PTR _pszSrc$[ebp]
  0002b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	e8 00 00 00 00	 call	 ?SetString@?$CSimpleStringT@_W$0A@@ATL@@QAEXPB_W@Z ; ATL::CSimpleStringT<wchar_t,0>::SetString

; 315  : 
; 316  : 		return( *this );

  00033	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]

; 317  : 	}

  00036	5f		 pop	 edi
  00037	5e		 pop	 esi
  00038	5b		 pop	 ebx
  00039	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003f	3b ec		 cmp	 ebp, esp
  00041	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00046	c9		 leave
  00047	c2 04 00	 ret	 4
??4?$CSimpleStringT@_W$0A@@ATL@@QAEAAV01@PB_W@Z ENDP	; ATL::CSimpleStringT<wchar_t,0>::operator=
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.34.31933\atlmfc\include\atlsimpstr.h
;	COMDAT ??1?$CSimpleStringT@_W$0A@@ATL@@QAE@XZ
_TEXT	SEGMENT
_pData$ = -20						; size = 4
_this$ = -8						; size = 4
??1?$CSimpleStringT@_W$0A@@ATL@@QAE@XZ PROC		; ATL::CSimpleStringT<wchar_t,0>::~CSimpleStringT<wchar_t,0>, COMDAT
; _this$ = ecx

; 260  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d e8	 lea	 edi, DWORD PTR [ebp-24]
  00010	6a 06		 push	 6
  00012	59		 pop	 ecx
  00013	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00018	f3 ab		 rep stosd
  0001a	59		 pop	 ecx
  0001b	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __05D8B7B7_atlsimpstr@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 261  : 		CStringData* pData = GetData();

  00028	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002b	e8 00 00 00 00	 call	 ?GetData@?$CSimpleStringT@_W$0A@@ATL@@ABEPAUCStringData@2@XZ ; ATL::CSimpleStringT<wchar_t,0>::GetData
  00030	89 45 ec	 mov	 DWORD PTR _pData$[ebp], eax

; 262  : 		pData->Release();

  00033	8b 4d ec	 mov	 ecx, DWORD PTR _pData$[ebp]
  00036	e8 00 00 00 00	 call	 ?Release@CStringData@ATL@@QAEXXZ ; ATL::CStringData::Release

; 263  : 	}

  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
  0003d	5b		 pop	 ebx
  0003e	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00044	3b ec		 cmp	 ebp, esp
  00046	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004b	c9		 leave
  0004c	c3		 ret	 0
??1?$CSimpleStringT@_W$0A@@ATL@@QAE@XZ ENDP		; ATL::CSimpleStringT<wchar_t,0>::~CSimpleStringT<wchar_t,0>
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.34.31933\atlmfc\include\atlsimpstr.h
;	COMDAT ??0?$CSimpleStringT@_W$0A@@ATL@@QAE@PAUIAtlStringMgr@1@@Z
_TEXT	SEGMENT
tv65 = -232						; size = 4
_pData$ = -32						; size = 4
___atl_condVal$1 = -20					; size = 4
_this$ = -8						; size = 4
_pStringMgr$ = 8					; size = 4
??0?$CSimpleStringT@_W$0A@@ATL@@QAE@PAUIAtlStringMgr@1@@Z PROC ; ATL::CSimpleStringT<wchar_t,0>::CSimpleStringT<wchar_t,0>, COMDAT
; _this$ = ecx

; 203  : 	explicit CSimpleStringT(_Inout_ IAtlStringMgr* pStringMgr)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e8 00 00
	00		 sub	 esp, 232		; 000000e8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d d8	 lea	 edi, DWORD PTR [ebp-40]
  00010	6a 0a		 push	 10			; 0000000aH
  00012	59		 pop	 ecx
  00013	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00018	f3 ab		 rep stosd
  0001a	59		 pop	 ecx
  0001b	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __05D8B7B7_atlsimpstr@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
$LN4@CSimpleStr:

; 204  : 	{
; 205  : 		ATLENSURE( pStringMgr != NULL );

  00028	83 7d 08 00	 cmp	 DWORD PTR _pStringMgr$[ebp], 0
  0002c	74 0c		 je	 SHORT $LN10@CSimpleStr
  0002e	c7 85 18 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv65[ebp], 1
  00038	eb 07		 jmp	 SHORT $LN11@CSimpleStr
$LN10@CSimpleStr:
  0003a	83 a5 18 ff ff
	ff 00		 and	 DWORD PTR tv65[ebp], 0
$LN11@CSimpleStr:
  00041	8b 85 18 ff ff
	ff		 mov	 eax, DWORD PTR tv65[ebp]
  00047	89 45 ec	 mov	 DWORD PTR ___atl_condVal$1[ebp], eax
$LN7@CSimpleStr:
  0004a	83 7d ec 00	 cmp	 DWORD PTR ___atl_condVal$1[ebp], 0
  0004e	75 26		 jne	 SHORT $LN5@CSimpleStr
  00050	68 00 00 00 00	 push	 OFFSET ??_C@_1BM@GBBOFEAE@?$AA_?$AA_?$AAa?$AAt?$AAl?$AA_?$AAc?$AAo?$AAn?$AAd?$AAV?$AAa?$AAl@
  00055	68 00 00 00 00	 push	 OFFSET ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@
  0005a	6a 00		 push	 0
  0005c	68 cd 00 00 00	 push	 205			; 000000cdH
  00061	68 00 00 00 00	 push	 OFFSET ??_C@_1NO@CMNIKGIF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  00066	6a 02		 push	 2
  00068	e8 00 00 00 00	 call	 __CrtDbgReportW
  0006d	83 c4 18	 add	 esp, 24			; 00000018H
  00070	83 f8 01	 cmp	 eax, 1
  00073	75 01		 jne	 SHORT $LN5@CSimpleStr
  00075	cc		 int	 3
$LN5@CSimpleStr:
  00076	33 c0		 xor	 eax, eax
  00078	75 d0		 jne	 SHORT $LN7@CSimpleStr
  0007a	83 7d ec 00	 cmp	 DWORD PTR ___atl_condVal$1[ebp], 0
  0007e	75 0a		 jne	 SHORT $LN2@CSimpleStr
  00080	68 05 40 00 80	 push	 -2147467259		; 80004005H
  00085	e8 00 00 00 00	 call	 ?AtlThrowImpl@ATL@@YGXJ@Z ; ATL::AtlThrowImpl
$LN2@CSimpleStr:
  0008a	33 c0		 xor	 eax, eax
  0008c	75 9a		 jne	 SHORT $LN4@CSimpleStr

; 206  : 		CStringData* pData = pStringMgr->GetNilString();

  0008e	8b 45 08	 mov	 eax, DWORD PTR _pStringMgr$[ebp]
  00091	8b 00		 mov	 eax, DWORD PTR [eax]
  00093	8b f4		 mov	 esi, esp
  00095	8b 4d 08	 mov	 ecx, DWORD PTR _pStringMgr$[ebp]
  00098	ff 50 0c	 call	 DWORD PTR [eax+12]
  0009b	3b f4		 cmp	 esi, esp
  0009d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a2	89 45 e0	 mov	 DWORD PTR _pData$[ebp], eax

; 207  : 		Attach( pData );

  000a5	ff 75 e0	 push	 DWORD PTR _pData$[ebp]
  000a8	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000ab	e8 00 00 00 00	 call	 ?Attach@?$CSimpleStringT@_W$0A@@ATL@@AAEXPAUCStringData@2@@Z ; ATL::CSimpleStringT<wchar_t,0>::Attach

; 208  : 	}

  000b0	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
$LN9@CSimpleStr:
  000b3	5f		 pop	 edi
  000b4	5e		 pop	 esi
  000b5	5b		 pop	 ebx
  000b6	81 c4 e8 00 00
	00		 add	 esp, 232		; 000000e8H
  000bc	3b ec		 cmp	 ebp, esp
  000be	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c3	c9		 leave
  000c4	c2 04 00	 ret	 4
??0?$CSimpleStringT@_W$0A@@ATL@@QAE@PAUIAtlStringMgr@1@@Z ENDP ; ATL::CSimpleStringT<wchar_t,0>::CSimpleStringT<wchar_t,0>
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.34.31933\atlmfc\include\cstringt.h
;	COMDAT ?ConvertToBaseType@?$ChTraitsCRT@_W@ATL@@SAXPA_WHPB_WH@Z
_TEXT	SEGMENT
_pszDest$ = 8						; size = 4
_nDestLength$ = 12					; size = 4
_pszSrc$ = 16						; size = 4
_nSrcLength$ = 20					; size = 4
?ConvertToBaseType@?$ChTraitsCRT@_W@ATL@@SAXPA_WHPB_WH@Z PROC ; ATL::ChTraitsCRT<wchar_t>::ConvertToBaseType, COMDAT

; 789  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __B625A68F_cstringt@h
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 790  : 		if (nSrcLength == -1) { nSrcLength=1 + GetBaseTypeLength(pszSrc); }

  00021	83 7d 14 ff	 cmp	 DWORD PTR _nSrcLength$[ebp], -1
  00025	75 0d		 jne	 SHORT $LN2@ConvertToB
  00027	ff 75 10	 push	 DWORD PTR _pszSrc$[ebp]
  0002a	e8 00 00 00 00	 call	 ?GetBaseTypeLength@?$ChTraitsCRT@_W@ATL@@SAHPB_W@Z ; ATL::ChTraitsCRT<wchar_t>::GetBaseTypeLength
  0002f	59		 pop	 ecx
  00030	40		 inc	 eax
  00031	89 45 14	 mov	 DWORD PTR _nSrcLength$[ebp], eax
$LN2@ConvertToB:

; 791  : 		// nLen is in wchar_ts
; 792  : 		Checked::wmemcpy_s(pszDest, nDestLength, pszSrc, nSrcLength);

  00034	ff 75 14	 push	 DWORD PTR _nSrcLength$[ebp]
  00037	ff 75 10	 push	 DWORD PTR _pszSrc$[ebp]
  0003a	ff 75 0c	 push	 DWORD PTR _nDestLength$[ebp]
  0003d	ff 75 08	 push	 DWORD PTR _pszDest$[ebp]
  00040	e8 00 00 00 00	 call	 ?wmemcpy_s@Checked@ATL@@YAXPA_WIPB_WI@Z ; ATL::Checked::wmemcpy_s
  00045	83 c4 10	 add	 esp, 16			; 00000010H

; 793  : 	}

  00048	5f		 pop	 edi
  00049	5e		 pop	 esi
  0004a	5b		 pop	 ebx
  0004b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00051	3b ec		 cmp	 ebp, esp
  00053	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00058	c9		 leave
  00059	c3		 ret	 0
?ConvertToBaseType@?$ChTraitsCRT@_W@ATL@@SAXPA_WHPB_WH@Z ENDP ; ATL::ChTraitsCRT<wchar_t>::ConvertToBaseType
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.34.31933\atlmfc\include\cstringt.h
;	COMDAT ?GetBaseTypeLength@?$ChTraitsCRT@_W@ATL@@SAHPB_WH@Z
_TEXT	SEGMENT
_pszSrc$ = 8						; size = 4
_nLength$ = 12						; size = 4
?GetBaseTypeLength@?$ChTraitsCRT@_W@ATL@@SAHPB_WH@Z PROC ; ATL::ChTraitsCRT<wchar_t>::GetBaseTypeLength, COMDAT

; 768  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __B625A68F_cstringt@h
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 769  : 		(void)pszSrc;
; 770  : 		// Returns required buffer size in wchar_ts
; 771  : 		return nLength;

  00021	8b 45 0c	 mov	 eax, DWORD PTR _nLength$[ebp]

; 772  : 	}

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0002d	3b ec		 cmp	 ebp, esp
  0002f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00034	c9		 leave
  00035	c3		 ret	 0
?GetBaseTypeLength@?$ChTraitsCRT@_W@ATL@@SAHPB_WH@Z ENDP ; ATL::ChTraitsCRT<wchar_t>::GetBaseTypeLength
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.34.31933\atlmfc\include\cstringt.h
;	COMDAT ?GetBaseTypeLength@?$ChTraitsCRT@_W@ATL@@SAHPB_W@Z
_TEXT	SEGMENT
_pszSrc$ = 8						; size = 4
?GetBaseTypeLength@?$ChTraitsCRT@_W@ATL@@SAHPB_W@Z PROC	; ATL::ChTraitsCRT<wchar_t>::GetBaseTypeLength, COMDAT

; 760  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __B625A68F_cstringt@h
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 761  : 		// Returns required buffer size in wchar_ts
; 762  : 		return AtlStrLen( pszSrc );

  00021	ff 75 08	 push	 DWORD PTR _pszSrc$[ebp]
  00024	e8 00 00 00 00	 call	 ?AtlStrLen@ATL@@YAHPB_W@Z ; ATL::AtlStrLen
  00029	59		 pop	 ecx

; 763  : 	}

  0002a	5f		 pop	 edi
  0002b	5e		 pop	 esi
  0002c	5b		 pop	 ebx
  0002d	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00033	3b ec		 cmp	 ebp, esp
  00035	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003a	c9		 leave
  0003b	c3		 ret	 0
?GetBaseTypeLength@?$ChTraitsCRT@_W@ATL@@SAHPB_W@Z ENDP	; ATL::ChTraitsCRT<wchar_t>::GetBaseTypeLength
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.34.31933\atlmfc\include\atlsimpstr.h
;	COMDAT ?Release@CStringData@ATL@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?Release@CStringData@ATL@@QAEXXZ PROC			; ATL::CStringData::Release, COMDAT
; _this$ = ecx

; 85   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	6a 03		 push	 3
  00012	59		 pop	 ecx
  00013	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00018	f3 ab		 rep stosd
  0001a	59		 pop	 ecx
  0001b	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __05D8B7B7_atlsimpstr@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 86   : 		ATLASSERT( nRefs != 0 );

  00028	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  0002f	75 23		 jne	 SHORT $LN4@Release
  00031	68 00 00 00 00	 push	 OFFSET ??_C@_1BG@GPELCNED@?$AAn?$AAR?$AAe?$AAf?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0@
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@
  0003b	6a 00		 push	 0
  0003d	6a 56		 push	 86			; 00000056H
  0003f	68 00 00 00 00	 push	 OFFSET ??_C@_1NO@CMNIKGIF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  00044	6a 02		 push	 2
  00046	e8 00 00 00 00	 call	 __CrtDbgReportW
  0004b	83 c4 18	 add	 esp, 24			; 00000018H
  0004e	83 f8 01	 cmp	 eax, 1
  00051	75 01		 jne	 SHORT $LN4@Release
  00053	cc		 int	 3
$LN4@Release:

; 87   : 
; 88   : 		if( _InterlockedDecrement( &nRefs ) <= 0 )

  00054	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00057	83 c0 0c	 add	 eax, 12			; 0000000cH
  0005a	83 c9 ff	 or	 ecx, -1
  0005d	f0 0f c1 08	 lock	  xadd	 DWORD PTR [eax], ecx
  00061	49		 dec	 ecx
  00062	85 c9		 test	 ecx, ecx
  00064	7f 1b		 jg	 SHORT $LN1@Release

; 89   : 		{
; 90   : 			pStringMgr->Free( this );

  00066	8b f4		 mov	 esi, esp
  00068	ff 75 f8	 push	 DWORD PTR _this$[ebp]
  0006b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0006e	8b 00		 mov	 eax, DWORD PTR [eax]
  00070	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00073	8b 00		 mov	 eax, DWORD PTR [eax]
  00075	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00077	ff 50 04	 call	 DWORD PTR [eax+4]
  0007a	3b f4		 cmp	 esi, esp
  0007c	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@Release:

; 91   : 		}
; 92   : 	}

  00081	5f		 pop	 edi
  00082	5e		 pop	 esi
  00083	5b		 pop	 ebx
  00084	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0008a	3b ec		 cmp	 ebp, esp
  0008c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00091	c9		 leave
  00092	c3		 ret	 0
?Release@CStringData@ATL@@QAEXXZ ENDP			; ATL::CStringData::Release
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.34.31933\atlmfc\include\atlsimpstr.h
;	COMDAT ?IsShared@CStringData@ATL@@QBE_NXZ
_TEXT	SEGMENT
tv66 = -208						; size = 4
_this$ = -8						; size = 4
?IsShared@CStringData@ATL@@QBE_NXZ PROC			; ATL::CStringData::IsShared, COMDAT
; _this$ = ecx

; 72   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f0	 lea	 edi, DWORD PTR [ebp-16]
  00010	6a 04		 push	 4
  00012	59		 pop	 ecx
  00013	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00018	f3 ab		 rep stosd
  0001a	59		 pop	 ecx
  0001b	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __05D8B7B7_atlsimpstr@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 73   : 		return( nRefs > 1 );

  00028	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	83 78 0c 01	 cmp	 DWORD PTR [eax+12], 1
  0002f	7e 0c		 jle	 SHORT $LN3@IsShared
  00031	c7 85 30 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv66[ebp], 1
  0003b	eb 07		 jmp	 SHORT $LN4@IsShared
$LN3@IsShared:
  0003d	83 a5 30 ff ff
	ff 00		 and	 DWORD PTR tv66[ebp], 0
$LN4@IsShared:
  00044	8a 85 30 ff ff
	ff		 mov	 al, BYTE PTR tv66[ebp]

; 74   : 	}

  0004a	5f		 pop	 edi
  0004b	5e		 pop	 esi
  0004c	5b		 pop	 ebx
  0004d	81 c4 d0 00 00
	00		 add	 esp, 208		; 000000d0H
  00053	3b ec		 cmp	 ebp, esp
  00055	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005a	c9		 leave
  0005b	c3		 ret	 0
?IsShared@CStringData@ATL@@QBE_NXZ ENDP			; ATL::CStringData::IsShared
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.34.31933\atlmfc\include\atlsimpstr.h
;	COMDAT ?IsLocked@CStringData@ATL@@QBE_NXZ
_TEXT	SEGMENT
tv66 = -208						; size = 4
_this$ = -8						; size = 4
?IsLocked@CStringData@ATL@@QBE_NXZ PROC			; ATL::CStringData::IsLocked, COMDAT
; _this$ = ecx

; 68   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f0	 lea	 edi, DWORD PTR [ebp-16]
  00010	6a 04		 push	 4
  00012	59		 pop	 ecx
  00013	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00018	f3 ab		 rep stosd
  0001a	59		 pop	 ecx
  0001b	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __05D8B7B7_atlsimpstr@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 69   : 		return nRefs < 0;

  00028	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  0002f	7d 0c		 jge	 SHORT $LN3@IsLocked
  00031	c7 85 30 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv66[ebp], 1
  0003b	eb 07		 jmp	 SHORT $LN4@IsLocked
$LN3@IsLocked:
  0003d	83 a5 30 ff ff
	ff 00		 and	 DWORD PTR tv66[ebp], 0
$LN4@IsLocked:
  00044	8a 85 30 ff ff
	ff		 mov	 al, BYTE PTR tv66[ebp]

; 70   : 	}

  0004a	5f		 pop	 edi
  0004b	5e		 pop	 esi
  0004c	5b		 pop	 ebx
  0004d	81 c4 d0 00 00
	00		 add	 esp, 208		; 000000d0H
  00053	3b ec		 cmp	 ebp, esp
  00055	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005a	c9		 leave
  0005b	c3		 ret	 0
?IsLocked@CStringData@ATL@@QBE_NXZ ENDP			; ATL::CStringData::IsLocked
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.34.31933\atlmfc\include\atlsimpstr.h
;	COMDAT ?data@CStringData@ATL@@QAEPAXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?data@CStringData@ATL@@QAEPAXXZ PROC			; ATL::CStringData::data, COMDAT
; _this$ = ecx

; 58   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	6a 03		 push	 3
  00012	59		 pop	 ecx
  00013	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00018	f3 ab		 rep stosd
  0001a	59		 pop	 ecx
  0001b	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __05D8B7B7_atlsimpstr@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 59   : 		return (this+1);

  00028	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	83 c0 10	 add	 eax, 16			; 00000010H

; 60   : 	}

  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	5b		 pop	 ebx
  00031	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00037	3b ec		 cmp	 ebp, esp
  00039	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003e	c9		 leave
  0003f	c3		 ret	 0
?data@CStringData@ATL@@QAEPAXXZ ENDP			; ATL::CStringData::data
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.34.31933\atlmfc\include\atlcore.h
;	COMDAT ?AtlGetStringResourceImage@ATL@@YAPBUATLSTRINGRESOURCEIMAGE@1@PAUHINSTANCE__@@I@Z
_TEXT	SEGMENT
_hResource$ = -8					; size = 4
_hInstance$ = 8						; size = 4
_id$ = 12						; size = 4
?AtlGetStringResourceImage@ATL@@YAPBUATLSTRINGRESOURCEIMAGE@1@PAUHINSTANCE__@@I@Z PROC ; ATL::AtlGetStringResourceImage, COMDAT

; 370  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  0000f	6a 03		 push	 3
  00011	59		 pop	 ecx
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	b9 00 00 00 00	 mov	 ecx, OFFSET __B2E308CD_atlcore@h
  0001e	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 371  : 	HRSRC hResource;
; 372  : 	/*
; 373  : 		The and operation (& static_cast<WORD>(~0)) protects the expression from being greater
; 374  : 		than WORD - this would cause a runtime error when the application is compiled with /RTCc flag.
; 375  : 	*/
; 376  : 	hResource = ::FindResourceW(hInstance, MAKEINTRESOURCEW( (((id>>4)+1) & static_cast<WORD>(~0)) ), (LPWSTR) RT_STRING);

  00023	8b f4		 mov	 esi, esp
  00025	6a 06		 push	 6
  00027	8b 45 0c	 mov	 eax, DWORD PTR _id$[ebp]
  0002a	c1 e8 04	 shr	 eax, 4
  0002d	40		 inc	 eax
  0002e	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00033	0f b7 c0	 movzx	 eax, ax
  00036	50		 push	 eax
  00037	ff 75 08	 push	 DWORD PTR _hInstance$[ebp]
  0003a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__FindResourceW@12
  00040	3b f4		 cmp	 esi, esp
  00042	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00047	89 45 f8	 mov	 DWORD PTR _hResource$[ebp], eax

; 377  : 	if( hResource == NULL )

  0004a	83 7d f8 00	 cmp	 DWORD PTR _hResource$[ebp], 0
  0004e	75 04		 jne	 SHORT $LN2@AtlGetStri

; 378  : 	{
; 379  : 		return( NULL );

  00050	33 c0		 xor	 eax, eax
  00052	eb 11		 jmp	 SHORT $LN1@AtlGetStri
$LN2@AtlGetStri:

; 380  : 	}
; 381  : 
; 382  : 	return _AtlGetStringResourceImage( hInstance, hResource, id );

  00054	ff 75 0c	 push	 DWORD PTR _id$[ebp]
  00057	ff 75 f8	 push	 DWORD PTR _hResource$[ebp]
  0005a	ff 75 08	 push	 DWORD PTR _hInstance$[ebp]
  0005d	e8 00 00 00 00	 call	 ?_AtlGetStringResourceImage@ATL@@YAPBUATLSTRINGRESOURCEIMAGE@1@PAUHINSTANCE__@@PAUHRSRC__@@I@Z ; ATL::_AtlGetStringResourceImage
  00062	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@AtlGetStri:

; 383  : }

  00065	5f		 pop	 edi
  00066	5e		 pop	 esi
  00067	5b		 pop	 ebx
  00068	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0006e	3b ec		 cmp	 ebp, esp
  00070	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00075	c9		 leave
  00076	c3		 ret	 0
?AtlGetStringResourceImage@ATL@@YAPBUATLSTRINGRESOURCEIMAGE@1@PAUHINSTANCE__@@I@Z ENDP ; ATL::AtlGetStringResourceImage
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.34.31933\atlmfc\include\atlcore.h
;	COMDAT ?_AtlGetStringResourceImage@ATL@@YAPBUATLSTRINGRESOURCEIMAGE@1@PAUHINSTANCE__@@PAUHRSRC__@@I@Z
_TEXT	SEGMENT
_iIndex$ = -56						; size = 4
_hGlobal$ = -44						; size = 4
_nResourceSize$ = -32					; size = 4
_pImageEnd$ = -20					; size = 4
_pImage$ = -8						; size = 4
_hInstance$ = 8						; size = 4
_hResource$ = 12					; size = 4
_id$ = 16						; size = 4
?_AtlGetStringResourceImage@ATL@@YAPBUATLSTRINGRESOURCEIMAGE@1@PAUHINSTANCE__@@PAUHRSRC__@@I@Z PROC ; ATL::_AtlGetStringResourceImage, COMDAT

; 327  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec fc 00 00
	00		 sub	 esp, 252		; 000000fcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d 7d c4	 lea	 edi, DWORD PTR [ebp-60]
  0000f	6a 0f		 push	 15			; 0000000fH
  00011	59		 pop	 ecx
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	b9 00 00 00 00	 mov	 ecx, OFFSET __B2E308CD_atlcore@h
  0001e	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 328  : 	const ATLSTRINGRESOURCEIMAGE* pImage;
; 329  : 	const ATLSTRINGRESOURCEIMAGE* pImageEnd;
; 330  : 	ULONG nResourceSize;
; 331  : 	HGLOBAL hGlobal;
; 332  : 	UINT iIndex;
; 333  : 
; 334  : 	hGlobal = ::LoadResource( hInstance, hResource );

  00023	8b f4		 mov	 esi, esp
  00025	ff 75 0c	 push	 DWORD PTR _hResource$[ebp]
  00028	ff 75 08	 push	 DWORD PTR _hInstance$[ebp]
  0002b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadResource@8
  00031	3b f4		 cmp	 esi, esp
  00033	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00038	89 45 d4	 mov	 DWORD PTR _hGlobal$[ebp], eax

; 335  : 	if( hGlobal == NULL )

  0003b	83 7d d4 00	 cmp	 DWORD PTR _hGlobal$[ebp], 0
  0003f	75 07		 jne	 SHORT $LN4@AtlGetStri

; 336  : 	{
; 337  : 		return( NULL );

  00041	33 c0		 xor	 eax, eax
  00043	e9 8d 00 00 00	 jmp	 $LN1@AtlGetStri
$LN4@AtlGetStri:

; 338  : 	}
; 339  : 
; 340  : 	pImage = (const ATLSTRINGRESOURCEIMAGE*)::LockResource( hGlobal );

  00048	8b f4		 mov	 esi, esp
  0004a	ff 75 d4	 push	 DWORD PTR _hGlobal$[ebp]
  0004d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LockResource@4
  00053	3b f4		 cmp	 esi, esp
  00055	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005a	89 45 f8	 mov	 DWORD PTR _pImage$[ebp], eax

; 341  : 	if( pImage == NULL )

  0005d	83 7d f8 00	 cmp	 DWORD PTR _pImage$[ebp], 0
  00061	75 04		 jne	 SHORT $LN5@AtlGetStri

; 342  : 	{
; 343  : 		return( NULL );

  00063	33 c0		 xor	 eax, eax
  00065	eb 6e		 jmp	 SHORT $LN1@AtlGetStri
$LN5@AtlGetStri:

; 344  : 	}
; 345  : 
; 346  : 	nResourceSize = ::SizeofResource( hInstance, hResource );

  00067	8b f4		 mov	 esi, esp
  00069	ff 75 0c	 push	 DWORD PTR _hResource$[ebp]
  0006c	ff 75 08	 push	 DWORD PTR _hInstance$[ebp]
  0006f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SizeofResource@8
  00075	3b f4		 cmp	 esi, esp
  00077	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007c	89 45 e0	 mov	 DWORD PTR _nResourceSize$[ebp], eax

; 347  : 	pImageEnd = (const ATLSTRINGRESOURCEIMAGE*)(LPBYTE( pImage )+nResourceSize);

  0007f	8b 45 f8	 mov	 eax, DWORD PTR _pImage$[ebp]
  00082	03 45 e0	 add	 eax, DWORD PTR _nResourceSize$[ebp]
  00085	89 45 ec	 mov	 DWORD PTR _pImageEnd$[ebp], eax

; 348  : 	iIndex = id&0x000f;

  00088	8b 45 10	 mov	 eax, DWORD PTR _id$[ebp]
  0008b	83 e0 0f	 and	 eax, 15			; 0000000fH
  0008e	89 45 c8	 mov	 DWORD PTR _iIndex$[ebp], eax
$LN2@AtlGetStri:

; 349  : 
; 350  : 	while( (iIndex > 0) && (pImage < pImageEnd) )

  00091	83 7d c8 00	 cmp	 DWORD PTR _iIndex$[ebp], 0
  00095	76 21		 jbe	 SHORT $LN3@AtlGetStri
  00097	8b 45 f8	 mov	 eax, DWORD PTR _pImage$[ebp]
  0009a	3b 45 ec	 cmp	 eax, DWORD PTR _pImageEnd$[ebp]
  0009d	73 19		 jae	 SHORT $LN3@AtlGetStri

; 351  : 	{
; 352  : 		pImage = (const ATLSTRINGRESOURCEIMAGE*)(LPBYTE( pImage )+(sizeof( ATLSTRINGRESOURCEIMAGE )+(pImage->nLength*sizeof( WCHAR ))));

  0009f	8b 45 f8	 mov	 eax, DWORD PTR _pImage$[ebp]
  000a2	0f b7 00	 movzx	 eax, WORD PTR [eax]
  000a5	8b 4d f8	 mov	 ecx, DWORD PTR _pImage$[ebp]
  000a8	8d 44 41 02	 lea	 eax, DWORD PTR [ecx+eax*2+2]
  000ac	89 45 f8	 mov	 DWORD PTR _pImage$[ebp], eax

; 353  : 		iIndex--;

  000af	8b 45 c8	 mov	 eax, DWORD PTR _iIndex$[ebp]
  000b2	48		 dec	 eax
  000b3	89 45 c8	 mov	 DWORD PTR _iIndex$[ebp], eax

; 354  : 	}

  000b6	eb d9		 jmp	 SHORT $LN2@AtlGetStri
$LN3@AtlGetStri:

; 355  : 	if( pImage >= pImageEnd )

  000b8	8b 45 f8	 mov	 eax, DWORD PTR _pImage$[ebp]
  000bb	3b 45 ec	 cmp	 eax, DWORD PTR _pImageEnd$[ebp]
  000be	72 04		 jb	 SHORT $LN6@AtlGetStri

; 356  : 	{
; 357  : 		return( NULL );

  000c0	33 c0		 xor	 eax, eax
  000c2	eb 11		 jmp	 SHORT $LN1@AtlGetStri
$LN6@AtlGetStri:

; 358  : 	}
; 359  : 	if( pImage->nLength == 0 )

  000c4	8b 45 f8	 mov	 eax, DWORD PTR _pImage$[ebp]
  000c7	0f b7 00	 movzx	 eax, WORD PTR [eax]
  000ca	85 c0		 test	 eax, eax
  000cc	75 04		 jne	 SHORT $LN7@AtlGetStri

; 360  : 	{
; 361  : 		return( NULL );

  000ce	33 c0		 xor	 eax, eax
  000d0	eb 03		 jmp	 SHORT $LN1@AtlGetStri
$LN7@AtlGetStri:

; 362  : 	}
; 363  : 
; 364  : 	return( pImage );

  000d2	8b 45 f8	 mov	 eax, DWORD PTR _pImage$[ebp]
$LN1@AtlGetStri:

; 365  : }

  000d5	5f		 pop	 edi
  000d6	5e		 pop	 esi
  000d7	5b		 pop	 ebx
  000d8	81 c4 fc 00 00
	00		 add	 esp, 252		; 000000fcH
  000de	3b ec		 cmp	 ebp, esp
  000e0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000e5	c9		 leave
  000e6	c3		 ret	 0
?_AtlGetStringResourceImage@ATL@@YAPBUATLSTRINGRESOURCEIMAGE@1@PAUHINSTANCE__@@PAUHRSRC__@@I@Z ENDP ; ATL::_AtlGetStringResourceImage
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.34.31933\atlmfc\include\atlcore.h
;	COMDAT ?AtlStrLen@ATL@@YAHPB_W@Z
_TEXT	SEGMENT
_str$ = 8						; size = 4
?AtlStrLen@ATL@@YAHPB_W@Z PROC				; ATL::AtlStrLen, COMDAT

; 60   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __B2E308CD_atlcore@h
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 61   : 	if (str == NULL)

  00021	83 7d 08 00	 cmp	 DWORD PTR _str$[ebp], 0
  00025	75 04		 jne	 SHORT $LN2@AtlStrLen

; 62   : 		return 0;

  00027	33 c0		 xor	 eax, eax
  00029	eb 09		 jmp	 SHORT $LN1@AtlStrLen
$LN2@AtlStrLen:

; 63   : 	return static_cast<int>(::wcslen(str));

  0002b	ff 75 08	 push	 DWORD PTR _str$[ebp]
  0002e	e8 00 00 00 00	 call	 _wcslen
  00033	59		 pop	 ecx
$LN1@AtlStrLen:

; 64   : }

  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx
  00037	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0003d	3b ec		 cmp	 ebp, esp
  0003f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00044	c9		 leave
  00045	c3		 ret	 0
?AtlStrLen@ATL@@YAHPB_W@Z ENDP				; ATL::AtlStrLen
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.34.31933\atlmfc\include\atlchecked.h
;	COMDAT ?wmemcpy_s@Checked@ATL@@YAXPA_WIPB_WI@Z
_TEXT	SEGMENT
__S1$ = 8						; size = 4
__N1$ = 12						; size = 4
__S2$ = 16						; size = 4
__N$ = 20						; size = 4
?wmemcpy_s@Checked@ATL@@YAXPA_WIPB_WI@Z PROC		; ATL::Checked::wmemcpy_s, COMDAT

; 77   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __7381F871_atlchecked@h
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 78   : 	ATLMFC_CRT_ERRORCHECK(::wmemcpy_s(_S1, _N1, _S2, _N));

  00021	ff 75 14	 push	 DWORD PTR __N$[ebp]
  00024	ff 75 10	 push	 DWORD PTR __S2$[ebp]
  00027	ff 75 0c	 push	 DWORD PTR __N1$[ebp]
  0002a	ff 75 08	 push	 DWORD PTR __S1$[ebp]
  0002d	e8 00 00 00 00	 call	 _wmemcpy_s
  00032	83 c4 10	 add	 esp, 16			; 00000010H
  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 ?AfxCrtErrorCheck@@YAHH@Z ; AfxCrtErrorCheck
  0003b	59		 pop	 ecx

; 79   : }

  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx
  0003f	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00045	3b ec		 cmp	 ebp, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	c9		 leave
  0004d	c3		 ret	 0
?wmemcpy_s@Checked@ATL@@YAXPA_WIPB_WI@Z ENDP		; ATL::Checked::wmemcpy_s
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.34.31933\atlmfc\include\afx.h
;	COMDAT ?AfxCrtErrorCheck@@YAHH@Z
_TEXT	SEGMENT
tv64 = -196						; size = 4
_error$ = 8						; size = 4
?AfxCrtErrorCheck@@YAHH@Z PROC				; AfxCrtErrorCheck, COMDAT

; 506  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d 7d fc	 lea	 edi, DWORD PTR [ebp-4]
  0000f	33 c9		 xor	 ecx, ecx
  00011	41		 inc	 ecx
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	b9 00 00 00 00	 mov	 ecx, OFFSET __981866FA_afx@h
  0001e	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 507  : 	switch(error)

  00023	8b 45 08	 mov	 eax, DWORD PTR _error$[ebp]
  00026	89 85 3c ff ff
	ff		 mov	 DWORD PTR tv64[ebp], eax
  0002c	83 bd 3c ff ff
	ff 00		 cmp	 DWORD PTR tv64[ebp], 0
  00033	74 34		 je	 SHORT $LN8@AfxCrtErro
  00035	83 bd 3c ff ff
	ff 0c		 cmp	 DWORD PTR tv64[ebp], 12	; 0000000cH
  0003c	74 1d		 je	 SHORT $LN4@AfxCrtErro
  0003e	83 bd 3c ff ff
	ff 16		 cmp	 DWORD PTR tv64[ebp], 22	; 00000016H
  00045	74 1b		 je	 SHORT $LN6@AfxCrtErro
  00047	83 bd 3c ff ff
	ff 22		 cmp	 DWORD PTR tv64[ebp], 34	; 00000022H
  0004e	74 12		 je	 SHORT $LN6@AfxCrtErro
  00050	83 bd 3c ff ff
	ff 50		 cmp	 DWORD PTR tv64[ebp], 80	; 00000050H
  00057	74 10		 je	 SHORT $LN8@AfxCrtErro
  00059	eb 10		 jmp	 SHORT $LN9@AfxCrtErro
$LN4@AfxCrtErro:

; 508  : 	{
; 509  : 	case ENOMEM:
; 510  : 		AfxThrowMemoryException();

  0005b	e8 00 00 00 00	 call	 ?AfxThrowMemoryException@@YGXXZ ; AfxThrowMemoryException

; 511  : 		break;

  00060	eb 0e		 jmp	 SHORT $LN2@AfxCrtErro
$LN6@AfxCrtErro:

; 512  : 	case EINVAL:
; 513  : 	case ERANGE:
; 514  : 		AfxThrowInvalidArgException();

  00062	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException

; 515  : 		break;

  00067	eb 07		 jmp	 SHORT $LN2@AfxCrtErro
$LN8@AfxCrtErro:

; 516  : 	case STRUNCATE:
; 517  : 	case 0:
; 518  : 		break;

  00069	eb 05		 jmp	 SHORT $LN2@AfxCrtErro
$LN9@AfxCrtErro:

; 519  : 	default:
; 520  : 		AfxThrowInvalidArgException();

  0006b	e8 00 00 00 00	 call	 ?AfxThrowInvalidArgException@@YGXXZ ; AfxThrowInvalidArgException
$LN2@AfxCrtErro:

; 521  : 		break;
; 522  : 	}
; 523  : 	return error;

  00070	8b 45 08	 mov	 eax, DWORD PTR _error$[ebp]
$LN10@AfxCrtErro:

; 524  : }

  00073	5f		 pop	 edi
  00074	5e		 pop	 esi
  00075	5b		 pop	 ebx
  00076	81 c4 c4 00 00
	00		 add	 esp, 196		; 000000c4H
  0007c	3b ec		 cmp	 ebp, esp
  0007e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00083	c9		 leave
  00084	c3		 ret	 0
?AfxCrtErrorCheck@@YAHH@Z ENDP				; AfxCrtErrorCheck
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.34.31933\atlmfc\include\atltrace.h
;	COMDAT ??RCTraceFileAndLineInfo@ATL@@QBAXHIPB_WZZ
_TEXT	SEGMENT
_ptr$ = -36						; size = 4
_ple$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_dwCategory$ = 12					; size = 4
_nLevel$ = 16						; size = 4
_pszFmt$ = 20						; size = 4
??RCTraceFileAndLineInfo@ATL@@QBAXHIPB_WZZ PROC		; ATL::CTraceFileAndLineInfo::operator(), COMDAT

; 436  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??RCTraceFileAndLineInfo@ATL@@QBAXHIPB_WZZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec e8 00 00
	00		 sub	 esp, 232		; 000000e8H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	8d 7d cc	 lea	 edi, DWORD PTR [ebp-52]
  0001d	6a 0a		 push	 10			; 0000000aH
  0001f	59		 pop	 ecx
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002c	33 c5		 xor	 eax, ebp
  0002e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00031	50		 push	 eax
  00032	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00035	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003b	b9 00 00 00 00	 mov	 ecx, OFFSET __63F83F46_atltrace@h
  00040	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 437  : 		CPreserveLastError ple;

  00045	8d 4d e8	 lea	 ecx, DWORD PTR _ple$[ebp]
  00048	e8 00 00 00 00	 call	 ??0CPreserveLastError@ATL@@QAE@XZ ; ATL::CPreserveLastError::CPreserveLastError
  0004d	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 438  : 		va_list ptr; va_start(ptr, pszFmt);

  00051	8d 45 18	 lea	 eax, DWORD PTR _pszFmt$[ebp+4]
  00054	89 45 dc	 mov	 DWORD PTR _ptr$[ebp], eax

; 439  : 		ATL::CTrace::TraceV(m_pszFileName, m_nLineNo, dwCategory, nLevel, pszFmt, ptr);

  00057	ff 75 dc	 push	 DWORD PTR _ptr$[ebp]
  0005a	ff 75 14	 push	 DWORD PTR _pszFmt$[ebp]
  0005d	ff 75 10	 push	 DWORD PTR _nLevel$[ebp]
  00060	ff 75 0c	 push	 DWORD PTR _dwCategory$[ebp]
  00063	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00066	ff 70 04	 push	 DWORD PTR [eax+4]
  00069	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  0006c	ff 30		 push	 DWORD PTR [eax]
  0006e	e8 00 00 00 00	 call	 ?TraceV@CTrace@ATL@@SAXPBDHIIPB_WPAD@Z ; ATL::CTrace::TraceV
  00073	83 c4 18	 add	 esp, 24			; 00000018H

; 440  : 		va_end(ptr);

  00076	83 65 dc 00	 and	 DWORD PTR _ptr$[ebp], 0

; 441  : 	}

  0007a	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0007e	8d 4d e8	 lea	 ecx, DWORD PTR _ple$[ebp]
  00081	e8 00 00 00 00	 call	 ??1CPreserveLastError@ATL@@QAE@XZ ; ATL::CPreserveLastError::~CPreserveLastError
  00086	52		 push	 edx
  00087	8b cd		 mov	 ecx, ebp
  00089	50		 push	 eax
  0008a	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN7@operator
  00090	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00095	58		 pop	 eax
  00096	5a		 pop	 edx
  00097	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0009a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a1	59		 pop	 ecx
  000a2	5f		 pop	 edi
  000a3	5e		 pop	 esi
  000a4	5b		 pop	 ebx
  000a5	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a8	33 cd		 xor	 ecx, ebp
  000aa	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000af	81 c4 f4 00 00
	00		 add	 esp, 244		; 000000f4H
  000b5	3b ec		 cmp	 ebp, esp
  000b7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000bc	c9		 leave
  000bd	c3		 ret	 0
  000be	66 90		 npad	 2
$LN7@operator:
  000c0	01 00 00 00	 DD	 1
  000c4	00 00 00 00	 DD	 $LN6@operator
$LN6@operator:
  000c8	e8 ff ff ff	 DD	 -24			; ffffffe8H
  000cc	04 00 00 00	 DD	 4
  000d0	00 00 00 00	 DD	 $LN4@operator
$LN4@operator:
  000d4	70		 DB	 112			; 00000070H
  000d5	6c		 DB	 108			; 0000006cH
  000d6	65		 DB	 101			; 00000065H
  000d7	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??RCTraceFileAndLineInfo@ATL@@QBAXHIPB_WZZ$0:
  00000	8d 4d e8	 lea	 ecx, DWORD PTR _ple$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CPreserveLastError@ATL@@QAE@XZ ; ATL::CPreserveLastError::~CPreserveLastError
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??RCTraceFileAndLineInfo@ATL@@QBAXHIPB_WZZ:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 8a 08 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-248]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00026	33 c8		 xor	 ecx, eax
  00028	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??RCTraceFileAndLineInfo@ATL@@QBAXHIPB_WZZ
  00032	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??RCTraceFileAndLineInfo@ATL@@QBAXHIPB_WZZ ENDP		; ATL::CTraceFileAndLineInfo::operator()
; Function compile flags: /Odsp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.34.31933\atlmfc\include\atltrace.h
;	COMDAT ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pszFileName$ = 8					; size = 4
_nLineNo$ = 12						; size = 4
??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z PROC		; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo, COMDAT
; _this$ = ecx

; 411  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	6a 03		 push	 3
  00012	59		 pop	 ecx
  00013	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00018	f3 ab		 rep stosd
  0001a	59		 pop	 ecx
  0001b	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __63F83F46_atltrace@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 410  : 		: m_pszFileName(pszFileName), m_nLineNo(nLineNo)

  00028	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	8b 4d 08	 mov	 ecx, DWORD PTR _pszFileName$[ebp]
  0002e	89 08		 mov	 DWORD PTR [eax], ecx
  00030	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00033	8b 4d 0c	 mov	 ecx, DWORD PTR _nLineNo$[ebp]
  00036	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 412  : 	}

  00039	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx
  0003f	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00045	3b ec		 cmp	 ebp, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	c9		 leave
  0004d	c2 08 00	 ret	 8
??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ENDP		; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.34.31933\atlmfc\include\atltrace.h
;	COMDAT ??1CPreserveLastError@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1CPreserveLastError@ATL@@QAE@XZ PROC			; ATL::CPreserveLastError::~CPreserveLastError, COMDAT
; _this$ = ecx

; 396  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	6a 03		 push	 3
  00012	59		 pop	 ecx
  00013	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00018	f3 ab		 rep stosd
  0001a	59		 pop	 ecx
  0001b	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __63F83F46_atltrace@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 397  : 		SetLastError(m_dwLastError);

  00028	8b f4		 mov	 esi, esp
  0002a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	ff 30		 push	 DWORD PTR [eax]
  0002f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetLastError@4
  00035	3b f4		 cmp	 esi, esp
  00037	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 398  : 	}

  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx
  0003f	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00045	3b ec		 cmp	 ebp, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	c9		 leave
  0004d	c3		 ret	 0
??1CPreserveLastError@ATL@@QAE@XZ ENDP			; ATL::CPreserveLastError::~CPreserveLastError
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.34.31933\atlmfc\include\atltrace.h
;	COMDAT ??0CPreserveLastError@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0CPreserveLastError@ATL@@QAE@XZ PROC			; ATL::CPreserveLastError::CPreserveLastError, COMDAT
; _this$ = ecx

; 390  : 	CPreserveLastError()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	6a 03		 push	 3
  00012	59		 pop	 ecx
  00013	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00018	f3 ab		 rep stosd
  0001a	59		 pop	 ecx
  0001b	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __63F83F46_atltrace@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 391  : 	{
; 392  : 		m_dwLastError = GetLastError();

  00028	8b f4		 mov	 esi, esp
  0002a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  00030	3b f4		 cmp	 esi, esp
  00032	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00037	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0003a	89 01		 mov	 DWORD PTR [ecx], eax

; 393  : 	}

  0003c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0003f	5f		 pop	 edi
  00040	5e		 pop	 esi
  00041	5b		 pop	 ebx
  00042	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00048	3b ec		 cmp	 ebp, esp
  0004a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004f	c9		 leave
  00050	c3		 ret	 0
??0CPreserveLastError@ATL@@QAE@XZ ENDP			; ATL::CPreserveLastError::CPreserveLastError
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
;	COMDAT ?__autoclassinit2@?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_classSize$ = 8						; size = 4
?__autoclassinit2@?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAEXI@Z PROC ; ATL::CHeapPtr<wchar_t,ATL::CCRTAllocator>::__autoclassinit2, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	6a 03		 push	 3
  00012	59		 pop	 ecx
  00013	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00018	f3 ab		 rep stosd
  0001a	59		 pop	 ecx
  0001b	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  0001e	ff 75 08	 push	 DWORD PTR _classSize$[ebp]
  00021	6a 00		 push	 0
  00023	ff 75 f8	 push	 DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 _memset
  0002b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	5b		 pop	 ebx
  00031	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00037	3b ec		 cmp	 ebp, esp
  00039	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003e	c9		 leave
  0003f	c2 04 00	 ret	 4
?__autoclassinit2@?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAEXI@Z ENDP ; ATL::CHeapPtr<wchar_t,ATL::CCRTAllocator>::__autoclassinit2
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
;	COMDAT ??1?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ PROC	; ATL::CHeapPtr<wchar_t,ATL::CCRTAllocator>::~CHeapPtr<wchar_t,ATL::CCRTAllocator>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	6a 03		 push	 3
  00012	59		 pop	 ecx
  00013	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00018	f3 ab		 rep stosd
  0001a	59		 pop	 ecx
  0001b	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  0001e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	e8 00 00 00 00	 call	 ??1?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::~CHeapPtrBase<wchar_t,ATL::CCRTAllocator>
  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	5b		 pop	 ebx
  00029	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0002f	3b ec		 cmp	 ebp, esp
  00031	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00036	c9		 leave
  00037	c3		 ret	 0
??1?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ ENDP	; ATL::CHeapPtr<wchar_t,ATL::CCRTAllocator>::~CHeapPtr<wchar_t,ATL::CCRTAllocator>
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.34.31933\atlmfc\include\atlalloc.h
;	COMDAT ?Allocate@?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z
_TEXT	SEGMENT
_nBytes$ = -24						; size = 4
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_nElements$ = 8						; size = 4
?Allocate@?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z PROC ; ATL::CHeapPtr<wchar_t,ATL::CCRTAllocator>::Allocate, COMDAT
; _this$ = ecx

; 456  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec dc 00 00
	00		 sub	 esp, 220		; 000000dcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d e4	 lea	 edi, DWORD PTR [ebp-28]
  00010	6a 07		 push	 7
  00012	59		 pop	 ecx
  00013	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00018	f3 ab		 rep stosd
  0001a	59		 pop	 ecx
  0001b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00020	33 c5		 xor	 eax, ebp
  00022	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00025	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET __D909E87F_atlalloc@h
  0002d	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 457  : 		size_t nBytes=0;

  00032	83 65 e8 00	 and	 DWORD PTR _nBytes$[ebp], 0

; 458  : 		if(FAILED(::ATL::AtlMultiply(&nBytes, nElements, sizeof(T))))

  00036	6a 02		 push	 2
  00038	ff 75 08	 push	 DWORD PTR _nElements$[ebp]
  0003b	8d 45 e8	 lea	 eax, DWORD PTR _nBytes$[ebp]
  0003e	50		 push	 eax
  0003f	e8 00 00 00 00	 call	 ??$AtlMultiply@I@ATL@@YAJPAIII@Z ; ATL::AtlMultiply<unsigned int>
  00044	83 c4 0c	 add	 esp, 12			; 0000000cH
  00047	85 c0		 test	 eax, eax
  00049	7d 04		 jge	 SHORT $LN2@Allocate

; 459  : 		{
; 460  : 			return false;

  0004b	32 c0		 xor	 al, al
  0004d	eb 0b		 jmp	 SHORT $LN1@Allocate
$LN2@Allocate:

; 461  : 		}
; 462  : 		return this->AllocateBytes(nBytes);

  0004f	ff 75 e8	 push	 DWORD PTR _nBytes$[ebp]
  00052	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00055	e8 00 00 00 00	 call	 ?AllocateBytes@?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::AllocateBytes
$LN1@Allocate:

; 463  : 	}

  0005a	52		 push	 edx
  0005b	8b cd		 mov	 ecx, ebp
  0005d	50		 push	 eax
  0005e	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN6@Allocate
  00064	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00069	58		 pop	 eax
  0006a	5a		 pop	 edx
  0006b	5f		 pop	 edi
  0006c	5e		 pop	 esi
  0006d	5b		 pop	 ebx
  0006e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00071	33 cd		 xor	 ecx, ebp
  00073	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00078	81 c4 dc 00 00
	00		 add	 esp, 220		; 000000dcH
  0007e	3b ec		 cmp	 ebp, esp
  00080	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00085	c9		 leave
  00086	c2 04 00	 ret	 4
  00089	0f 1f 00	 npad	 3
$LN6@Allocate:
  0008c	01 00 00 00	 DD	 1
  00090	00 00 00 00	 DD	 $LN5@Allocate
$LN5@Allocate:
  00094	e8 ff ff ff	 DD	 -24			; ffffffe8H
  00098	04 00 00 00	 DD	 4
  0009c	00 00 00 00	 DD	 $LN4@Allocate
$LN4@Allocate:
  000a0	6e		 DB	 110			; 0000006eH
  000a1	42		 DB	 66			; 00000042H
  000a2	79		 DB	 121			; 00000079H
  000a3	74		 DB	 116			; 00000074H
  000a4	65		 DB	 101			; 00000065H
  000a5	73		 DB	 115			; 00000073H
  000a6	00		 DB	 0
?Allocate@?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z ENDP ; ATL::CHeapPtr<wchar_t,ATL::CCRTAllocator>::Allocate
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.34.31933\atlmfc\include\atlalloc.h
;	COMDAT ??0?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ PROC	; ATL::CHeapPtr<wchar_t,ATL::CCRTAllocator>::CHeapPtr<wchar_t,ATL::CCRTAllocator>, COMDAT
; _this$ = ecx

; 435  : 	CHeapPtr() throw()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	6a 03		 push	 3
  00012	59		 pop	 ecx
  00013	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00018	f3 ab		 rep stosd
  0001a	59		 pop	 ecx
  0001b	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __D909E87F_atlalloc@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 436  : 	{

  00028	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002b	e8 00 00 00 00	 call	 ??0?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@IAE@XZ ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>

; 437  : 	}

  00030	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00033	5f		 pop	 edi
  00034	5e		 pop	 esi
  00035	5b		 pop	 ebx
  00036	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003c	3b ec		 cmp	 ebp, esp
  0003e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00043	c9		 leave
  00044	c3		 ret	 0
??0?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ ENDP	; ATL::CHeapPtr<wchar_t,ATL::CCRTAllocator>::CHeapPtr<wchar_t,ATL::CCRTAllocator>
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.34.31933\atlmfc\include\atlalloc.h
;	COMDAT ?Free@?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?Free@?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QAEXXZ PROC ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::Free, COMDAT
; _this$ = ecx

; 408  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	6a 03		 push	 3
  00012	59		 pop	 ecx
  00013	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00018	f3 ab		 rep stosd
  0001a	59		 pop	 ecx
  0001b	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __D909E87F_atlalloc@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 409  : 		Allocator::Free(m_pData);

  00028	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	ff 30		 push	 DWORD PTR [eax]
  0002d	e8 00 00 00 00	 call	 ?Free@CCRTAllocator@ATL@@SAXPAX@Z ; ATL::CCRTAllocator::Free
  00032	59		 pop	 ecx

; 410  : 		m_pData = NULL;

  00033	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00036	83 20 00	 and	 DWORD PTR [eax], 0

; 411  : 	}

  00039	5f		 pop	 edi
  0003a	5e		 pop	 esi
  0003b	5b		 pop	 ebx
  0003c	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00042	3b ec		 cmp	 ebp, esp
  00044	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00049	c9		 leave
  0004a	c3		 ret	 0
?Free@?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QAEXXZ ENDP ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::Free
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.34.31933\atlmfc\include\atlalloc.h
;	COMDAT ?AllocateBytes@?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_nBytes$ = 8						; size = 4
?AllocateBytes@?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z PROC ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::AllocateBytes, COMDAT
; _this$ = ecx

; 382  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	6a 03		 push	 3
  00012	59		 pop	 ecx
  00013	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00018	f3 ab		 rep stosd
  0001a	59		 pop	 ecx
  0001b	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __D909E87F_atlalloc@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 383  : 		ATLASSERT(m_pData == NULL);

  00028	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	83 38 00	 cmp	 DWORD PTR [eax], 0
  0002e	74 26		 je	 SHORT $LN4@AllocateBy
  00030	68 00 00 00 00	 push	 OFFSET ??_C@_1BK@NHECDDNK@?$AAm?$AA_?$AAp?$AAD?$AAa?$AAt?$AAa?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0@
  00035	68 00 00 00 00	 push	 OFFSET ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@
  0003a	6a 00		 push	 0
  0003c	68 7f 01 00 00	 push	 383			; 0000017fH
  00041	68 00 00 00 00	 push	 OFFSET ??_C@_1NK@JCBLKNMO@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  00046	6a 02		 push	 2
  00048	e8 00 00 00 00	 call	 __CrtDbgReportW
  0004d	83 c4 18	 add	 esp, 24			; 00000018H
  00050	83 f8 01	 cmp	 eax, 1
  00053	75 01		 jne	 SHORT $LN4@AllocateBy
  00055	cc		 int	 3
$LN4@AllocateBy:

; 384  : 		m_pData = static_cast<T*>(Allocator::Allocate(nBytes));

  00056	ff 75 08	 push	 DWORD PTR _nBytes$[ebp]
  00059	e8 00 00 00 00	 call	 ?Allocate@CCRTAllocator@ATL@@SAPAXI@Z ; ATL::CCRTAllocator::Allocate
  0005e	59		 pop	 ecx
  0005f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00062	89 01		 mov	 DWORD PTR [ecx], eax

; 385  : 		if (m_pData == NULL)

  00064	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00067	83 38 00	 cmp	 DWORD PTR [eax], 0
  0006a	75 04		 jne	 SHORT $LN2@AllocateBy

; 386  : 			return false;

  0006c	32 c0		 xor	 al, al
  0006e	eb 02		 jmp	 SHORT $LN1@AllocateBy
$LN2@AllocateBy:

; 387  : 
; 388  : 		return true;

  00070	b0 01		 mov	 al, 1
$LN1@AllocateBy:

; 389  : 	}

  00072	5f		 pop	 edi
  00073	5e		 pop	 esi
  00074	5b		 pop	 ebx
  00075	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0007b	3b ec		 cmp	 ebp, esp
  0007d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00082	c9		 leave
  00083	c2 04 00	 ret	 4
?AllocateBytes@?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z ENDP ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::AllocateBytes
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.34.31933\atlmfc\include\atlalloc.h
;	COMDAT ??B?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QBEPA_WXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??B?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QBEPA_WXZ PROC ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::operator wchar_t *, COMDAT
; _this$ = ecx

; 364  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	6a 03		 push	 3
  00012	59		 pop	 ecx
  00013	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00018	f3 ab		 rep stosd
  0001a	59		 pop	 ecx
  0001b	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __D909E87F_atlalloc@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 365  : 		return m_pData;

  00028	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	8b 00		 mov	 eax, DWORD PTR [eax]

; 366  : 	}

  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00036	3b ec		 cmp	 ebp, esp
  00038	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003d	c9		 leave
  0003e	c3		 ret	 0
??B?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QBEPA_WXZ ENDP ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::operator wchar_t *
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.34.31933\atlmfc\include\atlalloc.h
;	COMDAT ??1?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ PROC ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::~CHeapPtrBase<wchar_t,ATL::CCRTAllocator>, COMDAT
; _this$ = ecx

; 350  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	6a 03		 push	 3
  00012	59		 pop	 ecx
  00013	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00018	f3 ab		 rep stosd
  0001a	59		 pop	 ecx
  0001b	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __D909E87F_atlalloc@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 351  : 		Free();

  00028	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002b	e8 00 00 00 00	 call	 ?Free@?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QAEXXZ ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::Free

; 352  : 	}

  00030	5f		 pop	 edi
  00031	5e		 pop	 esi
  00032	5b		 pop	 ebx
  00033	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00039	3b ec		 cmp	 ebp, esp
  0003b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00040	c9		 leave
  00041	c3		 ret	 0
??1?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ ENDP ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::~CHeapPtrBase<wchar_t,ATL::CCRTAllocator>
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.34.31933\atlmfc\include\atlalloc.h
;	COMDAT ??0?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@IAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@IAE@XZ PROC ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>, COMDAT
; _this$ = ecx

; 337  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	6a 03		 push	 3
  00012	59		 pop	 ecx
  00013	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00018	f3 ab		 rep stosd
  0001a	59		 pop	 ecx
  0001b	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __D909E87F_atlalloc@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 336  : 		m_pData(NULL)

  00028	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	83 20 00	 and	 DWORD PTR [eax], 0

; 338  : 	}

  0002e	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00031	5f		 pop	 edi
  00032	5e		 pop	 esi
  00033	5b		 pop	 ebx
  00034	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003a	3b ec		 cmp	 ebp, esp
  0003c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00041	c9		 leave
  00042	c3		 ret	 0
??0?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@IAE@XZ ENDP ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.34.31933\atlmfc\include\atltrace.h
;	COMDAT ?RegisterCategory@CTrace@ATL@@SAXPB_WI@Z
_TEXT	SEGMENT
_pszCategory$ = 8					; size = 4
_nCategory$ = 12					; size = 4
?RegisterCategory@CTrace@ATL@@SAXPB_WI@Z PROC		; ATL::CTrace::RegisterCategory, COMDAT

; 329  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __63F83F46_atltrace@h
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 330  : 		if (pszCategory == nullptr)

  00021	83 7d 08 00	 cmp	 DWORD PTR _pszCategory$[ebp], 0
  00025	75 02		 jne	 SHORT $LN2@RegisterCa

; 331  : 		{
; 332  : 			return;

  00027	eb 70		 jmp	 SHORT $LN1@RegisterCa
$LN2@RegisterCa:

; 333  : 		}
; 334  : 
; 335  : 		if (m_nLastCategory >= MaxCategoryArray) 

  00029	83 3d 00 00 00
	00 20		 cmp	 DWORD PTR ?m_nLastCategory@CTrace@ATL@@1IA, 32 ; ATL::CTrace::m_nLastCategory, 00000020H
  00030	72 2c		 jb	 SHORT $LN3@RegisterCa

; 336  : 		{
; 337  : 			ATLASSERT(false && "Too many categories defined");

  00032	33 c0		 xor	 eax, eax
  00034	75 26		 jne	 SHORT $LN5@RegisterCa
  00036	68 00 00 00 00	 push	 OFFSET ??_C@_1EO@EBPPKGOM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAT?$AAo?$AAo?$AA?5?$AAm@
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@
  00040	6a 00		 push	 0
  00042	68 51 01 00 00	 push	 337			; 00000151H
  00047	68 00 00 00 00	 push	 OFFSET ??_C@_1NK@OBLAMPEN@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  0004c	6a 02		 push	 2
  0004e	e8 00 00 00 00	 call	 __CrtDbgReportW
  00053	83 c4 18	 add	 esp, 24			; 00000018H
  00056	83 f8 01	 cmp	 eax, 1
  00059	75 01		 jne	 SHORT $LN5@RegisterCa
  0005b	cc		 int	 3
$LN5@RegisterCa:

; 338  : 			return;

  0005c	eb 3b		 jmp	 SHORT $LN1@RegisterCa
$LN3@RegisterCa:

; 339  : 		}
; 340  : 
; 341  : 		m_nMap[m_nLastCategory].nCategory = nCategory;

  0005e	69 05 00 00 00
	00 04 01 00 00	 imul	 eax, DWORD PTR ?m_nLastCategory@CTrace@ATL@@1IA, 260 ; ATL::CTrace::m_nLastCategory
  00068	8b 4d 0c	 mov	 ecx, DWORD PTR _nCategory$[ebp]
  0006b	89 88 00 00 00
	00		 mov	 DWORD PTR ?m_nMap@CTrace@ATL@@1PAUCategoryMap@12@A[eax], ecx

; 342  : #ifdef _UNICODE
; 343  : 		wcscpy_s(m_nMap[m_nLastCategory].categryName, MaxLengthOfCategoryName - 1, pszCategory);

  00071	ff 75 08	 push	 DWORD PTR _pszCategory$[ebp]
  00074	6a 7f		 push	 127			; 0000007fH
  00076	69 05 00 00 00
	00 04 01 00 00	 imul	 eax, DWORD PTR ?m_nLastCategory@CTrace@ATL@@1IA, 260 ; ATL::CTrace::m_nLastCategory
  00080	05 04 00 00 00	 add	 eax, OFFSET ?m_nMap@CTrace@ATL@@1PAUCategoryMap@12@A+4
  00085	50		 push	 eax
  00086	e8 00 00 00 00	 call	 _wcscpy_s
  0008b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 344  : #else
; 345  : 		wchar_t buffer[MaxLengthOfCategoryName] = { 0 };	
; 346  : #if _MSC_VER < 1900
; 347  : 		swprintf_s(buffer, MaxLengthOfCategoryName - 1, L"%S", pszCategory);
; 348  : #else
; 349  : 		swprintf_s(buffer, MaxLengthOfCategoryName - 1, L"%hs", pszCategory);
; 350  : #endif
; 351  : 		wcscpy_s(m_nMap[m_nLastCategory].categryName, MaxLengthOfCategoryName - 1, buffer);
; 352  : #endif
; 353  : 	
; 354  : 		m_nLastCategory++;

  0008e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_nLastCategory@CTrace@ATL@@1IA ; ATL::CTrace::m_nLastCategory
  00093	40		 inc	 eax
  00094	a3 00 00 00 00	 mov	 DWORD PTR ?m_nLastCategory@CTrace@ATL@@1IA, eax ; ATL::CTrace::m_nLastCategory
$LN1@RegisterCa:

; 355  : 	}

  00099	5f		 pop	 edi
  0009a	5e		 pop	 esi
  0009b	5b		 pop	 ebx
  0009c	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  000a2	3b ec		 cmp	 ebp, esp
  000a4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a9	c9		 leave
  000aa	c3		 ret	 0
?RegisterCategory@CTrace@ATL@@SAXPB_WI@Z ENDP		; ATL::CTrace::RegisterCategory
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.34.31933\atlmfc\include\atltrace.h
;	COMDAT ?TraceV@CTrace@ATL@@SAXPBDHIIPB_WPAD@Z
_TEXT	SEGMENT
_vsnwprintf_result$ = -48				; size = 4
_wszBuf$ = -36						; size = 4
_cchNeeded$ = -24					; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_pszFileName$ = 8					; size = 4
_nLine$ = 12						; size = 4
_dwCategory$ = 16					; size = 4
_nLevel$ = 20						; size = 4
_pwszFmt$ = 24						; size = 4
_args$ = 28						; size = 4
?TraceV@CTrace@ATL@@SAXPBDHIIPB_WPAD@Z PROC		; ATL::CTrace::TraceV, COMDAT

; 281  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?TraceV@CTrace@ATL@@SAXPBDHIIPB_WPAD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec e8 00 00
	00		 sub	 esp, 232		; 000000e8H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	8d 7d cc	 lea	 edi, DWORD PTR [ebp-52]
  0001d	6a 0a		 push	 10			; 0000000aH
  0001f	59		 pop	 ecx
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002c	33 c5		 xor	 eax, ebp
  0002e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00031	50		 push	 eax
  00032	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00035	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003b	b9 00 00 00 00	 mov	 ecx, OFFSET __63F83F46_atltrace@h
  00040	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 282  : #if _MSC_VER < 1900
; 283  : 		int cchNeeded = _vscwprintf(pwszFmt, args);
; 284  : #else
; 285  : 		// Explicitly request the legacy wide format specifiers mode from the CRT,
; 286  : 		// for compatibility with previous versions.  While the CRT supports two
; 287  : 		// modes, the ATL and MFC functions that accept format strings only support
; 288  : 		// legacy mode format strings.
; 289  : 		int cchNeeded = __stdio_common_vswprintf(

  00045	ff 75 1c	 push	 DWORD PTR _args$[ebp]
  00048	6a 00		 push	 0
  0004a	ff 75 18	 push	 DWORD PTR _pwszFmt$[ebp]
  0004d	6a 00		 push	 0
  0004f	6a 00		 push	 0
  00051	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00056	8b 08		 mov	 ecx, DWORD PTR [eax]
  00058	83 c9 02	 or	 ecx, 2
  0005b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0005e	83 c9 04	 or	 ecx, 4
  00061	50		 push	 eax
  00062	51		 push	 ecx
  00063	e8 00 00 00 00	 call	 ___stdio_common_vswprintf
  00068	83 c4 1c	 add	 esp, 28			; 0000001cH
  0006b	89 45 e8	 mov	 DWORD PTR _cchNeeded$[ebp], eax

; 290  : 			_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS |
; 291  : 			_CRT_INTERNAL_PRINTF_STANDARD_SNPRINTF_BEHAVIOR |
; 292  : 			_CRT_INTERNAL_PRINTF_LEGACY_WIDE_SPECIFIERS,
; 293  : 			NULL, 0, pwszFmt, NULL, args);
; 294  : #endif
; 295  : 		if (cchNeeded < 0)

  0006e	83 7d e8 00	 cmp	 DWORD PTR _cchNeeded$[ebp], 0
  00072	7d 05		 jge	 SHORT $LN2@TraceV

; 296  : 		{
; 297  : 			return;

  00074	e9 bf 00 00 00	 jmp	 $LN1@TraceV
$LN2@TraceV:

; 298  : 		}
; 299  : 
; 300  : 		CHeapPtr<wchar_t> wszBuf;

  00079	6a 04		 push	 4
  0007b	8d 4d dc	 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  0007e	e8 00 00 00 00	 call	 ?__autoclassinit2@?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAEXI@Z
  00083	8d 4d dc	 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  00086	e8 00 00 00 00	 call	 ??0?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ ; ATL::CHeapPtr<wchar_t,ATL::CCRTAllocator>::CHeapPtr<wchar_t,ATL::CCRTAllocator>
  0008b	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 301  : 		if (!wszBuf.Allocate(cchNeeded + 1))

  0008f	8b 45 e8	 mov	 eax, DWORD PTR _cchNeeded$[ebp]
  00092	40		 inc	 eax
  00093	50		 push	 eax
  00094	8d 4d dc	 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  00097	e8 00 00 00 00	 call	 ?Allocate@?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z ; ATL::CHeapPtr<wchar_t,ATL::CCRTAllocator>::Allocate
  0009c	0f b6 c0	 movzx	 eax, al
  0009f	85 c0		 test	 eax, eax
  000a1	75 11		 jne	 SHORT $LN3@TraceV

; 302  : 		{
; 303  : 			return;

  000a3	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  000a7	8d 4d dc	 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  000aa	e8 00 00 00 00	 call	 ??1?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ
  000af	e9 84 00 00 00	 jmp	 $LN1@TraceV
$LN3@TraceV:

; 304  : 		}
; 305  : 
; 306  : 		wszBuf[0] = '\0';

  000b4	8d 4d dc	 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  000b7	e8 00 00 00 00	 call	 ??B?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QBEPA_WXZ ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::operator wchar_t *
  000bc	6a 02		 push	 2
  000be	59		 pop	 ecx
  000bf	6b c9 00	 imul	 ecx, ecx, 0
  000c2	33 d2		 xor	 edx, edx
  000c4	66 89 14 08	 mov	 WORD PTR [eax+ecx], dx

; 307  : 
; 308  : #if _MSC_VER < 1900
; 309  : 		if (_vsnwprintf_s(wszBuf, cchNeeded + 1, cchNeeded, pwszFmt, args) == -1)
; 310  : #else
; 311  : 		// Explicitly request the legacy wide format specifiers mode from the CRT,
; 312  : 		// for compatibility with previous versions.  While the CRT supports two
; 313  : 		// modes, the ATL and MFC functions that accept format strings only support
; 314  : 		// legacy mode format strings.
; 315  : 		int const vsnwprintf_result = __stdio_common_vsnwprintf_s(

  000c8	ff 75 1c	 push	 DWORD PTR _args$[ebp]
  000cb	6a 00		 push	 0
  000cd	ff 75 18	 push	 DWORD PTR _pwszFmt$[ebp]
  000d0	ff 75 e8	 push	 DWORD PTR _cchNeeded$[ebp]
  000d3	8b 45 e8	 mov	 eax, DWORD PTR _cchNeeded$[ebp]
  000d6	40		 inc	 eax
  000d7	50		 push	 eax
  000d8	8d 4d dc	 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  000db	e8 00 00 00 00	 call	 ??B?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QBEPA_WXZ ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::operator wchar_t *
  000e0	50		 push	 eax
  000e1	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  000e6	8b 08		 mov	 ecx, DWORD PTR [eax]
  000e8	83 c9 04	 or	 ecx, 4
  000eb	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000ee	50		 push	 eax
  000ef	51		 push	 ecx
  000f0	e8 00 00 00 00	 call	 ___stdio_common_vsnwprintf_s
  000f5	83 c4 20	 add	 esp, 32			; 00000020H
  000f8	89 45 d0	 mov	 DWORD PTR _vsnwprintf_result$[ebp], eax

; 316  : 			_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS |
; 317  : 			_CRT_INTERNAL_PRINTF_LEGACY_WIDE_SPECIFIERS,
; 318  : 			wszBuf, cchNeeded + 1, cchNeeded, pwszFmt, NULL, args);
; 319  : 		if (vsnwprintf_result < 0)

  000fb	83 7d d0 00	 cmp	 DWORD PTR _vsnwprintf_result$[ebp], 0
  000ff	7d 0e		 jge	 SHORT $LN4@TraceV

; 320  : #endif
; 321  : 		{
; 322  : 			return;

  00101	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00105	8d 4d dc	 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  00108	e8 00 00 00 00	 call	 ??1?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ
  0010d	eb 29		 jmp	 SHORT $LN1@TraceV
$LN4@TraceV:

; 323  : 		}
; 324  : 
; 325  : 		TraceV(pszFileName, nLine, dwCategory, nLevel, wszBuf);

  0010f	8d 4d dc	 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  00112	e8 00 00 00 00	 call	 ??B?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QBEPA_WXZ ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::operator wchar_t *
  00117	50		 push	 eax
  00118	ff 75 14	 push	 DWORD PTR _nLevel$[ebp]
  0011b	ff 75 10	 push	 DWORD PTR _dwCategory$[ebp]
  0011e	ff 75 0c	 push	 DWORD PTR _nLine$[ebp]
  00121	ff 75 08	 push	 DWORD PTR _pszFileName$[ebp]
  00124	e8 00 00 00 00	 call	 ?TraceV@CTrace@ATL@@CAXPBDHIIPB_W@Z ; ATL::CTrace::TraceV
  00129	83 c4 14	 add	 esp, 20			; 00000014H

; 326  : 	}

  0012c	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00130	8d 4d dc	 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  00133	e8 00 00 00 00	 call	 ??1?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ
$LN1@TraceV:
  00138	52		 push	 edx
  00139	8b cd		 mov	 ecx, ebp
  0013b	50		 push	 eax
  0013c	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN10@TraceV
  00142	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00147	58		 pop	 eax
  00148	5a		 pop	 edx
  00149	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0014c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00153	59		 pop	 ecx
  00154	5f		 pop	 edi
  00155	5e		 pop	 esi
  00156	5b		 pop	 ebx
  00157	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0015a	33 cd		 xor	 ecx, ebp
  0015c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00161	81 c4 f4 00 00
	00		 add	 esp, 244		; 000000f4H
  00167	3b ec		 cmp	 ebp, esp
  00169	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0016e	c9		 leave
  0016f	c3		 ret	 0
$LN10@TraceV:
  00170	01 00 00 00	 DD	 1
  00174	00 00 00 00	 DD	 $LN9@TraceV
$LN9@TraceV:
  00178	dc ff ff ff	 DD	 -36			; ffffffdcH
  0017c	04 00 00 00	 DD	 4
  00180	00 00 00 00	 DD	 $LN7@TraceV
$LN7@TraceV:
  00184	77		 DB	 119			; 00000077H
  00185	73		 DB	 115			; 00000073H
  00186	7a		 DB	 122			; 0000007aH
  00187	42		 DB	 66			; 00000042H
  00188	75		 DB	 117			; 00000075H
  00189	66		 DB	 102			; 00000066H
  0018a	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?TraceV@CTrace@ATL@@SAXPBDHIIPB_WPAD@Z$0:
  00000	8d 4d dc	 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?TraceV@CTrace@ATL@@SAXPBDHIIPB_WPAD@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 8a 08 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-248]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00026	33 c8		 xor	 ecx, eax
  00028	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?TraceV@CTrace@ATL@@SAXPBDHIIPB_WPAD@Z
  00032	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?TraceV@CTrace@ATL@@SAXPBDHIIPB_WPAD@Z ENDP		; ATL::CTrace::TraceV
; Function compile flags: /Odsp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.34.31933\atlmfc\include\atltrace.h
;	COMDAT ?TraceV@CTrace@ATL@@CAXPBDHIIPB_W@Z
_TEXT	SEGMENT
_fileName$ = -2632					; size = 520
_wszBuf$ = -2104					; size = 4
_chCount$ = -2092					; size = 4
_pwszCategoryName$ = -2080				; size = 4
_categoryLength$ = -2068				; size = 4
_wszCategory$ = -2056					; size = 2048
__$ArrayPad$ = -4					; size = 4
_pszFileName$ = 8					; size = 4
_nLine$ = 12						; size = 4
_dwCategory$ = 16					; size = 4
_nLevel$ = 20						; size = 4
_pwszMessage$ = 24					; size = 4
?TraceV@CTrace@ATL@@CAXPBDHIIPB_W@Z PROC		; ATL::CTrace::TraceV, COMDAT

; 150  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 0e 00
	00		 sub	 esp, 3788		; 00000eccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd b4 f5 ff
	ff		 lea	 edi, DWORD PTR [ebp-2636]
  00012	b9 93 02 00 00	 mov	 ecx, 659		; 00000293H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET __63F83F46_atltrace@h
  0002d	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 151  : 		if (CTrace::m_nLevel == CTrace::DisableTracing || CTrace::m_nLevel < nLevel || (CTrace::m_nCategory & dwCategory) == 0)

  00032	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?m_nLevel@CTrace@ATL@@1IA, -1 ; ATL::CTrace::m_nLevel
  00039	74 14		 je	 SHORT $LN3@TraceV
  0003b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_nLevel@CTrace@ATL@@1IA ; ATL::CTrace::m_nLevel
  00040	3b 45 14	 cmp	 eax, DWORD PTR _nLevel$[ebp]
  00043	72 0a		 jb	 SHORT $LN3@TraceV
  00045	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_nCategory@CTrace@ATL@@1IA ; ATL::CTrace::m_nCategory
  0004a	23 45 10	 and	 eax, DWORD PTR _dwCategory$[ebp]
  0004d	75 05		 jne	 SHORT $LN2@TraceV
$LN3@TraceV:

; 152  : 		{
; 153  : 			return;

  0004f	e9 bb 01 00 00	 jmp	 $LN1@TraceV
$LN2@TraceV:

; 154  : 		}
; 155  : 
; 156  : 		wchar_t wszCategory[TraceBufferSize] = {'\0'};

  00054	68 00 08 00 00	 push	 2048			; 00000800H
  00059	6a 00		 push	 0
  0005b	8d 85 f8 f7 ff
	ff		 lea	 eax, DWORD PTR _wszCategory$[ebp]
  00061	50		 push	 eax
  00062	e8 00 00 00 00	 call	 _memset
  00067	83 c4 0c	 add	 esp, 12			; 0000000cH

; 157  : 		int categoryLength = 0;

  0006a	83 a5 ec f7 ff
	ff 00		 and	 DWORD PTR _categoryLength$[ebp], 0

; 158  : 		const wchar_t *const pwszCategoryName = GetCategoryName(dwCategory);

  00071	ff 75 10	 push	 DWORD PTR _dwCategory$[ebp]
  00074	e8 00 00 00 00	 call	 ?GetCategoryName@CTrace@ATL@@CAPA_WI@Z ; ATL::CTrace::GetCategoryName
  00079	59		 pop	 ecx
  0007a	89 85 e0 f7 ff
	ff		 mov	 DWORD PTR _pwszCategoryName$[ebp], eax

; 159  : 		if (pwszCategoryName != nullptr)

  00080	83 bd e0 f7 ff
	ff 00		 cmp	 DWORD PTR _pwszCategoryName$[ebp], 0
  00087	74 35		 je	 SHORT $LN4@TraceV

; 160  : 		{
; 161  : 			if ((categoryLength = swprintf_s(wszCategory, TraceBufferSize, L"%ls - ", pwszCategoryName)) == -1)

  00089	ff b5 e0 f7 ff
	ff		 push	 DWORD PTR _pwszCategoryName$[ebp]
  0008f	68 00 00 00 00	 push	 OFFSET ??_C@_1O@LFNDFEBP@?$AA?$CF?$AAl?$AAs?$AA?5?$AA?9?$AA?5@
  00094	68 00 04 00 00	 push	 1024			; 00000400H
  00099	8d 85 f8 f7 ff
	ff		 lea	 eax, DWORD PTR _wszCategory$[ebp]
  0009f	50		 push	 eax
  000a0	e8 00 00 00 00	 call	 _swprintf_s
  000a5	83 c4 10	 add	 esp, 16			; 00000010H
  000a8	89 85 ec f7 ff
	ff		 mov	 DWORD PTR _categoryLength$[ebp], eax
  000ae	83 bd ec f7 ff
	ff ff		 cmp	 DWORD PTR _categoryLength$[ebp], -1
  000b5	75 05		 jne	 SHORT $LN6@TraceV

; 162  : 			{
; 163  : 				return;

  000b7	e9 53 01 00 00	 jmp	 $LN1@TraceV
$LN6@TraceV:

; 164  : 			}
; 165  : 		}

  000bc	eb 30		 jmp	 SHORT $LN5@TraceV
$LN4@TraceV:

; 166  : 		else
; 167  : 		{
; 168  : 			if ((categoryLength = swprintf_s(wszCategory, TraceBufferSize, L"%u - ", dwCategory)) == -1)

  000be	ff 75 10	 push	 DWORD PTR _dwCategory$[ebp]
  000c1	68 00 00 00 00	 push	 OFFSET ??_C@_1M@PGKOAACE@?$AA?$CF?$AAu?$AA?5?$AA?9?$AA?5@
  000c6	68 00 04 00 00	 push	 1024			; 00000400H
  000cb	8d 85 f8 f7 ff
	ff		 lea	 eax, DWORD PTR _wszCategory$[ebp]
  000d1	50		 push	 eax
  000d2	e8 00 00 00 00	 call	 _swprintf_s
  000d7	83 c4 10	 add	 esp, 16			; 00000010H
  000da	89 85 ec f7 ff
	ff		 mov	 DWORD PTR _categoryLength$[ebp], eax
  000e0	83 bd ec f7 ff
	ff ff		 cmp	 DWORD PTR _categoryLength$[ebp], -1
  000e7	75 05		 jne	 SHORT $LN5@TraceV

; 169  : 			{
; 170  : 				return;

  000e9	e9 21 01 00 00	 jmp	 $LN1@TraceV
$LN5@TraceV:

; 171  : 			}
; 172  : 		}
; 173  : 
; 174  : 		int chCount = (int)wcslen(pwszMessage) + categoryLength + 1;

  000ee	ff 75 18	 push	 DWORD PTR _pwszMessage$[ebp]
  000f1	e8 00 00 00 00	 call	 _wcslen
  000f6	59		 pop	 ecx
  000f7	8b 8d ec f7 ff
	ff		 mov	 ecx, DWORD PTR _categoryLength$[ebp]
  000fd	8d 44 08 01	 lea	 eax, DWORD PTR [eax+ecx+1]
  00101	89 85 d4 f7 ff
	ff		 mov	 DWORD PTR _chCount$[ebp], eax

; 175  : 		CHeapPtr<wchar_t> wszBuf;

  00107	6a 04		 push	 4
  00109	8d 8d c8 f7 ff
	ff		 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  0010f	e8 00 00 00 00	 call	 ?__autoclassinit2@?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAEXI@Z
  00114	8d 8d c8 f7 ff
	ff		 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  0011a	e8 00 00 00 00	 call	 ??0?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ ; ATL::CHeapPtr<wchar_t,ATL::CCRTAllocator>::CHeapPtr<wchar_t,ATL::CCRTAllocator>

; 176  : 		if (!wszBuf.Allocate(chCount))

  0011f	ff b5 d4 f7 ff
	ff		 push	 DWORD PTR _chCount$[ebp]
  00125	8d 8d c8 f7 ff
	ff		 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  0012b	e8 00 00 00 00	 call	 ?Allocate@?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z ; ATL::CHeapPtr<wchar_t,ATL::CCRTAllocator>::Allocate
  00130	0f b6 c0	 movzx	 eax, al
  00133	85 c0		 test	 eax, eax
  00135	75 10		 jne	 SHORT $LN8@TraceV

; 177  : 		{
; 178  : 			return;

  00137	8d 8d c8 f7 ff
	ff		 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  0013d	e8 00 00 00 00	 call	 ??1?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ
  00142	e9 c8 00 00 00	 jmp	 $LN1@TraceV
$LN8@TraceV:

; 179  : 		}
; 180  : 
; 181  : 		wszBuf[0] = '\0';

  00147	8d 8d c8 f7 ff
	ff		 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  0014d	e8 00 00 00 00	 call	 ??B?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QBEPA_WXZ ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::operator wchar_t *
  00152	6a 02		 push	 2
  00154	59		 pop	 ecx
  00155	6b c9 00	 imul	 ecx, ecx, 0
  00158	33 d2		 xor	 edx, edx
  0015a	66 89 14 08	 mov	 WORD PTR [eax+ecx], dx

; 182  : 
; 183  : 		if (swprintf_s(wszBuf, chCount, L"%ls%ls", wszCategory, pwszMessage) == -1)

  0015e	ff 75 18	 push	 DWORD PTR _pwszMessage$[ebp]
  00161	8d 85 f8 f7 ff
	ff		 lea	 eax, DWORD PTR _wszCategory$[ebp]
  00167	50		 push	 eax
  00168	68 00 00 00 00	 push	 OFFSET ??_C@_1O@OAIPCDPO@?$AA?$CF?$AAl?$AAs?$AA?$CF?$AAl?$AAs@
  0016d	ff b5 d4 f7 ff
	ff		 push	 DWORD PTR _chCount$[ebp]
  00173	8d 8d c8 f7 ff
	ff		 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  00179	e8 00 00 00 00	 call	 ??B?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QBEPA_WXZ ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::operator wchar_t *
  0017e	50		 push	 eax
  0017f	e8 00 00 00 00	 call	 _swprintf_s
  00184	83 c4 14	 add	 esp, 20			; 00000014H
  00187	83 f8 ff	 cmp	 eax, -1
  0018a	75 0d		 jne	 SHORT $LN9@TraceV

; 184  : 		{
; 185  : 			return;

  0018c	8d 8d c8 f7 ff
	ff		 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  00192	e8 00 00 00 00	 call	 ??1?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ
  00197	eb 76		 jmp	 SHORT $LN1@TraceV
$LN9@TraceV:

; 186  : 		}
; 187  : 
; 188  : 		wchar_t fileName[_MAX_PATH] = {'\0'};	

  00199	68 08 02 00 00	 push	 520			; 00000208H
  0019e	6a 00		 push	 0
  001a0	8d 85 b8 f5 ff
	ff		 lea	 eax, DWORD PTR _fileName$[ebp]
  001a6	50		 push	 eax
  001a7	e8 00 00 00 00	 call	 _memset
  001ac	83 c4 0c	 add	 esp, 12			; 0000000cH

; 189  : #if _MSC_VER < 1900
; 190  : 		if (swprintf_s(fileName, _MAX_PATH, L"%S", pszFileName) == -1)
; 191  : #else
; 192  : 		if (swprintf_s(fileName, _MAX_PATH, L"%hs", pszFileName) == -1)

  001af	ff 75 08	 push	 DWORD PTR _pszFileName$[ebp]
  001b2	68 00 00 00 00	 push	 OFFSET ??_C@_17LGGGMOOB@?$AA?$CF?$AAh?$AAs@
  001b7	68 04 01 00 00	 push	 260			; 00000104H
  001bc	8d 85 b8 f5 ff
	ff		 lea	 eax, DWORD PTR _fileName$[ebp]
  001c2	50		 push	 eax
  001c3	e8 00 00 00 00	 call	 _swprintf_s
  001c8	83 c4 10	 add	 esp, 16			; 00000010H
  001cb	83 f8 ff	 cmp	 eax, -1
  001ce	75 0d		 jne	 SHORT $LN10@TraceV

; 193  : #endif
; 194  : 		{
; 195  : 			return;

  001d0	8d 8d c8 f7 ff
	ff		 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  001d6	e8 00 00 00 00	 call	 ??1?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ
  001db	eb 32		 jmp	 SHORT $LN1@TraceV
$LN10@TraceV:

; 196  : 		}
; 197  : 
; 198  : 		_CrtDbgReportW(_CRT_WARN, fileName, nLine, nullptr, L"%ls", static_cast<const wchar_t*>(wszBuf));

  001dd	8d 8d c8 f7 ff
	ff		 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  001e3	e8 00 00 00 00	 call	 ??B?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QBEPA_WXZ ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::operator wchar_t *
  001e8	50		 push	 eax
  001e9	68 00 00 00 00	 push	 OFFSET ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@
  001ee	6a 00		 push	 0
  001f0	ff 75 0c	 push	 DWORD PTR _nLine$[ebp]
  001f3	8d 85 b8 f5 ff
	ff		 lea	 eax, DWORD PTR _fileName$[ebp]
  001f9	50		 push	 eax
  001fa	6a 00		 push	 0
  001fc	e8 00 00 00 00	 call	 __CrtDbgReportW
  00201	83 c4 18	 add	 esp, 24			; 00000018H

; 199  : 	}

  00204	8d 8d c8 f7 ff
	ff		 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  0020a	e8 00 00 00 00	 call	 ??1?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ
$LN1@TraceV:
  0020f	52		 push	 edx
  00210	8b cd		 mov	 ecx, ebp
  00212	50		 push	 eax
  00213	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN17@TraceV
  00219	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0021e	58		 pop	 eax
  0021f	5a		 pop	 edx
  00220	5f		 pop	 edi
  00221	5e		 pop	 esi
  00222	5b		 pop	 ebx
  00223	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00226	33 cd		 xor	 ecx, ebp
  00228	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0022d	81 c4 cc 0e 00
	00		 add	 esp, 3788		; 00000eccH
  00233	3b ec		 cmp	 ebp, esp
  00235	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0023a	c9		 leave
  0023b	c3		 ret	 0
$LN17@TraceV:
  0023c	03 00 00 00	 DD	 3
  00240	00 00 00 00	 DD	 $LN16@TraceV
$LN16@TraceV:
  00244	f8 f7 ff ff	 DD	 -2056			; fffff7f8H
  00248	00 08 00 00	 DD	 2048			; 00000800H
  0024c	00 00 00 00	 DD	 $LN13@TraceV
  00250	c8 f7 ff ff	 DD	 -2104			; fffff7c8H
  00254	04 00 00 00	 DD	 4
  00258	00 00 00 00	 DD	 $LN14@TraceV
  0025c	b8 f5 ff ff	 DD	 -2632			; fffff5b8H
  00260	08 02 00 00	 DD	 520			; 00000208H
  00264	00 00 00 00	 DD	 $LN15@TraceV
$LN15@TraceV:
  00268	66		 DB	 102			; 00000066H
  00269	69		 DB	 105			; 00000069H
  0026a	6c		 DB	 108			; 0000006cH
  0026b	65		 DB	 101			; 00000065H
  0026c	4e		 DB	 78			; 0000004eH
  0026d	61		 DB	 97			; 00000061H
  0026e	6d		 DB	 109			; 0000006dH
  0026f	65		 DB	 101			; 00000065H
  00270	00		 DB	 0
$LN14@TraceV:
  00271	77		 DB	 119			; 00000077H
  00272	73		 DB	 115			; 00000073H
  00273	7a		 DB	 122			; 0000007aH
  00274	42		 DB	 66			; 00000042H
  00275	75		 DB	 117			; 00000075H
  00276	66		 DB	 102			; 00000066H
  00277	00		 DB	 0
$LN13@TraceV:
  00278	77		 DB	 119			; 00000077H
  00279	73		 DB	 115			; 00000073H
  0027a	7a		 DB	 122			; 0000007aH
  0027b	43		 DB	 67			; 00000043H
  0027c	61		 DB	 97			; 00000061H
  0027d	74		 DB	 116			; 00000074H
  0027e	65		 DB	 101			; 00000065H
  0027f	67		 DB	 103			; 00000067H
  00280	6f		 DB	 111			; 0000006fH
  00281	72		 DB	 114			; 00000072H
  00282	79		 DB	 121			; 00000079H
  00283	00		 DB	 0
?TraceV@CTrace@ATL@@CAXPBDHIIPB_W@Z ENDP		; ATL::CTrace::TraceV
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.34.31933\atlmfc\include\atltrace.h
;	COMDAT ?GetCategoryName@CTrace@ATL@@CAPA_WI@Z
_TEXT	SEGMENT
_i$1 = -8						; size = 4
_nCategory$ = 8						; size = 4
?GetCategoryName@CTrace@ATL@@CAPA_WI@Z PROC		; ATL::CTrace::GetCategoryName, COMDAT

; 132  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  0000f	6a 03		 push	 3
  00011	59		 pop	 ecx
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	b9 00 00 00 00	 mov	 ecx, OFFSET __63F83F46_atltrace@h
  0001e	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 133  : 		for(unsigned int i = 0; i < m_nLastCategory; i++) 

  00023	83 65 f8 00	 and	 DWORD PTR _i$1[ebp], 0
  00027	eb 07		 jmp	 SHORT $LN4@GetCategor
$LN2@GetCategor:
  00029	8b 45 f8	 mov	 eax, DWORD PTR _i$1[ebp]
  0002c	40		 inc	 eax
  0002d	89 45 f8	 mov	 DWORD PTR _i$1[ebp], eax
$LN4@GetCategor:
  00030	8b 45 f8	 mov	 eax, DWORD PTR _i$1[ebp]
  00033	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?m_nLastCategory@CTrace@ATL@@1IA ; ATL::CTrace::m_nLastCategory
  00039	73 22		 jae	 SHORT $LN3@GetCategor

; 134  : 		{
; 135  : 			if (m_nMap[i].nCategory == nCategory)

  0003b	69 45 f8 04 01
	00 00		 imul	 eax, DWORD PTR _i$1[ebp], 260
  00042	8b 80 00 00 00
	00		 mov	 eax, DWORD PTR ?m_nMap@CTrace@ATL@@1PAUCategoryMap@12@A[eax]
  00048	3b 45 08	 cmp	 eax, DWORD PTR _nCategory$[ebp]
  0004b	75 0e		 jne	 SHORT $LN5@GetCategor

; 136  : 			{
; 137  : 				return m_nMap[i].categryName;

  0004d	69 45 f8 04 01
	00 00		 imul	 eax, DWORD PTR _i$1[ebp], 260
  00054	05 04 00 00 00	 add	 eax, OFFSET ?m_nMap@CTrace@ATL@@1PAUCategoryMap@12@A+4
  00059	eb 04		 jmp	 SHORT $LN1@GetCategor
$LN5@GetCategor:

; 138  : 			}
; 139  : 		}

  0005b	eb cc		 jmp	 SHORT $LN2@GetCategor
$LN3@GetCategor:

; 140  : 
; 141  : 		return nullptr;

  0005d	33 c0		 xor	 eax, eax
$LN1@GetCategor:

; 142  : 	}

  0005f	5f		 pop	 edi
  00060	5e		 pop	 esi
  00061	5b		 pop	 ebx
  00062	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00068	3b ec		 cmp	 ebp, esp
  0006a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006f	c9		 leave
  00070	c3		 ret	 0
?GetCategoryName@CTrace@ATL@@CAPA_WI@Z ENDP		; ATL::CTrace::GetCategoryName
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.34.31933\atlmfc\include\atltrace.h
;	COMDAT ??__EatlTraceString@ATL@@YAXXZ
text$di	SEGMENT
??__EatlTraceString@ATL@@YAXXZ PROC			; ATL::`dynamic initializer for 'atlTraceString'', COMDAT

; 114  : __declspec(selectany) CTraceCategoryEx<CTraceCategoryEx<>::TraceString> atlTraceString(_T("atlTraceString"));

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __63F83F46_atltrace@h
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00021	68 00 00 00 00	 push	 OFFSET ??_C@_1BO@GMLILNDJ@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg@
  00026	b9 00 00 00 00	 mov	 ecx, OFFSET ?atlTraceString@ATL@@3V?$CTraceCategoryEx@$0CAAAA@$0A@@1@A ; ATL::atlTraceString
  0002b	e8 00 00 00 00	 call	 ??0?$CTraceCategoryEx@$0CAAAA@$0A@@ATL@@QAE@PB_W@Z ; ATL::CTraceCategoryEx<131072,0>::CTraceCategoryEx<131072,0>
  00030	5f		 pop	 edi
  00031	5e		 pop	 esi
  00032	5b		 pop	 ebx
  00033	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00039	3b ec		 cmp	 ebp, esp
  0003b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00040	c9		 leave
  00041	c3		 ret	 0
??__EatlTraceString@ATL@@YAXXZ ENDP			; ATL::`dynamic initializer for 'atlTraceString''
text$di	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.34.31933\atlmfc\include\atltrace.h
;	COMDAT ??B?$CTraceCategoryEx@$0CAAAA@$0A@@ATL@@QAEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??B?$CTraceCategoryEx@$0CAAAA@$0A@@ATL@@QAEIXZ PROC	; ATL::CTraceCategoryEx<131072,0>::operator unsigned int, COMDAT
; _this$ = ecx

; 79   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	6a 03		 push	 3
  00012	59		 pop	 ecx
  00013	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00018	f3 ab		 rep stosd
  0001a	59		 pop	 ecx
  0001b	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __63F83F46_atltrace@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 80   : #ifdef _DEBUG
; 81   : 		return traceCategory;

  00028	b8 00 00 02 00	 mov	 eax, 131072		; 00020000H

; 82   : #else
; 83   : 		return 0;
; 84   : #endif
; 85   : 	}

  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00036	3b ec		 cmp	 ebp, esp
  00038	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003d	c9		 leave
  0003e	c3		 ret	 0
??B?$CTraceCategoryEx@$0CAAAA@$0A@@ATL@@QAEIXZ ENDP	; ATL::CTraceCategoryEx<131072,0>::operator unsigned int
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.34.31933\atlmfc\include\atltrace.h
;	COMDAT ??0?$CTraceCategoryEx@$0CAAAA@$0A@@ATL@@QAE@PB_W@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pszCategoryName$ = 8					; size = 4
??0?$CTraceCategoryEx@$0CAAAA@$0A@@ATL@@QAE@PB_W@Z PROC	; ATL::CTraceCategoryEx<131072,0>::CTraceCategoryEx<131072,0>, COMDAT
; _this$ = ecx

; 480  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	6a 03		 push	 3
  00012	59		 pop	 ecx
  00013	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00018	f3 ab		 rep stosd
  0001a	59		 pop	 ecx
  0001b	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __63F83F46_atltrace@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 481  : 	CTrace::RegisterCategory(pszCategoryName, traceCategory);

  00028	68 00 00 02 00	 push	 131072			; 00020000H
  0002d	ff 75 08	 push	 DWORD PTR _pszCategoryName$[ebp]
  00030	e8 00 00 00 00	 call	 ?RegisterCategory@CTrace@ATL@@SAXPB_WI@Z ; ATL::CTrace::RegisterCategory
  00035	59		 pop	 ecx
  00036	59		 pop	 ecx

; 482  : }

  00037	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	5f		 pop	 edi
  0003b	5e		 pop	 esi
  0003c	5b		 pop	 ebx
  0003d	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00043	3b ec		 cmp	 ebp, esp
  00045	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004a	c9		 leave
  0004b	c2 04 00	 ret	 4
??0?$CTraceCategoryEx@$0CAAAA@$0A@@ATL@@QAE@PB_W@Z ENDP	; ATL::CTraceCategoryEx<131072,0>::CTraceCategoryEx<131072,0>
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.34.31933\atlmfc\include\atltrace.h
;	COMDAT ??__EatlTraceException@ATL@@YAXXZ
text$di	SEGMENT
??__EatlTraceException@ATL@@YAXXZ PROC			; ATL::`dynamic initializer for 'atlTraceException'', COMDAT

; 110  : __declspec(selectany) CTraceCategoryEx<CTraceCategoryEx<>::TraceException> atlTraceException(_T("atlTraceException"));

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __63F83F46_atltrace@h
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00021	68 00 00 00 00	 push	 OFFSET ??_C@_1CE@IMMADNAP@?$AAa?$AAt?$AAl?$AAT?$AAr?$AAa?$AAc?$AAe?$AAE?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi@
  00026	b9 00 00 00 00	 mov	 ecx, OFFSET ?atlTraceException@ATL@@3V?$CTraceCategoryEx@$0CAAA@$0A@@1@A ; ATL::atlTraceException
  0002b	e8 00 00 00 00	 call	 ??0?$CTraceCategoryEx@$0CAAA@$0A@@ATL@@QAE@PB_W@Z ; ATL::CTraceCategoryEx<8192,0>::CTraceCategoryEx<8192,0>
  00030	5f		 pop	 edi
  00031	5e		 pop	 esi
  00032	5b		 pop	 ebx
  00033	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00039	3b ec		 cmp	 ebp, esp
  0003b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00040	c9		 leave
  00041	c3		 ret	 0
??__EatlTraceException@ATL@@YAXXZ ENDP			; ATL::`dynamic initializer for 'atlTraceException''
text$di	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.34.31933\atlmfc\include\atltrace.h
;	COMDAT ??B?$CTraceCategoryEx@$0CAAA@$0A@@ATL@@QAEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??B?$CTraceCategoryEx@$0CAAA@$0A@@ATL@@QAEIXZ PROC	; ATL::CTraceCategoryEx<8192,0>::operator unsigned int, COMDAT
; _this$ = ecx

; 79   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	6a 03		 push	 3
  00012	59		 pop	 ecx
  00013	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00018	f3 ab		 rep stosd
  0001a	59		 pop	 ecx
  0001b	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __63F83F46_atltrace@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 80   : #ifdef _DEBUG
; 81   : 		return traceCategory;

  00028	b8 00 20 00 00	 mov	 eax, 8192		; 00002000H

; 82   : #else
; 83   : 		return 0;
; 84   : #endif
; 85   : 	}

  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00036	3b ec		 cmp	 ebp, esp
  00038	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003d	c9		 leave
  0003e	c3		 ret	 0
??B?$CTraceCategoryEx@$0CAAA@$0A@@ATL@@QAEIXZ ENDP	; ATL::CTraceCategoryEx<8192,0>::operator unsigned int
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.34.31933\atlmfc\include\atltrace.h
;	COMDAT ??0?$CTraceCategoryEx@$0CAAA@$0A@@ATL@@QAE@PB_W@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pszCategoryName$ = 8					; size = 4
??0?$CTraceCategoryEx@$0CAAA@$0A@@ATL@@QAE@PB_W@Z PROC	; ATL::CTraceCategoryEx<8192,0>::CTraceCategoryEx<8192,0>, COMDAT
; _this$ = ecx

; 480  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d 7d f4	 lea	 edi, DWORD PTR [ebp-12]
  00010	6a 03		 push	 3
  00012	59		 pop	 ecx
  00013	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00018	f3 ab		 rep stosd
  0001a	59		 pop	 ecx
  0001b	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __63F83F46_atltrace@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 481  : 	CTrace::RegisterCategory(pszCategoryName, traceCategory);

  00028	68 00 20 00 00	 push	 8192			; 00002000H
  0002d	ff 75 08	 push	 DWORD PTR _pszCategoryName$[ebp]
  00030	e8 00 00 00 00	 call	 ?RegisterCategory@CTrace@ATL@@SAXPB_WI@Z ; ATL::CTrace::RegisterCategory
  00035	59		 pop	 ecx
  00036	59		 pop	 ecx

; 482  : }

  00037	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	5f		 pop	 edi
  0003b	5e		 pop	 esi
  0003c	5b		 pop	 ebx
  0003d	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00043	3b ec		 cmp	 ebp, esp
  00045	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004a	c9		 leave
  0004b	c2 04 00	 ret	 4
??0?$CTraceCategoryEx@$0CAAA@$0A@@ATL@@QAE@PB_W@Z ENDP	; ATL::CTraceCategoryEx<8192,0>::CTraceCategoryEx<8192,0>
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.34.31933\atlmfc\include\atlalloc.h
;	COMDAT ?Free@CCRTAllocator@ATL@@SAXPAX@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
?Free@CCRTAllocator@ATL@@SAXPAX@Z PROC			; ATL::CCRTAllocator::Free, COMDAT

; 267  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __D909E87F_atlalloc@h
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 268  : 		free(p);

  00021	ff 75 08	 push	 DWORD PTR _p$[ebp]
  00024	e8 00 00 00 00	 call	 _free
  00029	59		 pop	 ecx

; 269  : 	}

  0002a	5f		 pop	 edi
  0002b	5e		 pop	 esi
  0002c	5b		 pop	 ebx
  0002d	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00033	3b ec		 cmp	 ebp, esp
  00035	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003a	c9		 leave
  0003b	c3		 ret	 0
?Free@CCRTAllocator@ATL@@SAXPAX@Z ENDP			; ATL::CCRTAllocator::Free
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.34.31933\atlmfc\include\atlalloc.h
;	COMDAT ?Allocate@CCRTAllocator@ATL@@SAPAXI@Z
_TEXT	SEGMENT
_nBytes$ = 8						; size = 4
?Allocate@CCRTAllocator@ATL@@SAPAXI@Z PROC		; ATL::CCRTAllocator::Allocate, COMDAT

; 262  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __D909E87F_atlalloc@h
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 263  : 		return malloc(nBytes);

  00021	ff 75 08	 push	 DWORD PTR _nBytes$[ebp]
  00024	e8 00 00 00 00	 call	 _malloc
  00029	59		 pop	 ecx

; 264  : 	}

  0002a	5f		 pop	 edi
  0002b	5e		 pop	 esi
  0002c	5b		 pop	 ebx
  0002d	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00033	3b ec		 cmp	 ebp, esp
  00035	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003a	c9		 leave
  0003b	c3		 ret	 0
?Allocate@CCRTAllocator@ATL@@SAPAXI@Z ENDP		; ATL::CCRTAllocator::Allocate
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.34.31933\atlmfc\include\atlalloc.h
;	COMDAT ??$AtlMultiply@I@ATL@@YAJPAIII@Z
_TEXT	SEGMENT
_i64Result$ = -12					; size = 8
_piResult$ = 8						; size = 4
_iLeft$ = 12						; size = 4
_iRight$ = 16						; size = 4
??$AtlMultiply@I@ATL@@YAJPAIII@Z PROC			; ATL::AtlMultiply<unsigned int>, COMDAT

; 135  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d 7d f0	 lea	 edi, DWORD PTR [ebp-16]
  0000f	6a 04		 push	 4
  00011	59		 pop	 ecx
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	b9 00 00 00 00	 mov	 ecx, OFFSET __D909E87F_atlalloc@h
  0001e	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 136  : 	unsigned __int64 i64Result=static_cast<unsigned __int64>(iLeft) * static_cast<unsigned __int64>(iRight);

  00023	8b 45 0c	 mov	 eax, DWORD PTR _iLeft$[ebp]
  00026	f7 65 10	 mul	 DWORD PTR _iRight$[ebp]
  00029	89 45 f4	 mov	 DWORD PTR _i64Result$[ebp], eax
  0002c	89 55 f8	 mov	 DWORD PTR _i64Result$[ebp+4], edx

; 137  : 	if(i64Result>UINT_MAX)

  0002f	83 7d f8 00	 cmp	 DWORD PTR _i64Result$[ebp+4], 0
  00033	77 06		 ja	 SHORT $LN4@AtlMultipl
  00035	83 7d f4 ff	 cmp	 DWORD PTR _i64Result$[ebp], -1
  00039	76 0d		 jbe	 SHORT $LN2@AtlMultipl
$LN4@AtlMultipl:

; 138  : 	{
; 139  : 		return HRESULT_FROM_WIN32(ERROR_ARITHMETIC_OVERFLOW);

  0003b	68 16 02 00 00	 push	 534			; 00000216H
  00040	e8 00 00 00 00	 call	 _HRESULT_FROM_WIN32
  00045	59		 pop	 ecx
  00046	eb 0a		 jmp	 SHORT $LN1@AtlMultipl
$LN2@AtlMultipl:

; 140  : 	}
; 141  : 	*piResult=static_cast<unsigned int>(i64Result);

  00048	8b 45 f4	 mov	 eax, DWORD PTR _i64Result$[ebp]
  0004b	8b 4d 08	 mov	 ecx, DWORD PTR _piResult$[ebp]
  0004e	89 01		 mov	 DWORD PTR [ecx], eax

; 142  : 	return S_OK;

  00050	33 c0		 xor	 eax, eax
$LN1@AtlMultipl:

; 143  : }

  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5b		 pop	 ebx
  00055	81 c4 d0 00 00
	00		 add	 esp, 208		; 000000d0H
  0005b	3b ec		 cmp	 ebp, esp
  0005d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00062	c9		 leave
  00063	c3		 ret	 0
??$AtlMultiply@I@ATL@@YAJPAIII@Z ENDP			; ATL::AtlMultiply<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.34.31933\atlmfc\include\atlexcept.h
;	COMDAT ?AtlThrowImpl@ATL@@YGXJ@Z
_TEXT	SEGMENT
$T1 = -204						; size = 8
_hr$ = 8						; size = 4
?AtlThrowImpl@ATL@@YGXJ@Z PROC				; ATL::AtlThrowImpl, COMDAT

; 65   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d 7d f0	 lea	 edi, DWORD PTR [ebp-16]
  0000f	6a 04		 push	 4
  00011	59		 pop	 ecx
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	b9 00 00 00 00	 mov	 ecx, OFFSET __AA932BE8_atlexcept@h
  0001e	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 66   : 	ATLTRACE(atlTraceException, 0, _T("AtlThrow: hr = 0x%x\n"), hr );

  00023	ff 75 08	 push	 DWORD PTR _hr$[ebp]
  00026	68 00 00 00 00	 push	 OFFSET ??_C@_1CK@DFMKPFAK@?$AAA?$AAt?$AAl?$AAT?$AAh?$AAr?$AAo?$AAw?$AA?3?$AA?5?$AAh?$AAr?$AA?5?$AA?$DN?$AA?5@
  0002b	6a 00		 push	 0
  0002d	b9 00 00 00 00	 mov	 ecx, OFFSET ?atlTraceException@ATL@@3V?$CTraceCategoryEx@$0CAAA@$0A@@1@A ; ATL::atlTraceException
  00032	e8 00 00 00 00	 call	 ??B?$CTraceCategoryEx@$0CAAA@$0A@@ATL@@QAEIXZ ; ATL::CTraceCategoryEx<8192,0>::operator unsigned int
  00037	50		 push	 eax
  00038	a1 00 00 00 00	 mov	 eax, DWORD PTR ?__LINE__Var@?0??AtlThrowImpl@ATL@@YGXJ@Z@4JA
  0003d	40		 inc	 eax
  0003e	50		 push	 eax
  0003f	68 00 00 00 00	 push	 OFFSET ??_C@_0GO@OMMACHMC@C?3?2Program?5Files?2Microsoft?5Visu@
  00044	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR $T1[ebp]
  0004a	e8 00 00 00 00	 call	 ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
  0004f	50		 push	 eax
  00050	e8 00 00 00 00	 call	 ??RCTraceFileAndLineInfo@ATL@@QBAXHIPB_WZZ ; ATL::CTraceFileAndLineInfo::operator()
  00055	83 c4 14	 add	 esp, 20			; 00000014H

; 67   : #ifdef _AFX
; 68   : 	if( hr == E_OUTOFMEMORY )

  00058	81 7d 08 0e 00
	07 80		 cmp	 DWORD PTR _hr$[ebp], -2147024882 ; 8007000eH
  0005f	75 07		 jne	 SHORT $LN2@AtlThrowIm

; 69   : 	{
; 70   : 		AfxThrowMemoryException();

  00061	e8 00 00 00 00	 call	 ?AfxThrowMemoryException@@YGXXZ ; AfxThrowMemoryException

; 71   : 	}

  00066	eb 08		 jmp	 SHORT $LN4@AtlThrowIm
$LN2@AtlThrowIm:

; 72   : 	else
; 73   : 	{
; 74   : 		AfxThrowOleException( hr );

  00068	ff 75 08	 push	 DWORD PTR _hr$[ebp]
  0006b	e8 00 00 00 00	 call	 ?AfxThrowOleException@@YGXJ@Z ; AfxThrowOleException
$LN4@AtlThrowIm:

; 75   : 	}
; 76   : #else
; 77   : 	throw CAtlException( hr );
; 78   : #endif
; 79   : };

  00070	5f		 pop	 edi
  00071	5e		 pop	 esi
  00072	5b		 pop	 ebx
  00073	81 c4 d0 00 00
	00		 add	 esp, 208		; 000000d0H
  00079	3b ec		 cmp	 ebp, esp
  0007b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00080	c9		 leave
  00081	c2 04 00	 ret	 4
?AtlThrowImpl@ATL@@YGXJ@Z ENDP				; ATL::AtlThrowImpl
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_wstdio.h
;	COMDAT _swprintf_s
_TEXT	SEGMENT
__ArgList$ = -20					; size = 4
__Result$ = -8						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
_swprintf_s PROC					; COMDAT

; 1523 :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e4 00 00
	00		 sub	 esp, 228		; 000000e4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d 7d dc	 lea	 edi, DWORD PTR [ebp-36]
  0000f	6a 09		 push	 9
  00011	59		 pop	 ecx
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	b9 00 00 00 00	 mov	 ecx, OFFSET __A7F89B2B_corecrt_wstdio@h
  0001e	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1524 :             int _Result;
; 1525 :             va_list _ArgList;
; 1526 :             __crt_va_start(_ArgList, _Format);

  00023	8d 45 14	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00026	89 45 ec	 mov	 DWORD PTR __ArgList$[ebp], eax

; 1527 :             _Result = _vswprintf_s_l(_Buffer, _BufferCount, _Format, NULL, _ArgList);

  00029	ff 75 ec	 push	 DWORD PTR __ArgList$[ebp]
  0002c	6a 00		 push	 0
  0002e	ff 75 10	 push	 DWORD PTR __Format$[ebp]
  00031	ff 75 0c	 push	 DWORD PTR __BufferCount$[ebp]
  00034	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00037	e8 00 00 00 00	 call	 __vswprintf_s_l
  0003c	83 c4 14	 add	 esp, 20			; 00000014H
  0003f	89 45 f8	 mov	 DWORD PTR __Result$[ebp], eax

; 1528 :             __crt_va_end(_ArgList);

  00042	83 65 ec 00	 and	 DWORD PTR __ArgList$[ebp], 0

; 1529 :             return _Result;

  00046	8b 45 f8	 mov	 eax, DWORD PTR __Result$[ebp]

; 1530 :         }

  00049	5f		 pop	 edi
  0004a	5e		 pop	 esi
  0004b	5b		 pop	 ebx
  0004c	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  00052	3b ec		 cmp	 ebp, esp
  00054	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00059	c9		 leave
  0005a	c3		 ret	 0
_swprintf_s ENDP
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_wstdio.h
;	COMDAT __vswprintf_s_l
_TEXT	SEGMENT
tv73 = -208						; size = 4
__Result$ = -8						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__Locale$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vswprintf_s_l PROC					; COMDAT

; 1256 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d 7d f0	 lea	 edi, DWORD PTR [ebp-16]
  0000f	6a 04		 push	 4
  00011	59		 pop	 ecx
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	b9 00 00 00 00	 mov	 ecx, OFFSET __A7F89B2B_corecrt_wstdio@h
  0001e	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1257 :         int const _Result = __stdio_common_vswprintf_s(

  00023	ff 75 18	 push	 DWORD PTR __ArgList$[ebp]
  00026	ff 75 14	 push	 DWORD PTR __Locale$[ebp]
  00029	ff 75 10	 push	 DWORD PTR __Format$[ebp]
  0002c	ff 75 0c	 push	 DWORD PTR __BufferCount$[ebp]
  0002f	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00032	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00037	ff 70 04	 push	 DWORD PTR [eax+4]
  0003a	ff 30		 push	 DWORD PTR [eax]
  0003c	e8 00 00 00 00	 call	 ___stdio_common_vswprintf_s
  00041	83 c4 1c	 add	 esp, 28			; 0000001cH
  00044	89 45 f8	 mov	 DWORD PTR __Result$[ebp], eax

; 1258 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS,
; 1259 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1260 : 
; 1261 :         return _Result < 0 ? -1 : _Result;

  00047	83 7d f8 00	 cmp	 DWORD PTR __Result$[ebp], 0
  0004b	7d 09		 jge	 SHORT $LN3@vswprintf_
  0004d	83 8d 30 ff ff
	ff ff		 or	 DWORD PTR tv73[ebp], -1
  00054	eb 09		 jmp	 SHORT $LN4@vswprintf_
$LN3@vswprintf_:
  00056	8b 45 f8	 mov	 eax, DWORD PTR __Result$[ebp]
  00059	89 85 30 ff ff
	ff		 mov	 DWORD PTR tv73[ebp], eax
$LN4@vswprintf_:
  0005f	8b 85 30 ff ff
	ff		 mov	 eax, DWORD PTR tv73[ebp]

; 1262 :     }

  00065	5f		 pop	 edi
  00066	5e		 pop	 esi
  00067	5b		 pop	 ebx
  00068	81 c4 d0 00 00
	00		 add	 esp, 208		; 000000d0H
  0006e	3b ec		 cmp	 ebp, esp
  00070	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00075	c9		 leave
  00076	c3		 ret	 0
__vswprintf_s_l ENDP
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 90   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __C44F8F6B_corecrt_stdio_config@h
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 91   :         static unsigned __int64 _OptionsStorage;
; 92   :         return &_OptionsStorage;

  00021	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 93   :     }

  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	5b		 pop	 ebx
  00029	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0002f	3b ec		 cmp	 ebp, esp
  00031	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00036	c9		 leave
  00037	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\shared\winerror.h
;	COMDAT _HRESULT_FROM_WIN32
_TEXT	SEGMENT
tv68 = -196						; size = 4
_x$ = 8							; size = 4
_HRESULT_FROM_WIN32 PROC				; COMDAT

; 29718: FORCEINLINE _Translates_Win32_to_HRESULT_(x) HRESULT HRESULT_FROM_WIN32(unsigned long x) { return (HRESULT)(x) <= 0 ? (HRESULT)(x) : (HRESULT) (((x) & 0x0000FFFF) | (FACILITY_WIN32 << 16) | 0x80000000);}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d 7d fc	 lea	 edi, DWORD PTR [ebp-4]
  0000f	33 c9		 xor	 ecx, ecx
  00011	41		 inc	 ecx
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	b9 00 00 00 00	 mov	 ecx, OFFSET __A8C6672F_winerror@h
  0001e	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00023	83 7d 08 00	 cmp	 DWORD PTR _x$[ebp], 0
  00027	7f 0b		 jg	 SHORT $LN3@HRESULT_FR
  00029	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  0002c	89 85 3c ff ff
	ff		 mov	 DWORD PTR tv68[ebp], eax
  00032	eb 18		 jmp	 SHORT $LN4@HRESULT_FR
$LN3@HRESULT_FR:
  00034	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00037	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  0003c	0d 00 00 07 00	 or	 eax, 458752		; 00070000H
  00041	0d 00 00 00 80	 or	 eax, -2147483648	; 80000000H
  00046	89 85 3c ff ff
	ff		 mov	 DWORD PTR tv68[ebp], eax
$LN4@HRESULT_FR:
  0004c	8b 85 3c ff ff
	ff		 mov	 eax, DWORD PTR tv68[ebp]
  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5b		 pop	 ebx
  00055	81 c4 c4 00 00
	00		 add	 esp, 196		; 000000c4H
  0005b	3b ec		 cmp	 ebp, esp
  0005d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00062	c9		 leave
  00063	c3		 ret	 0
_HRESULT_FROM_WIN32 ENDP
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_memcpy_s.h
;	COMDAT _memmove_s
_TEXT	SEGMENT
tv74 = -232						; size = 4
tv70 = -232						; size = 4
tv66 = -232						; size = 4
__Expr_val$1 = -32					; size = 4
__Expr_val$2 = -20					; size = 4
__Expr_val$3 = -8					; size = 4
__Destination$ = 8					; size = 4
__DestinationSize$ = 12					; size = 4
__Source$ = 16						; size = 4
__SourceSize$ = 20					; size = 4
_memmove_s PROC						; COMDAT

; 73   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e8 00 00
	00		 sub	 esp, 232		; 000000e8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d 7d d8	 lea	 edi, DWORD PTR [ebp-40]
  0000f	6a 0a		 push	 10			; 0000000aH
  00011	59		 pop	 ecx
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	b9 00 00 00 00	 mov	 ecx, OFFSET __184F7456_corecrt_memcpy_s@h
  0001e	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 74   :         if (_SourceSize == 0)

  00023	83 7d 14 00	 cmp	 DWORD PTR __SourceSize$[ebp], 0
  00027	75 07		 jne	 SHORT $LN2@memmove_s

; 75   :         {
; 76   :             return 0;

  00029	33 c0		 xor	 eax, eax
  0002b	e9 cf 00 00 00	 jmp	 $LN1@memmove_s
$LN2@memmove_s:

; 77   :         }
; 78   : 
; 79   :         _CRT_MEMCPY_S_VALIDATE_RETURN_ERRCODE(_Destination != NULL,            EINVAL);

  00030	83 7d 08 00	 cmp	 DWORD PTR __Destination$[ebp], 0
  00034	74 0c		 je	 SHORT $LN7@memmove_s
  00036	c7 85 18 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv66[ebp], 1
  00040	eb 07		 jmp	 SHORT $LN8@memmove_s
$LN7@memmove_s:
  00042	83 a5 18 ff ff
	ff 00		 and	 DWORD PTR tv66[ebp], 0
$LN8@memmove_s:
  00049	8b 85 18 ff ff
	ff		 mov	 eax, DWORD PTR tv66[ebp]
  0004f	89 45 f8	 mov	 DWORD PTR __Expr_val$3[ebp], eax
  00052	83 7d f8 00	 cmp	 DWORD PTR __Expr_val$3[ebp], 0
  00056	75 18		 jne	 SHORT $LN3@memmove_s
  00058	e8 00 00 00 00	 call	 __errno
  0005d	c7 00 16 00 00
	00		 mov	 DWORD PTR [eax], 22	; 00000016H
  00063	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00068	6a 16		 push	 22			; 00000016H
  0006a	58		 pop	 eax
  0006b	e9 8f 00 00 00	 jmp	 $LN1@memmove_s
$LN3@memmove_s:

; 80   :         _CRT_MEMCPY_S_VALIDATE_RETURN_ERRCODE(_Source != NULL,                 EINVAL);

  00070	83 7d 10 00	 cmp	 DWORD PTR __Source$[ebp], 0
  00074	74 0c		 je	 SHORT $LN9@memmove_s
  00076	c7 85 18 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv70[ebp], 1
  00080	eb 07		 jmp	 SHORT $LN10@memmove_s
$LN9@memmove_s:
  00082	83 a5 18 ff ff
	ff 00		 and	 DWORD PTR tv70[ebp], 0
$LN10@memmove_s:
  00089	8b 85 18 ff ff
	ff		 mov	 eax, DWORD PTR tv70[ebp]
  0008f	89 45 ec	 mov	 DWORD PTR __Expr_val$2[ebp], eax
  00092	83 7d ec 00	 cmp	 DWORD PTR __Expr_val$2[ebp], 0
  00096	75 15		 jne	 SHORT $LN4@memmove_s
  00098	e8 00 00 00 00	 call	 __errno
  0009d	c7 00 16 00 00
	00		 mov	 DWORD PTR [eax], 22	; 00000016H
  000a3	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  000a8	6a 16		 push	 22			; 00000016H
  000aa	58		 pop	 eax
  000ab	eb 52		 jmp	 SHORT $LN1@memmove_s
$LN4@memmove_s:

; 81   :         _CRT_MEMCPY_S_VALIDATE_RETURN_ERRCODE(_DestinationSize >= _SourceSize, ERANGE);

  000ad	8b 45 0c	 mov	 eax, DWORD PTR __DestinationSize$[ebp]
  000b0	3b 45 14	 cmp	 eax, DWORD PTR __SourceSize$[ebp]
  000b3	72 0c		 jb	 SHORT $LN11@memmove_s
  000b5	c7 85 18 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv74[ebp], 1
  000bf	eb 07		 jmp	 SHORT $LN12@memmove_s
$LN11@memmove_s:
  000c1	83 a5 18 ff ff
	ff 00		 and	 DWORD PTR tv74[ebp], 0
$LN12@memmove_s:
  000c8	8b 85 18 ff ff
	ff		 mov	 eax, DWORD PTR tv74[ebp]
  000ce	89 45 e0	 mov	 DWORD PTR __Expr_val$1[ebp], eax
  000d1	83 7d e0 00	 cmp	 DWORD PTR __Expr_val$1[ebp], 0
  000d5	75 15		 jne	 SHORT $LN5@memmove_s
  000d7	e8 00 00 00 00	 call	 __errno
  000dc	c7 00 22 00 00
	00		 mov	 DWORD PTR [eax], 34	; 00000022H
  000e2	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  000e7	6a 22		 push	 34			; 00000022H
  000e9	58		 pop	 eax
  000ea	eb 13		 jmp	 SHORT $LN1@memmove_s
$LN5@memmove_s:

; 82   : 
; 83   :         memmove(_Destination, _Source, _SourceSize);

  000ec	ff 75 14	 push	 DWORD PTR __SourceSize$[ebp]
  000ef	ff 75 10	 push	 DWORD PTR __Source$[ebp]
  000f2	ff 75 08	 push	 DWORD PTR __Destination$[ebp]
  000f5	e8 00 00 00 00	 call	 _memmove
  000fa	83 c4 0c	 add	 esp, 12			; 0000000cH

; 84   :         return 0;

  000fd	33 c0		 xor	 eax, eax
$LN1@memmove_s:

; 85   :     }

  000ff	5f		 pop	 edi
  00100	5e		 pop	 esi
  00101	5b		 pop	 ebx
  00102	81 c4 e8 00 00
	00		 add	 esp, 232		; 000000e8H
  00108	3b ec		 cmp	 ebp, esp
  0010a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0010f	c9		 leave
  00110	c3		 ret	 0
_memmove_s ENDP
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_memcpy_s.h
;	COMDAT _memcpy_s
_TEXT	SEGMENT
tv79 = -232						; size = 4
tv75 = -232						; size = 4
tv66 = -232						; size = 4
__Expr_val$1 = -32					; size = 4
__Expr_val$2 = -20					; size = 4
__Expr_val$3 = -8					; size = 4
__Destination$ = 8					; size = 4
__DestinationSize$ = 12					; size = 4
__Source$ = 16						; size = 4
__SourceSize$ = 20					; size = 4
_memcpy_s PROC						; COMDAT

; 45   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e8 00 00
	00		 sub	 esp, 232		; 000000e8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d 7d d8	 lea	 edi, DWORD PTR [ebp-40]
  0000f	6a 0a		 push	 10			; 0000000aH
  00011	59		 pop	 ecx
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	b9 00 00 00 00	 mov	 ecx, OFFSET __184F7456_corecrt_memcpy_s@h
  0001e	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 46   :         if (_SourceSize == 0)

  00023	83 7d 14 00	 cmp	 DWORD PTR __SourceSize$[ebp], 0
  00027	75 07		 jne	 SHORT $LN2@memcpy_s

; 47   :         {
; 48   :             return 0;

  00029	33 c0		 xor	 eax, eax
  0002b	e9 f6 00 00 00	 jmp	 $LN1@memcpy_s
$LN2@memcpy_s:

; 49   :         }
; 50   : 
; 51   :         _CRT_MEMCPY_S_VALIDATE_RETURN_ERRCODE(_Destination != NULL, EINVAL);

  00030	83 7d 08 00	 cmp	 DWORD PTR __Destination$[ebp], 0
  00034	74 0c		 je	 SHORT $LN9@memcpy_s
  00036	c7 85 18 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv66[ebp], 1
  00040	eb 07		 jmp	 SHORT $LN10@memcpy_s
$LN9@memcpy_s:
  00042	83 a5 18 ff ff
	ff 00		 and	 DWORD PTR tv66[ebp], 0
$LN10@memcpy_s:
  00049	8b 85 18 ff ff
	ff		 mov	 eax, DWORD PTR tv66[ebp]
  0004f	89 45 f8	 mov	 DWORD PTR __Expr_val$3[ebp], eax
  00052	83 7d f8 00	 cmp	 DWORD PTR __Expr_val$3[ebp], 0
  00056	75 18		 jne	 SHORT $LN3@memcpy_s
  00058	e8 00 00 00 00	 call	 __errno
  0005d	c7 00 16 00 00
	00		 mov	 DWORD PTR [eax], 22	; 00000016H
  00063	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00068	6a 16		 push	 22			; 00000016H
  0006a	58		 pop	 eax
  0006b	e9 b6 00 00 00	 jmp	 $LN1@memcpy_s
$LN3@memcpy_s:

; 52   :         if (_Source == NULL || _DestinationSize < _SourceSize)

  00070	83 7d 10 00	 cmp	 DWORD PTR __Source$[ebp], 0
  00074	74 0c		 je	 SHORT $LN5@memcpy_s
  00076	8b 45 0c	 mov	 eax, DWORD PTR __DestinationSize$[ebp]
  00079	3b 45 14	 cmp	 eax, DWORD PTR __SourceSize$[ebp]
  0007c	0f 83 91 00 00
	00		 jae	 $LN4@memcpy_s
$LN5@memcpy_s:

; 53   :         {
; 54   :             memset(_Destination, 0, _DestinationSize);

  00082	ff 75 0c	 push	 DWORD PTR __DestinationSize$[ebp]
  00085	6a 00		 push	 0
  00087	ff 75 08	 push	 DWORD PTR __Destination$[ebp]
  0008a	e8 00 00 00 00	 call	 _memset
  0008f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 55   : 
; 56   :             _CRT_MEMCPY_S_VALIDATE_RETURN_ERRCODE(_Source != NULL,                 EINVAL);

  00092	83 7d 10 00	 cmp	 DWORD PTR __Source$[ebp], 0
  00096	74 0c		 je	 SHORT $LN11@memcpy_s
  00098	c7 85 18 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv75[ebp], 1
  000a2	eb 07		 jmp	 SHORT $LN12@memcpy_s
$LN11@memcpy_s:
  000a4	83 a5 18 ff ff
	ff 00		 and	 DWORD PTR tv75[ebp], 0
$LN12@memcpy_s:
  000ab	8b 85 18 ff ff
	ff		 mov	 eax, DWORD PTR tv75[ebp]
  000b1	89 45 ec	 mov	 DWORD PTR __Expr_val$2[ebp], eax
  000b4	83 7d ec 00	 cmp	 DWORD PTR __Expr_val$2[ebp], 0
  000b8	75 15		 jne	 SHORT $LN6@memcpy_s
  000ba	e8 00 00 00 00	 call	 __errno
  000bf	c7 00 16 00 00
	00		 mov	 DWORD PTR [eax], 22	; 00000016H
  000c5	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  000ca	6a 16		 push	 22			; 00000016H
  000cc	58		 pop	 eax
  000cd	eb 57		 jmp	 SHORT $LN1@memcpy_s
$LN6@memcpy_s:

; 57   :             _CRT_MEMCPY_S_VALIDATE_RETURN_ERRCODE(_DestinationSize >= _SourceSize, ERANGE);

  000cf	8b 45 0c	 mov	 eax, DWORD PTR __DestinationSize$[ebp]
  000d2	3b 45 14	 cmp	 eax, DWORD PTR __SourceSize$[ebp]
  000d5	72 0c		 jb	 SHORT $LN13@memcpy_s
  000d7	c7 85 18 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv79[ebp], 1
  000e1	eb 07		 jmp	 SHORT $LN14@memcpy_s
$LN13@memcpy_s:
  000e3	83 a5 18 ff ff
	ff 00		 and	 DWORD PTR tv79[ebp], 0
$LN14@memcpy_s:
  000ea	8b 85 18 ff ff
	ff		 mov	 eax, DWORD PTR tv79[ebp]
  000f0	89 45 e0	 mov	 DWORD PTR __Expr_val$1[ebp], eax
  000f3	83 7d e0 00	 cmp	 DWORD PTR __Expr_val$1[ebp], 0
  000f7	75 15		 jne	 SHORT $LN7@memcpy_s
  000f9	e8 00 00 00 00	 call	 __errno
  000fe	c7 00 22 00 00
	00		 mov	 DWORD PTR [eax], 34	; 00000022H
  00104	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00109	6a 22		 push	 34			; 00000022H
  0010b	58		 pop	 eax
  0010c	eb 18		 jmp	 SHORT $LN1@memcpy_s
$LN7@memcpy_s:

; 58   : 
; 59   :             // Unreachable, but required to suppress /analyze warnings:
; 60   :             return EINVAL;

  0010e	6a 16		 push	 22			; 00000016H
  00110	58		 pop	 eax
  00111	eb 13		 jmp	 SHORT $LN1@memcpy_s
$LN4@memcpy_s:

; 61   :         }
; 62   :         memcpy(_Destination, _Source, _SourceSize);

  00113	ff 75 14	 push	 DWORD PTR __SourceSize$[ebp]
  00116	ff 75 10	 push	 DWORD PTR __Source$[ebp]
  00119	ff 75 08	 push	 DWORD PTR __Destination$[ebp]
  0011c	e8 00 00 00 00	 call	 _memcpy
  00121	83 c4 0c	 add	 esp, 12			; 0000000cH

; 63   :         return 0;

  00124	33 c0		 xor	 eax, eax
$LN1@memcpy_s:

; 64   :     }

  00126	5f		 pop	 edi
  00127	5e		 pop	 esi
  00128	5b		 pop	 ebx
  00129	81 c4 e8 00 00
	00		 add	 esp, 232		; 000000e8H
  0012f	3b ec		 cmp	 ebp, esp
  00131	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00136	c9		 leave
  00137	c3		 ret	 0
_memcpy_s ENDP
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
; File J:\work\SUDOKU\SUDOKU\SUDOKU\Calcul_temps.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __B901A205_Calcul_temps@cpp
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0002a	3b ec		 cmp	 ebp, esp
  0002c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00031	c9		 leave
  00032	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
; File J:\work\SUDOKU\SUDOKU\SUDOKU\Calcul_temps.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __B901A205_Calcul_temps@cpp
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0002a	3b ec		 cmp	 ebp, esp
  0002c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00031	c9		 leave
  00032	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
